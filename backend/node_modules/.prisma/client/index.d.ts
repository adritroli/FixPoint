
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model assets
 * 
 */
export type assets = $Result.DefaultSelection<Prisma.$assetsPayload>
/**
 * Model budgets
 * 
 */
export type budgets = $Result.DefaultSelection<Prisma.$budgetsPayload>
/**
 * Model channel_members
 * 
 */
export type channel_members = $Result.DefaultSelection<Prisma.$channel_membersPayload>
/**
 * Model channels
 * 
 */
export type channels = $Result.DefaultSelection<Prisma.$channelsPayload>
/**
 * Model clients
 * 
 */
export type clients = $Result.DefaultSelection<Prisma.$clientsPayload>
/**
 * Model contracts
 * 
 */
export type contracts = $Result.DefaultSelection<Prisma.$contractsPayload>
/**
 * Model costs
 * 
 */
export type costs = $Result.DefaultSelection<Prisma.$costsPayload>
/**
 * Model documents
 * 
 */
export type documents = $Result.DefaultSelection<Prisma.$documentsPayload>
/**
 * Model events
 * 
 */
export type events = $Result.DefaultSelection<Prisma.$eventsPayload>
/**
 * Model hr_records
 * 
 */
export type hr_records = $Result.DefaultSelection<Prisma.$hr_recordsPayload>
/**
 * Model leads
 * 
 */
export type leads = $Result.DefaultSelection<Prisma.$leadsPayload>
/**
 * Model messages
 * 
 */
export type messages = $Result.DefaultSelection<Prisma.$messagesPayload>
/**
 * Model permissions
 * 
 */
export type permissions = $Result.DefaultSelection<Prisma.$permissionsPayload>
/**
 * Model project_resources
 * 
 */
export type project_resources = $Result.DefaultSelection<Prisma.$project_resourcesPayload>
/**
 * Model projects
 * 
 */
export type projects = $Result.DefaultSelection<Prisma.$projectsPayload>
/**
 * Model reports
 * 
 */
export type reports = $Result.DefaultSelection<Prisma.$reportsPayload>
/**
 * Model resources
 * 
 */
export type resources = $Result.DefaultSelection<Prisma.$resourcesPayload>
/**
 * Model sprint_tasks
 * 
 */
export type sprint_tasks = $Result.DefaultSelection<Prisma.$sprint_tasksPayload>
/**
 * Model sprints
 * 
 */
export type sprints = $Result.DefaultSelection<Prisma.$sprintsPayload>
/**
 * Model suppliers
 * 
 */
export type suppliers = $Result.DefaultSelection<Prisma.$suppliersPayload>
/**
 * Model task_assignees
 * 
 */
export type task_assignees = $Result.DefaultSelection<Prisma.$task_assigneesPayload>
/**
 * Model task_label_links
 * 
 */
export type task_label_links = $Result.DefaultSelection<Prisma.$task_label_linksPayload>
/**
 * Model task_labels
 * 
 */
export type task_labels = $Result.DefaultSelection<Prisma.$task_labelsPayload>
/**
 * Model tasks
 * 
 */
export type tasks = $Result.DefaultSelection<Prisma.$tasksPayload>
/**
 * Model team_members
 * 
 */
export type team_members = $Result.DefaultSelection<Prisma.$team_membersPayload>
/**
 * Model teams
 * 
 */
export type teams = $Result.DefaultSelection<Prisma.$teamsPayload>
/**
 * Model ticket_comments
 * 
 */
export type ticket_comments = $Result.DefaultSelection<Prisma.$ticket_commentsPayload>
/**
 * Model ticket_history
 * 
 */
export type ticket_history = $Result.DefaultSelection<Prisma.$ticket_historyPayload>
/**
 * Model ticket_workflow
 * 
 */
export type ticket_workflow = $Result.DefaultSelection<Prisma.$ticket_workflowPayload>
/**
 * Model tickets
 * 
 */
export type tickets = $Result.DefaultSelection<Prisma.$ticketsPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model workflow_steps
 * 
 */
export type workflow_steps = $Result.DefaultSelection<Prisma.$workflow_stepsPayload>
/**
 * Model workflows
 * 
 */
export type workflows = $Result.DefaultSelection<Prisma.$workflowsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const hr_records_type: {
  attendance: 'attendance',
  vacation: 'vacation',
  evaluation: 'evaluation'
};

export type hr_records_type = (typeof hr_records_type)[keyof typeof hr_records_type]


export const resources_type: {
  person: 'person',
  equipment: 'equipment',
  machine: 'machine',
  other: 'other'
};

export type resources_type = (typeof resources_type)[keyof typeof resources_type]


export const channels_type: {
  public: 'public',
  private: 'private',
  project: 'project'
};

export type channels_type = (typeof channels_type)[keyof typeof channels_type]


export const leads_status: {
  new: 'new',
  contacted: 'contacted',
  qualified: 'qualified',
  lost: 'lost',
  won: 'won'
};

export type leads_status = (typeof leads_status)[keyof typeof leads_status]


export const team_members_role: {
  owner: 'owner',
  admin: 'admin',
  member: 'member'
};

export type team_members_role = (typeof team_members_role)[keyof typeof team_members_role]


export const documents_type: {
  doc: 'doc',
  wiki: 'wiki',
  policy: 'policy',
  manual: 'manual'
};

export type documents_type = (typeof documents_type)[keyof typeof documents_type]


export const projects_status: {
  active: 'active',
  archived: 'archived',
  completed: 'completed'
};

export type projects_status = (typeof projects_status)[keyof typeof projects_status]


export const reports_type: {
  performance: 'performance',
  kpi: 'kpi',
  custom: 'custom'
};

export type reports_type = (typeof reports_type)[keyof typeof reports_type]


export const tickets_type: {
  bug: 'bug',
  feature: 'feature',
  support: 'support',
  other: 'other'
};

export type tickets_type = (typeof tickets_type)[keyof typeof tickets_type]


export const assets_status: {
  active: 'active',
  maintenance: 'maintenance',
  retired: 'retired'
};

export type assets_status = (typeof assets_status)[keyof typeof assets_status]


export const resources_availability: {
  available: 'available',
  busy: 'busy',
  vacation: 'vacation',
  inactive: 'inactive'
};

export type resources_availability = (typeof resources_availability)[keyof typeof resources_availability]


export const tasks_status: {
  todo: 'todo',
  in_progress: 'in_progress',
  done: 'done',
  blocked: 'blocked'
};

export type tasks_status = (typeof tasks_status)[keyof typeof tasks_status]


export const users_role: {
  admin: 'admin',
  manager: 'manager',
  user: 'user',
  guest: 'guest'
};

export type users_role = (typeof users_role)[keyof typeof users_role]


export const events_type: {
  milestone: 'milestone',
  meeting: 'meeting',
  holiday: 'holiday',
  other: 'other'
};

export type events_type = (typeof events_type)[keyof typeof events_type]


export const sprints_status: {
  planned: 'planned',
  active: 'active',
  completed: 'completed',
  retrospective: 'retrospective'
};

export type sprints_status = (typeof sprints_status)[keyof typeof sprints_status]


export const tasks_priority: {
  low: 'low',
  medium: 'medium',
  high: 'high',
  urgent: 'urgent'
};

export type tasks_priority = (typeof tasks_priority)[keyof typeof tasks_priority]


export const contracts_status: {
  active: 'active',
  expired: 'expired',
  cancelled: 'cancelled'
};

export type contracts_status = (typeof contracts_status)[keyof typeof contracts_status]


export const tickets_status: {
  open: 'open',
  in_progress: 'in_progress',
  resolved: 'resolved',
  closed: 'closed',
  escalated: 'escalated'
};

export type tickets_status = (typeof tickets_status)[keyof typeof tickets_status]


export const tickets_priority: {
  low: 'low',
  medium: 'medium',
  high: 'high',
  urgent: 'urgent'
};

export type tickets_priority = (typeof tickets_priority)[keyof typeof tickets_priority]

}

export type hr_records_type = $Enums.hr_records_type

export const hr_records_type: typeof $Enums.hr_records_type

export type resources_type = $Enums.resources_type

export const resources_type: typeof $Enums.resources_type

export type channels_type = $Enums.channels_type

export const channels_type: typeof $Enums.channels_type

export type leads_status = $Enums.leads_status

export const leads_status: typeof $Enums.leads_status

export type team_members_role = $Enums.team_members_role

export const team_members_role: typeof $Enums.team_members_role

export type documents_type = $Enums.documents_type

export const documents_type: typeof $Enums.documents_type

export type projects_status = $Enums.projects_status

export const projects_status: typeof $Enums.projects_status

export type reports_type = $Enums.reports_type

export const reports_type: typeof $Enums.reports_type

export type tickets_type = $Enums.tickets_type

export const tickets_type: typeof $Enums.tickets_type

export type assets_status = $Enums.assets_status

export const assets_status: typeof $Enums.assets_status

export type resources_availability = $Enums.resources_availability

export const resources_availability: typeof $Enums.resources_availability

export type tasks_status = $Enums.tasks_status

export const tasks_status: typeof $Enums.tasks_status

export type users_role = $Enums.users_role

export const users_role: typeof $Enums.users_role

export type events_type = $Enums.events_type

export const events_type: typeof $Enums.events_type

export type sprints_status = $Enums.sprints_status

export const sprints_status: typeof $Enums.sprints_status

export type tasks_priority = $Enums.tasks_priority

export const tasks_priority: typeof $Enums.tasks_priority

export type contracts_status = $Enums.contracts_status

export const contracts_status: typeof $Enums.contracts_status

export type tickets_status = $Enums.tickets_status

export const tickets_status: typeof $Enums.tickets_status

export type tickets_priority = $Enums.tickets_priority

export const tickets_priority: typeof $Enums.tickets_priority

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Assets
 * const assets = await prisma.assets.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Assets
   * const assets = await prisma.assets.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.assets`: Exposes CRUD operations for the **assets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assets
    * const assets = await prisma.assets.findMany()
    * ```
    */
  get assets(): Prisma.assetsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.budgets`: Exposes CRUD operations for the **budgets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Budgets
    * const budgets = await prisma.budgets.findMany()
    * ```
    */
  get budgets(): Prisma.budgetsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.channel_members`: Exposes CRUD operations for the **channel_members** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Channel_members
    * const channel_members = await prisma.channel_members.findMany()
    * ```
    */
  get channel_members(): Prisma.channel_membersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.channels`: Exposes CRUD operations for the **channels** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Channels
    * const channels = await prisma.channels.findMany()
    * ```
    */
  get channels(): Prisma.channelsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clients`: Exposes CRUD operations for the **clients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.clients.findMany()
    * ```
    */
  get clients(): Prisma.clientsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contracts`: Exposes CRUD operations for the **contracts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contracts
    * const contracts = await prisma.contracts.findMany()
    * ```
    */
  get contracts(): Prisma.contractsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.costs`: Exposes CRUD operations for the **costs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Costs
    * const costs = await prisma.costs.findMany()
    * ```
    */
  get costs(): Prisma.costsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documents`: Exposes CRUD operations for the **documents** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.documents.findMany()
    * ```
    */
  get documents(): Prisma.documentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.events`: Exposes CRUD operations for the **events** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.events.findMany()
    * ```
    */
  get events(): Prisma.eventsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hr_records`: Exposes CRUD operations for the **hr_records** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hr_records
    * const hr_records = await prisma.hr_records.findMany()
    * ```
    */
  get hr_records(): Prisma.hr_recordsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leads`: Exposes CRUD operations for the **leads** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leads
    * const leads = await prisma.leads.findMany()
    * ```
    */
  get leads(): Prisma.leadsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.messages`: Exposes CRUD operations for the **messages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.messages.findMany()
    * ```
    */
  get messages(): Prisma.messagesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.permissions`: Exposes CRUD operations for the **permissions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permissions.findMany()
    * ```
    */
  get permissions(): Prisma.permissionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.project_resources`: Exposes CRUD operations for the **project_resources** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Project_resources
    * const project_resources = await prisma.project_resources.findMany()
    * ```
    */
  get project_resources(): Prisma.project_resourcesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.projects`: Exposes CRUD operations for the **projects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.projects.findMany()
    * ```
    */
  get projects(): Prisma.projectsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reports`: Exposes CRUD operations for the **reports** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.reports.findMany()
    * ```
    */
  get reports(): Prisma.reportsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resources`: Exposes CRUD operations for the **resources** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Resources
    * const resources = await prisma.resources.findMany()
    * ```
    */
  get resources(): Prisma.resourcesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sprint_tasks`: Exposes CRUD operations for the **sprint_tasks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sprint_tasks
    * const sprint_tasks = await prisma.sprint_tasks.findMany()
    * ```
    */
  get sprint_tasks(): Prisma.sprint_tasksDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sprints`: Exposes CRUD operations for the **sprints** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sprints
    * const sprints = await prisma.sprints.findMany()
    * ```
    */
  get sprints(): Prisma.sprintsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.suppliers`: Exposes CRUD operations for the **suppliers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Suppliers
    * const suppliers = await prisma.suppliers.findMany()
    * ```
    */
  get suppliers(): Prisma.suppliersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task_assignees`: Exposes CRUD operations for the **task_assignees** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Task_assignees
    * const task_assignees = await prisma.task_assignees.findMany()
    * ```
    */
  get task_assignees(): Prisma.task_assigneesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task_label_links`: Exposes CRUD operations for the **task_label_links** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Task_label_links
    * const task_label_links = await prisma.task_label_links.findMany()
    * ```
    */
  get task_label_links(): Prisma.task_label_linksDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task_labels`: Exposes CRUD operations for the **task_labels** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Task_labels
    * const task_labels = await prisma.task_labels.findMany()
    * ```
    */
  get task_labels(): Prisma.task_labelsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tasks`: Exposes CRUD operations for the **tasks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.tasks.findMany()
    * ```
    */
  get tasks(): Prisma.tasksDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.team_members`: Exposes CRUD operations for the **team_members** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Team_members
    * const team_members = await prisma.team_members.findMany()
    * ```
    */
  get team_members(): Prisma.team_membersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teams`: Exposes CRUD operations for the **teams** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.teams.findMany()
    * ```
    */
  get teams(): Prisma.teamsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ticket_comments`: Exposes CRUD operations for the **ticket_comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ticket_comments
    * const ticket_comments = await prisma.ticket_comments.findMany()
    * ```
    */
  get ticket_comments(): Prisma.ticket_commentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ticket_history`: Exposes CRUD operations for the **ticket_history** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ticket_histories
    * const ticket_histories = await prisma.ticket_history.findMany()
    * ```
    */
  get ticket_history(): Prisma.ticket_historyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ticket_workflow`: Exposes CRUD operations for the **ticket_workflow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ticket_workflows
    * const ticket_workflows = await prisma.ticket_workflow.findMany()
    * ```
    */
  get ticket_workflow(): Prisma.ticket_workflowDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tickets`: Exposes CRUD operations for the **tickets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.tickets.findMany()
    * ```
    */
  get tickets(): Prisma.ticketsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workflow_steps`: Exposes CRUD operations for the **workflow_steps** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workflow_steps
    * const workflow_steps = await prisma.workflow_steps.findMany()
    * ```
    */
  get workflow_steps(): Prisma.workflow_stepsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workflows`: Exposes CRUD operations for the **workflows** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workflows
    * const workflows = await prisma.workflows.findMany()
    * ```
    */
  get workflows(): Prisma.workflowsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    assets: 'assets',
    budgets: 'budgets',
    channel_members: 'channel_members',
    channels: 'channels',
    clients: 'clients',
    contracts: 'contracts',
    costs: 'costs',
    documents: 'documents',
    events: 'events',
    hr_records: 'hr_records',
    leads: 'leads',
    messages: 'messages',
    permissions: 'permissions',
    project_resources: 'project_resources',
    projects: 'projects',
    reports: 'reports',
    resources: 'resources',
    sprint_tasks: 'sprint_tasks',
    sprints: 'sprints',
    suppliers: 'suppliers',
    task_assignees: 'task_assignees',
    task_label_links: 'task_label_links',
    task_labels: 'task_labels',
    tasks: 'tasks',
    team_members: 'team_members',
    teams: 'teams',
    ticket_comments: 'ticket_comments',
    ticket_history: 'ticket_history',
    ticket_workflow: 'ticket_workflow',
    tickets: 'tickets',
    users: 'users',
    workflow_steps: 'workflow_steps',
    workflows: 'workflows'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "assets" | "budgets" | "channel_members" | "channels" | "clients" | "contracts" | "costs" | "documents" | "events" | "hr_records" | "leads" | "messages" | "permissions" | "project_resources" | "projects" | "reports" | "resources" | "sprint_tasks" | "sprints" | "suppliers" | "task_assignees" | "task_label_links" | "task_labels" | "tasks" | "team_members" | "teams" | "ticket_comments" | "ticket_history" | "ticket_workflow" | "tickets" | "users" | "workflow_steps" | "workflows"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      assets: {
        payload: Prisma.$assetsPayload<ExtArgs>
        fields: Prisma.assetsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.assetsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assetsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.assetsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assetsPayload>
          }
          findFirst: {
            args: Prisma.assetsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assetsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.assetsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assetsPayload>
          }
          findMany: {
            args: Prisma.assetsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assetsPayload>[]
          }
          create: {
            args: Prisma.assetsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assetsPayload>
          }
          createMany: {
            args: Prisma.assetsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.assetsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assetsPayload>
          }
          update: {
            args: Prisma.assetsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assetsPayload>
          }
          deleteMany: {
            args: Prisma.assetsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.assetsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.assetsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assetsPayload>
          }
          aggregate: {
            args: Prisma.AssetsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssets>
          }
          groupBy: {
            args: Prisma.assetsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetsGroupByOutputType>[]
          }
          count: {
            args: Prisma.assetsCountArgs<ExtArgs>
            result: $Utils.Optional<AssetsCountAggregateOutputType> | number
          }
        }
      }
      budgets: {
        payload: Prisma.$budgetsPayload<ExtArgs>
        fields: Prisma.budgetsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.budgetsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$budgetsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.budgetsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$budgetsPayload>
          }
          findFirst: {
            args: Prisma.budgetsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$budgetsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.budgetsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$budgetsPayload>
          }
          findMany: {
            args: Prisma.budgetsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$budgetsPayload>[]
          }
          create: {
            args: Prisma.budgetsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$budgetsPayload>
          }
          createMany: {
            args: Prisma.budgetsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.budgetsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$budgetsPayload>
          }
          update: {
            args: Prisma.budgetsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$budgetsPayload>
          }
          deleteMany: {
            args: Prisma.budgetsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.budgetsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.budgetsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$budgetsPayload>
          }
          aggregate: {
            args: Prisma.BudgetsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBudgets>
          }
          groupBy: {
            args: Prisma.budgetsGroupByArgs<ExtArgs>
            result: $Utils.Optional<BudgetsGroupByOutputType>[]
          }
          count: {
            args: Prisma.budgetsCountArgs<ExtArgs>
            result: $Utils.Optional<BudgetsCountAggregateOutputType> | number
          }
        }
      }
      channel_members: {
        payload: Prisma.$channel_membersPayload<ExtArgs>
        fields: Prisma.channel_membersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.channel_membersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channel_membersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.channel_membersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channel_membersPayload>
          }
          findFirst: {
            args: Prisma.channel_membersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channel_membersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.channel_membersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channel_membersPayload>
          }
          findMany: {
            args: Prisma.channel_membersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channel_membersPayload>[]
          }
          create: {
            args: Prisma.channel_membersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channel_membersPayload>
          }
          createMany: {
            args: Prisma.channel_membersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.channel_membersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channel_membersPayload>
          }
          update: {
            args: Prisma.channel_membersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channel_membersPayload>
          }
          deleteMany: {
            args: Prisma.channel_membersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.channel_membersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.channel_membersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channel_membersPayload>
          }
          aggregate: {
            args: Prisma.Channel_membersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChannel_members>
          }
          groupBy: {
            args: Prisma.channel_membersGroupByArgs<ExtArgs>
            result: $Utils.Optional<Channel_membersGroupByOutputType>[]
          }
          count: {
            args: Prisma.channel_membersCountArgs<ExtArgs>
            result: $Utils.Optional<Channel_membersCountAggregateOutputType> | number
          }
        }
      }
      channels: {
        payload: Prisma.$channelsPayload<ExtArgs>
        fields: Prisma.channelsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.channelsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channelsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.channelsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channelsPayload>
          }
          findFirst: {
            args: Prisma.channelsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channelsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.channelsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channelsPayload>
          }
          findMany: {
            args: Prisma.channelsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channelsPayload>[]
          }
          create: {
            args: Prisma.channelsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channelsPayload>
          }
          createMany: {
            args: Prisma.channelsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.channelsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channelsPayload>
          }
          update: {
            args: Prisma.channelsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channelsPayload>
          }
          deleteMany: {
            args: Prisma.channelsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.channelsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.channelsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$channelsPayload>
          }
          aggregate: {
            args: Prisma.ChannelsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChannels>
          }
          groupBy: {
            args: Prisma.channelsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChannelsGroupByOutputType>[]
          }
          count: {
            args: Prisma.channelsCountArgs<ExtArgs>
            result: $Utils.Optional<ChannelsCountAggregateOutputType> | number
          }
        }
      }
      clients: {
        payload: Prisma.$clientsPayload<ExtArgs>
        fields: Prisma.clientsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.clientsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.clientsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload>
          }
          findFirst: {
            args: Prisma.clientsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.clientsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload>
          }
          findMany: {
            args: Prisma.clientsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload>[]
          }
          create: {
            args: Prisma.clientsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload>
          }
          createMany: {
            args: Prisma.clientsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.clientsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload>
          }
          update: {
            args: Prisma.clientsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload>
          }
          deleteMany: {
            args: Prisma.clientsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.clientsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.clientsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload>
          }
          aggregate: {
            args: Prisma.ClientsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClients>
          }
          groupBy: {
            args: Prisma.clientsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientsGroupByOutputType>[]
          }
          count: {
            args: Prisma.clientsCountArgs<ExtArgs>
            result: $Utils.Optional<ClientsCountAggregateOutputType> | number
          }
        }
      }
      contracts: {
        payload: Prisma.$contractsPayload<ExtArgs>
        fields: Prisma.contractsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.contractsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contractsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.contractsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contractsPayload>
          }
          findFirst: {
            args: Prisma.contractsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contractsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.contractsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contractsPayload>
          }
          findMany: {
            args: Prisma.contractsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contractsPayload>[]
          }
          create: {
            args: Prisma.contractsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contractsPayload>
          }
          createMany: {
            args: Prisma.contractsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.contractsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contractsPayload>
          }
          update: {
            args: Prisma.contractsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contractsPayload>
          }
          deleteMany: {
            args: Prisma.contractsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.contractsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.contractsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contractsPayload>
          }
          aggregate: {
            args: Prisma.ContractsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContracts>
          }
          groupBy: {
            args: Prisma.contractsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractsGroupByOutputType>[]
          }
          count: {
            args: Prisma.contractsCountArgs<ExtArgs>
            result: $Utils.Optional<ContractsCountAggregateOutputType> | number
          }
        }
      }
      costs: {
        payload: Prisma.$costsPayload<ExtArgs>
        fields: Prisma.costsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.costsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$costsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.costsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$costsPayload>
          }
          findFirst: {
            args: Prisma.costsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$costsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.costsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$costsPayload>
          }
          findMany: {
            args: Prisma.costsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$costsPayload>[]
          }
          create: {
            args: Prisma.costsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$costsPayload>
          }
          createMany: {
            args: Prisma.costsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.costsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$costsPayload>
          }
          update: {
            args: Prisma.costsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$costsPayload>
          }
          deleteMany: {
            args: Prisma.costsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.costsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.costsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$costsPayload>
          }
          aggregate: {
            args: Prisma.CostsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCosts>
          }
          groupBy: {
            args: Prisma.costsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CostsGroupByOutputType>[]
          }
          count: {
            args: Prisma.costsCountArgs<ExtArgs>
            result: $Utils.Optional<CostsCountAggregateOutputType> | number
          }
        }
      }
      documents: {
        payload: Prisma.$documentsPayload<ExtArgs>
        fields: Prisma.documentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.documentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.documentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentsPayload>
          }
          findFirst: {
            args: Prisma.documentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.documentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentsPayload>
          }
          findMany: {
            args: Prisma.documentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentsPayload>[]
          }
          create: {
            args: Prisma.documentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentsPayload>
          }
          createMany: {
            args: Prisma.documentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.documentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentsPayload>
          }
          update: {
            args: Prisma.documentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentsPayload>
          }
          deleteMany: {
            args: Prisma.documentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.documentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.documentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentsPayload>
          }
          aggregate: {
            args: Prisma.DocumentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocuments>
          }
          groupBy: {
            args: Prisma.documentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.documentsCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentsCountAggregateOutputType> | number
          }
        }
      }
      events: {
        payload: Prisma.$eventsPayload<ExtArgs>
        fields: Prisma.eventsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.eventsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.eventsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventsPayload>
          }
          findFirst: {
            args: Prisma.eventsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.eventsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventsPayload>
          }
          findMany: {
            args: Prisma.eventsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventsPayload>[]
          }
          create: {
            args: Prisma.eventsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventsPayload>
          }
          createMany: {
            args: Prisma.eventsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.eventsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventsPayload>
          }
          update: {
            args: Prisma.eventsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventsPayload>
          }
          deleteMany: {
            args: Prisma.eventsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.eventsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.eventsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventsPayload>
          }
          aggregate: {
            args: Prisma.EventsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvents>
          }
          groupBy: {
            args: Prisma.eventsGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventsGroupByOutputType>[]
          }
          count: {
            args: Prisma.eventsCountArgs<ExtArgs>
            result: $Utils.Optional<EventsCountAggregateOutputType> | number
          }
        }
      }
      hr_records: {
        payload: Prisma.$hr_recordsPayload<ExtArgs>
        fields: Prisma.hr_recordsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.hr_recordsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hr_recordsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.hr_recordsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hr_recordsPayload>
          }
          findFirst: {
            args: Prisma.hr_recordsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hr_recordsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.hr_recordsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hr_recordsPayload>
          }
          findMany: {
            args: Prisma.hr_recordsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hr_recordsPayload>[]
          }
          create: {
            args: Prisma.hr_recordsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hr_recordsPayload>
          }
          createMany: {
            args: Prisma.hr_recordsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.hr_recordsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hr_recordsPayload>
          }
          update: {
            args: Prisma.hr_recordsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hr_recordsPayload>
          }
          deleteMany: {
            args: Prisma.hr_recordsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.hr_recordsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.hr_recordsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hr_recordsPayload>
          }
          aggregate: {
            args: Prisma.Hr_recordsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHr_records>
          }
          groupBy: {
            args: Prisma.hr_recordsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Hr_recordsGroupByOutputType>[]
          }
          count: {
            args: Prisma.hr_recordsCountArgs<ExtArgs>
            result: $Utils.Optional<Hr_recordsCountAggregateOutputType> | number
          }
        }
      }
      leads: {
        payload: Prisma.$leadsPayload<ExtArgs>
        fields: Prisma.leadsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.leadsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leadsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.leadsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leadsPayload>
          }
          findFirst: {
            args: Prisma.leadsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leadsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.leadsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leadsPayload>
          }
          findMany: {
            args: Prisma.leadsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leadsPayload>[]
          }
          create: {
            args: Prisma.leadsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leadsPayload>
          }
          createMany: {
            args: Prisma.leadsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.leadsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leadsPayload>
          }
          update: {
            args: Prisma.leadsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leadsPayload>
          }
          deleteMany: {
            args: Prisma.leadsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.leadsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.leadsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leadsPayload>
          }
          aggregate: {
            args: Prisma.LeadsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeads>
          }
          groupBy: {
            args: Prisma.leadsGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeadsGroupByOutputType>[]
          }
          count: {
            args: Prisma.leadsCountArgs<ExtArgs>
            result: $Utils.Optional<LeadsCountAggregateOutputType> | number
          }
        }
      }
      messages: {
        payload: Prisma.$messagesPayload<ExtArgs>
        fields: Prisma.messagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.messagesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.messagesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagesPayload>
          }
          findFirst: {
            args: Prisma.messagesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.messagesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagesPayload>
          }
          findMany: {
            args: Prisma.messagesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagesPayload>[]
          }
          create: {
            args: Prisma.messagesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagesPayload>
          }
          createMany: {
            args: Prisma.messagesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.messagesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagesPayload>
          }
          update: {
            args: Prisma.messagesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagesPayload>
          }
          deleteMany: {
            args: Prisma.messagesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.messagesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.messagesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagesPayload>
          }
          aggregate: {
            args: Prisma.MessagesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessages>
          }
          groupBy: {
            args: Prisma.messagesGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.messagesCountArgs<ExtArgs>
            result: $Utils.Optional<MessagesCountAggregateOutputType> | number
          }
        }
      }
      permissions: {
        payload: Prisma.$permissionsPayload<ExtArgs>
        fields: Prisma.permissionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.permissionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.permissionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          findFirst: {
            args: Prisma.permissionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.permissionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          findMany: {
            args: Prisma.permissionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>[]
          }
          create: {
            args: Prisma.permissionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          createMany: {
            args: Prisma.permissionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.permissionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          update: {
            args: Prisma.permissionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          deleteMany: {
            args: Prisma.permissionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.permissionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.permissionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          aggregate: {
            args: Prisma.PermissionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermissions>
          }
          groupBy: {
            args: Prisma.permissionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.permissionsCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionsCountAggregateOutputType> | number
          }
        }
      }
      project_resources: {
        payload: Prisma.$project_resourcesPayload<ExtArgs>
        fields: Prisma.project_resourcesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.project_resourcesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$project_resourcesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.project_resourcesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$project_resourcesPayload>
          }
          findFirst: {
            args: Prisma.project_resourcesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$project_resourcesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.project_resourcesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$project_resourcesPayload>
          }
          findMany: {
            args: Prisma.project_resourcesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$project_resourcesPayload>[]
          }
          create: {
            args: Prisma.project_resourcesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$project_resourcesPayload>
          }
          createMany: {
            args: Prisma.project_resourcesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.project_resourcesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$project_resourcesPayload>
          }
          update: {
            args: Prisma.project_resourcesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$project_resourcesPayload>
          }
          deleteMany: {
            args: Prisma.project_resourcesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.project_resourcesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.project_resourcesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$project_resourcesPayload>
          }
          aggregate: {
            args: Prisma.Project_resourcesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject_resources>
          }
          groupBy: {
            args: Prisma.project_resourcesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Project_resourcesGroupByOutputType>[]
          }
          count: {
            args: Prisma.project_resourcesCountArgs<ExtArgs>
            result: $Utils.Optional<Project_resourcesCountAggregateOutputType> | number
          }
        }
      }
      projects: {
        payload: Prisma.$projectsPayload<ExtArgs>
        fields: Prisma.projectsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.projectsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.projectsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectsPayload>
          }
          findFirst: {
            args: Prisma.projectsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.projectsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectsPayload>
          }
          findMany: {
            args: Prisma.projectsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectsPayload>[]
          }
          create: {
            args: Prisma.projectsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectsPayload>
          }
          createMany: {
            args: Prisma.projectsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.projectsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectsPayload>
          }
          update: {
            args: Prisma.projectsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectsPayload>
          }
          deleteMany: {
            args: Prisma.projectsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.projectsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.projectsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectsPayload>
          }
          aggregate: {
            args: Prisma.ProjectsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjects>
          }
          groupBy: {
            args: Prisma.projectsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectsGroupByOutputType>[]
          }
          count: {
            args: Prisma.projectsCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectsCountAggregateOutputType> | number
          }
        }
      }
      reports: {
        payload: Prisma.$reportsPayload<ExtArgs>
        fields: Prisma.reportsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reportsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reportsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload>
          }
          findFirst: {
            args: Prisma.reportsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reportsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload>
          }
          findMany: {
            args: Prisma.reportsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload>[]
          }
          create: {
            args: Prisma.reportsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload>
          }
          createMany: {
            args: Prisma.reportsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.reportsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload>
          }
          update: {
            args: Prisma.reportsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload>
          }
          deleteMany: {
            args: Prisma.reportsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.reportsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.reportsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload>
          }
          aggregate: {
            args: Prisma.ReportsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReports>
          }
          groupBy: {
            args: Prisma.reportsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportsGroupByOutputType>[]
          }
          count: {
            args: Prisma.reportsCountArgs<ExtArgs>
            result: $Utils.Optional<ReportsCountAggregateOutputType> | number
          }
        }
      }
      resources: {
        payload: Prisma.$resourcesPayload<ExtArgs>
        fields: Prisma.resourcesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.resourcesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$resourcesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.resourcesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$resourcesPayload>
          }
          findFirst: {
            args: Prisma.resourcesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$resourcesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.resourcesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$resourcesPayload>
          }
          findMany: {
            args: Prisma.resourcesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$resourcesPayload>[]
          }
          create: {
            args: Prisma.resourcesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$resourcesPayload>
          }
          createMany: {
            args: Prisma.resourcesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.resourcesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$resourcesPayload>
          }
          update: {
            args: Prisma.resourcesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$resourcesPayload>
          }
          deleteMany: {
            args: Prisma.resourcesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.resourcesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.resourcesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$resourcesPayload>
          }
          aggregate: {
            args: Prisma.ResourcesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResources>
          }
          groupBy: {
            args: Prisma.resourcesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResourcesGroupByOutputType>[]
          }
          count: {
            args: Prisma.resourcesCountArgs<ExtArgs>
            result: $Utils.Optional<ResourcesCountAggregateOutputType> | number
          }
        }
      }
      sprint_tasks: {
        payload: Prisma.$sprint_tasksPayload<ExtArgs>
        fields: Prisma.sprint_tasksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sprint_tasksFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprint_tasksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sprint_tasksFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprint_tasksPayload>
          }
          findFirst: {
            args: Prisma.sprint_tasksFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprint_tasksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sprint_tasksFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprint_tasksPayload>
          }
          findMany: {
            args: Prisma.sprint_tasksFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprint_tasksPayload>[]
          }
          create: {
            args: Prisma.sprint_tasksCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprint_tasksPayload>
          }
          createMany: {
            args: Prisma.sprint_tasksCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.sprint_tasksDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprint_tasksPayload>
          }
          update: {
            args: Prisma.sprint_tasksUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprint_tasksPayload>
          }
          deleteMany: {
            args: Prisma.sprint_tasksDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.sprint_tasksUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.sprint_tasksUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprint_tasksPayload>
          }
          aggregate: {
            args: Prisma.Sprint_tasksAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSprint_tasks>
          }
          groupBy: {
            args: Prisma.sprint_tasksGroupByArgs<ExtArgs>
            result: $Utils.Optional<Sprint_tasksGroupByOutputType>[]
          }
          count: {
            args: Prisma.sprint_tasksCountArgs<ExtArgs>
            result: $Utils.Optional<Sprint_tasksCountAggregateOutputType> | number
          }
        }
      }
      sprints: {
        payload: Prisma.$sprintsPayload<ExtArgs>
        fields: Prisma.sprintsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sprintsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprintsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sprintsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprintsPayload>
          }
          findFirst: {
            args: Prisma.sprintsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprintsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sprintsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprintsPayload>
          }
          findMany: {
            args: Prisma.sprintsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprintsPayload>[]
          }
          create: {
            args: Prisma.sprintsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprintsPayload>
          }
          createMany: {
            args: Prisma.sprintsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.sprintsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprintsPayload>
          }
          update: {
            args: Prisma.sprintsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprintsPayload>
          }
          deleteMany: {
            args: Prisma.sprintsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.sprintsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.sprintsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sprintsPayload>
          }
          aggregate: {
            args: Prisma.SprintsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSprints>
          }
          groupBy: {
            args: Prisma.sprintsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SprintsGroupByOutputType>[]
          }
          count: {
            args: Prisma.sprintsCountArgs<ExtArgs>
            result: $Utils.Optional<SprintsCountAggregateOutputType> | number
          }
        }
      }
      suppliers: {
        payload: Prisma.$suppliersPayload<ExtArgs>
        fields: Prisma.suppliersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.suppliersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$suppliersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.suppliersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$suppliersPayload>
          }
          findFirst: {
            args: Prisma.suppliersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$suppliersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.suppliersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$suppliersPayload>
          }
          findMany: {
            args: Prisma.suppliersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$suppliersPayload>[]
          }
          create: {
            args: Prisma.suppliersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$suppliersPayload>
          }
          createMany: {
            args: Prisma.suppliersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.suppliersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$suppliersPayload>
          }
          update: {
            args: Prisma.suppliersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$suppliersPayload>
          }
          deleteMany: {
            args: Prisma.suppliersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.suppliersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.suppliersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$suppliersPayload>
          }
          aggregate: {
            args: Prisma.SuppliersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSuppliers>
          }
          groupBy: {
            args: Prisma.suppliersGroupByArgs<ExtArgs>
            result: $Utils.Optional<SuppliersGroupByOutputType>[]
          }
          count: {
            args: Prisma.suppliersCountArgs<ExtArgs>
            result: $Utils.Optional<SuppliersCountAggregateOutputType> | number
          }
        }
      }
      task_assignees: {
        payload: Prisma.$task_assigneesPayload<ExtArgs>
        fields: Prisma.task_assigneesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.task_assigneesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_assigneesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.task_assigneesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_assigneesPayload>
          }
          findFirst: {
            args: Prisma.task_assigneesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_assigneesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.task_assigneesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_assigneesPayload>
          }
          findMany: {
            args: Prisma.task_assigneesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_assigneesPayload>[]
          }
          create: {
            args: Prisma.task_assigneesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_assigneesPayload>
          }
          createMany: {
            args: Prisma.task_assigneesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.task_assigneesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_assigneesPayload>
          }
          update: {
            args: Prisma.task_assigneesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_assigneesPayload>
          }
          deleteMany: {
            args: Prisma.task_assigneesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.task_assigneesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.task_assigneesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_assigneesPayload>
          }
          aggregate: {
            args: Prisma.Task_assigneesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask_assignees>
          }
          groupBy: {
            args: Prisma.task_assigneesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Task_assigneesGroupByOutputType>[]
          }
          count: {
            args: Prisma.task_assigneesCountArgs<ExtArgs>
            result: $Utils.Optional<Task_assigneesCountAggregateOutputType> | number
          }
        }
      }
      task_label_links: {
        payload: Prisma.$task_label_linksPayload<ExtArgs>
        fields: Prisma.task_label_linksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.task_label_linksFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_label_linksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.task_label_linksFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_label_linksPayload>
          }
          findFirst: {
            args: Prisma.task_label_linksFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_label_linksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.task_label_linksFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_label_linksPayload>
          }
          findMany: {
            args: Prisma.task_label_linksFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_label_linksPayload>[]
          }
          create: {
            args: Prisma.task_label_linksCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_label_linksPayload>
          }
          createMany: {
            args: Prisma.task_label_linksCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.task_label_linksDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_label_linksPayload>
          }
          update: {
            args: Prisma.task_label_linksUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_label_linksPayload>
          }
          deleteMany: {
            args: Prisma.task_label_linksDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.task_label_linksUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.task_label_linksUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_label_linksPayload>
          }
          aggregate: {
            args: Prisma.Task_label_linksAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask_label_links>
          }
          groupBy: {
            args: Prisma.task_label_linksGroupByArgs<ExtArgs>
            result: $Utils.Optional<Task_label_linksGroupByOutputType>[]
          }
          count: {
            args: Prisma.task_label_linksCountArgs<ExtArgs>
            result: $Utils.Optional<Task_label_linksCountAggregateOutputType> | number
          }
        }
      }
      task_labels: {
        payload: Prisma.$task_labelsPayload<ExtArgs>
        fields: Prisma.task_labelsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.task_labelsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_labelsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.task_labelsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_labelsPayload>
          }
          findFirst: {
            args: Prisma.task_labelsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_labelsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.task_labelsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_labelsPayload>
          }
          findMany: {
            args: Prisma.task_labelsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_labelsPayload>[]
          }
          create: {
            args: Prisma.task_labelsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_labelsPayload>
          }
          createMany: {
            args: Prisma.task_labelsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.task_labelsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_labelsPayload>
          }
          update: {
            args: Prisma.task_labelsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_labelsPayload>
          }
          deleteMany: {
            args: Prisma.task_labelsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.task_labelsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.task_labelsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$task_labelsPayload>
          }
          aggregate: {
            args: Prisma.Task_labelsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask_labels>
          }
          groupBy: {
            args: Prisma.task_labelsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Task_labelsGroupByOutputType>[]
          }
          count: {
            args: Prisma.task_labelsCountArgs<ExtArgs>
            result: $Utils.Optional<Task_labelsCountAggregateOutputType> | number
          }
        }
      }
      tasks: {
        payload: Prisma.$tasksPayload<ExtArgs>
        fields: Prisma.tasksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tasksFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tasksFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          findFirst: {
            args: Prisma.tasksFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tasksFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          findMany: {
            args: Prisma.tasksFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>[]
          }
          create: {
            args: Prisma.tasksCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          createMany: {
            args: Prisma.tasksCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tasksDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          update: {
            args: Prisma.tasksUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          deleteMany: {
            args: Prisma.tasksDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tasksUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tasksUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          aggregate: {
            args: Prisma.TasksAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTasks>
          }
          groupBy: {
            args: Prisma.tasksGroupByArgs<ExtArgs>
            result: $Utils.Optional<TasksGroupByOutputType>[]
          }
          count: {
            args: Prisma.tasksCountArgs<ExtArgs>
            result: $Utils.Optional<TasksCountAggregateOutputType> | number
          }
        }
      }
      team_members: {
        payload: Prisma.$team_membersPayload<ExtArgs>
        fields: Prisma.team_membersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.team_membersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$team_membersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.team_membersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$team_membersPayload>
          }
          findFirst: {
            args: Prisma.team_membersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$team_membersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.team_membersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$team_membersPayload>
          }
          findMany: {
            args: Prisma.team_membersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$team_membersPayload>[]
          }
          create: {
            args: Prisma.team_membersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$team_membersPayload>
          }
          createMany: {
            args: Prisma.team_membersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.team_membersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$team_membersPayload>
          }
          update: {
            args: Prisma.team_membersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$team_membersPayload>
          }
          deleteMany: {
            args: Prisma.team_membersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.team_membersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.team_membersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$team_membersPayload>
          }
          aggregate: {
            args: Prisma.Team_membersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam_members>
          }
          groupBy: {
            args: Prisma.team_membersGroupByArgs<ExtArgs>
            result: $Utils.Optional<Team_membersGroupByOutputType>[]
          }
          count: {
            args: Prisma.team_membersCountArgs<ExtArgs>
            result: $Utils.Optional<Team_membersCountAggregateOutputType> | number
          }
        }
      }
      teams: {
        payload: Prisma.$teamsPayload<ExtArgs>
        fields: Prisma.teamsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.teamsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.teamsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>
          }
          findFirst: {
            args: Prisma.teamsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.teamsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>
          }
          findMany: {
            args: Prisma.teamsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>[]
          }
          create: {
            args: Prisma.teamsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>
          }
          createMany: {
            args: Prisma.teamsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.teamsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>
          }
          update: {
            args: Prisma.teamsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>
          }
          deleteMany: {
            args: Prisma.teamsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.teamsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.teamsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>
          }
          aggregate: {
            args: Prisma.TeamsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeams>
          }
          groupBy: {
            args: Prisma.teamsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamsGroupByOutputType>[]
          }
          count: {
            args: Prisma.teamsCountArgs<ExtArgs>
            result: $Utils.Optional<TeamsCountAggregateOutputType> | number
          }
        }
      }
      ticket_comments: {
        payload: Prisma.$ticket_commentsPayload<ExtArgs>
        fields: Prisma.ticket_commentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ticket_commentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_commentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ticket_commentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_commentsPayload>
          }
          findFirst: {
            args: Prisma.ticket_commentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_commentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ticket_commentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_commentsPayload>
          }
          findMany: {
            args: Prisma.ticket_commentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_commentsPayload>[]
          }
          create: {
            args: Prisma.ticket_commentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_commentsPayload>
          }
          createMany: {
            args: Prisma.ticket_commentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ticket_commentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_commentsPayload>
          }
          update: {
            args: Prisma.ticket_commentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_commentsPayload>
          }
          deleteMany: {
            args: Prisma.ticket_commentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ticket_commentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ticket_commentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_commentsPayload>
          }
          aggregate: {
            args: Prisma.Ticket_commentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket_comments>
          }
          groupBy: {
            args: Prisma.ticket_commentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Ticket_commentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ticket_commentsCountArgs<ExtArgs>
            result: $Utils.Optional<Ticket_commentsCountAggregateOutputType> | number
          }
        }
      }
      ticket_history: {
        payload: Prisma.$ticket_historyPayload<ExtArgs>
        fields: Prisma.ticket_historyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ticket_historyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_historyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ticket_historyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_historyPayload>
          }
          findFirst: {
            args: Prisma.ticket_historyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_historyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ticket_historyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_historyPayload>
          }
          findMany: {
            args: Prisma.ticket_historyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_historyPayload>[]
          }
          create: {
            args: Prisma.ticket_historyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_historyPayload>
          }
          createMany: {
            args: Prisma.ticket_historyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ticket_historyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_historyPayload>
          }
          update: {
            args: Prisma.ticket_historyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_historyPayload>
          }
          deleteMany: {
            args: Prisma.ticket_historyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ticket_historyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ticket_historyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_historyPayload>
          }
          aggregate: {
            args: Prisma.Ticket_historyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket_history>
          }
          groupBy: {
            args: Prisma.ticket_historyGroupByArgs<ExtArgs>
            result: $Utils.Optional<Ticket_historyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ticket_historyCountArgs<ExtArgs>
            result: $Utils.Optional<Ticket_historyCountAggregateOutputType> | number
          }
        }
      }
      ticket_workflow: {
        payload: Prisma.$ticket_workflowPayload<ExtArgs>
        fields: Prisma.ticket_workflowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ticket_workflowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_workflowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ticket_workflowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_workflowPayload>
          }
          findFirst: {
            args: Prisma.ticket_workflowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_workflowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ticket_workflowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_workflowPayload>
          }
          findMany: {
            args: Prisma.ticket_workflowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_workflowPayload>[]
          }
          create: {
            args: Prisma.ticket_workflowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_workflowPayload>
          }
          createMany: {
            args: Prisma.ticket_workflowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ticket_workflowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_workflowPayload>
          }
          update: {
            args: Prisma.ticket_workflowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_workflowPayload>
          }
          deleteMany: {
            args: Prisma.ticket_workflowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ticket_workflowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ticket_workflowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_workflowPayload>
          }
          aggregate: {
            args: Prisma.Ticket_workflowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket_workflow>
          }
          groupBy: {
            args: Prisma.ticket_workflowGroupByArgs<ExtArgs>
            result: $Utils.Optional<Ticket_workflowGroupByOutputType>[]
          }
          count: {
            args: Prisma.ticket_workflowCountArgs<ExtArgs>
            result: $Utils.Optional<Ticket_workflowCountAggregateOutputType> | number
          }
        }
      }
      tickets: {
        payload: Prisma.$ticketsPayload<ExtArgs>
        fields: Prisma.ticketsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ticketsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ticketsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          findFirst: {
            args: Prisma.ticketsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ticketsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          findMany: {
            args: Prisma.ticketsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>[]
          }
          create: {
            args: Prisma.ticketsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          createMany: {
            args: Prisma.ticketsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ticketsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          update: {
            args: Prisma.ticketsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          deleteMany: {
            args: Prisma.ticketsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ticketsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ticketsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          aggregate: {
            args: Prisma.TicketsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTickets>
          }
          groupBy: {
            args: Prisma.ticketsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ticketsCountArgs<ExtArgs>
            result: $Utils.Optional<TicketsCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      workflow_steps: {
        payload: Prisma.$workflow_stepsPayload<ExtArgs>
        fields: Prisma.workflow_stepsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.workflow_stepsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflow_stepsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.workflow_stepsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflow_stepsPayload>
          }
          findFirst: {
            args: Prisma.workflow_stepsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflow_stepsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.workflow_stepsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflow_stepsPayload>
          }
          findMany: {
            args: Prisma.workflow_stepsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflow_stepsPayload>[]
          }
          create: {
            args: Prisma.workflow_stepsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflow_stepsPayload>
          }
          createMany: {
            args: Prisma.workflow_stepsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.workflow_stepsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflow_stepsPayload>
          }
          update: {
            args: Prisma.workflow_stepsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflow_stepsPayload>
          }
          deleteMany: {
            args: Prisma.workflow_stepsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.workflow_stepsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.workflow_stepsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflow_stepsPayload>
          }
          aggregate: {
            args: Prisma.Workflow_stepsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflow_steps>
          }
          groupBy: {
            args: Prisma.workflow_stepsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Workflow_stepsGroupByOutputType>[]
          }
          count: {
            args: Prisma.workflow_stepsCountArgs<ExtArgs>
            result: $Utils.Optional<Workflow_stepsCountAggregateOutputType> | number
          }
        }
      }
      workflows: {
        payload: Prisma.$workflowsPayload<ExtArgs>
        fields: Prisma.workflowsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.workflowsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflowsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.workflowsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflowsPayload>
          }
          findFirst: {
            args: Prisma.workflowsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflowsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.workflowsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflowsPayload>
          }
          findMany: {
            args: Prisma.workflowsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflowsPayload>[]
          }
          create: {
            args: Prisma.workflowsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflowsPayload>
          }
          createMany: {
            args: Prisma.workflowsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.workflowsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflowsPayload>
          }
          update: {
            args: Prisma.workflowsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflowsPayload>
          }
          deleteMany: {
            args: Prisma.workflowsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.workflowsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.workflowsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workflowsPayload>
          }
          aggregate: {
            args: Prisma.WorkflowsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflows>
          }
          groupBy: {
            args: Prisma.workflowsGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkflowsGroupByOutputType>[]
          }
          count: {
            args: Prisma.workflowsCountArgs<ExtArgs>
            result: $Utils.Optional<WorkflowsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    assets?: assetsOmit
    budgets?: budgetsOmit
    channel_members?: channel_membersOmit
    channels?: channelsOmit
    clients?: clientsOmit
    contracts?: contractsOmit
    costs?: costsOmit
    documents?: documentsOmit
    events?: eventsOmit
    hr_records?: hr_recordsOmit
    leads?: leadsOmit
    messages?: messagesOmit
    permissions?: permissionsOmit
    project_resources?: project_resourcesOmit
    projects?: projectsOmit
    reports?: reportsOmit
    resources?: resourcesOmit
    sprint_tasks?: sprint_tasksOmit
    sprints?: sprintsOmit
    suppliers?: suppliersOmit
    task_assignees?: task_assigneesOmit
    task_label_links?: task_label_linksOmit
    task_labels?: task_labelsOmit
    tasks?: tasksOmit
    team_members?: team_membersOmit
    teams?: teamsOmit
    ticket_comments?: ticket_commentsOmit
    ticket_history?: ticket_historyOmit
    ticket_workflow?: ticket_workflowOmit
    tickets?: ticketsOmit
    users?: usersOmit
    workflow_steps?: workflow_stepsOmit
    workflows?: workflowsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ChannelsCountOutputType
   */

  export type ChannelsCountOutputType = {
    channel_members: number
    messages: number
  }

  export type ChannelsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    channel_members?: boolean | ChannelsCountOutputTypeCountChannel_membersArgs
    messages?: boolean | ChannelsCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChannelsCountOutputType without action
   */
  export type ChannelsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelsCountOutputType
     */
    select?: ChannelsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChannelsCountOutputType without action
   */
  export type ChannelsCountOutputTypeCountChannel_membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: channel_membersWhereInput
  }

  /**
   * ChannelsCountOutputType without action
   */
  export type ChannelsCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: messagesWhereInput
  }


  /**
   * Count Type ClientsCountOutputType
   */

  export type ClientsCountOutputType = {
    leads: number
  }

  export type ClientsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leads?: boolean | ClientsCountOutputTypeCountLeadsArgs
  }

  // Custom InputTypes
  /**
   * ClientsCountOutputType without action
   */
  export type ClientsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientsCountOutputType
     */
    select?: ClientsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientsCountOutputType without action
   */
  export type ClientsCountOutputTypeCountLeadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: leadsWhereInput
  }


  /**
   * Count Type ProjectsCountOutputType
   */

  export type ProjectsCountOutputType = {
    budgets: number
    contracts: number
    costs: number
    documents: number
    events: number
    leads: number
    permissions: number
    project_resources: number
    reports: number
    sprints: number
    tasks: number
    tickets: number
  }

  export type ProjectsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    budgets?: boolean | ProjectsCountOutputTypeCountBudgetsArgs
    contracts?: boolean | ProjectsCountOutputTypeCountContractsArgs
    costs?: boolean | ProjectsCountOutputTypeCountCostsArgs
    documents?: boolean | ProjectsCountOutputTypeCountDocumentsArgs
    events?: boolean | ProjectsCountOutputTypeCountEventsArgs
    leads?: boolean | ProjectsCountOutputTypeCountLeadsArgs
    permissions?: boolean | ProjectsCountOutputTypeCountPermissionsArgs
    project_resources?: boolean | ProjectsCountOutputTypeCountProject_resourcesArgs
    reports?: boolean | ProjectsCountOutputTypeCountReportsArgs
    sprints?: boolean | ProjectsCountOutputTypeCountSprintsArgs
    tasks?: boolean | ProjectsCountOutputTypeCountTasksArgs
    tickets?: boolean | ProjectsCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectsCountOutputType
     */
    select?: ProjectsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountBudgetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: budgetsWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contractsWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountCostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: costsWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: documentsWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: eventsWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountLeadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: leadsWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: permissionsWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountProject_resourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: project_resourcesWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reportsWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountSprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sprintsWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tasksWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketsWhereInput
  }


  /**
   * Count Type ResourcesCountOutputType
   */

  export type ResourcesCountOutputType = {
    project_resources: number
  }

  export type ResourcesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project_resources?: boolean | ResourcesCountOutputTypeCountProject_resourcesArgs
  }

  // Custom InputTypes
  /**
   * ResourcesCountOutputType without action
   */
  export type ResourcesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourcesCountOutputType
     */
    select?: ResourcesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ResourcesCountOutputType without action
   */
  export type ResourcesCountOutputTypeCountProject_resourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: project_resourcesWhereInput
  }


  /**
   * Count Type SprintsCountOutputType
   */

  export type SprintsCountOutputType = {
    sprint_tasks: number
  }

  export type SprintsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sprint_tasks?: boolean | SprintsCountOutputTypeCountSprint_tasksArgs
  }

  // Custom InputTypes
  /**
   * SprintsCountOutputType without action
   */
  export type SprintsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintsCountOutputType
     */
    select?: SprintsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SprintsCountOutputType without action
   */
  export type SprintsCountOutputTypeCountSprint_tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sprint_tasksWhereInput
  }


  /**
   * Count Type SuppliersCountOutputType
   */

  export type SuppliersCountOutputType = {
    contracts: number
  }

  export type SuppliersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | SuppliersCountOutputTypeCountContractsArgs
  }

  // Custom InputTypes
  /**
   * SuppliersCountOutputType without action
   */
  export type SuppliersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuppliersCountOutputType
     */
    select?: SuppliersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SuppliersCountOutputType without action
   */
  export type SuppliersCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contractsWhereInput
  }


  /**
   * Count Type Task_labelsCountOutputType
   */

  export type Task_labelsCountOutputType = {
    task_label_links: number
  }

  export type Task_labelsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task_label_links?: boolean | Task_labelsCountOutputTypeCountTask_label_linksArgs
  }

  // Custom InputTypes
  /**
   * Task_labelsCountOutputType without action
   */
  export type Task_labelsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task_labelsCountOutputType
     */
    select?: Task_labelsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Task_labelsCountOutputType without action
   */
  export type Task_labelsCountOutputTypeCountTask_label_linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: task_label_linksWhereInput
  }


  /**
   * Count Type TasksCountOutputType
   */

  export type TasksCountOutputType = {
    sprint_tasks: number
    task_assignees: number
    task_label_links: number
    other_tasks: number
  }

  export type TasksCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sprint_tasks?: boolean | TasksCountOutputTypeCountSprint_tasksArgs
    task_assignees?: boolean | TasksCountOutputTypeCountTask_assigneesArgs
    task_label_links?: boolean | TasksCountOutputTypeCountTask_label_linksArgs
    other_tasks?: boolean | TasksCountOutputTypeCountOther_tasksArgs
  }

  // Custom InputTypes
  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TasksCountOutputType
     */
    select?: TasksCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeCountSprint_tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sprint_tasksWhereInput
  }

  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeCountTask_assigneesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: task_assigneesWhereInput
  }

  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeCountTask_label_linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: task_label_linksWhereInput
  }

  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeCountOther_tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tasksWhereInput
  }


  /**
   * Count Type TeamsCountOutputType
   */

  export type TeamsCountOutputType = {
    channels: number
    projects: number
    reports: number
    resources: number
    team_members: number
  }

  export type TeamsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    channels?: boolean | TeamsCountOutputTypeCountChannelsArgs
    projects?: boolean | TeamsCountOutputTypeCountProjectsArgs
    reports?: boolean | TeamsCountOutputTypeCountReportsArgs
    resources?: boolean | TeamsCountOutputTypeCountResourcesArgs
    team_members?: boolean | TeamsCountOutputTypeCountTeam_membersArgs
  }

  // Custom InputTypes
  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamsCountOutputType
     */
    select?: TeamsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountChannelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: channelsWhereInput
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: projectsWhereInput
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reportsWhereInput
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountResourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: resourcesWhereInput
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountTeam_membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: team_membersWhereInput
  }


  /**
   * Count Type TicketsCountOutputType
   */

  export type TicketsCountOutputType = {
    ticket_comments: number
    ticket_history: number
    ticket_workflow: number
  }

  export type TicketsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket_comments?: boolean | TicketsCountOutputTypeCountTicket_commentsArgs
    ticket_history?: boolean | TicketsCountOutputTypeCountTicket_historyArgs
    ticket_workflow?: boolean | TicketsCountOutputTypeCountTicket_workflowArgs
  }

  // Custom InputTypes
  /**
   * TicketsCountOutputType without action
   */
  export type TicketsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsCountOutputType
     */
    select?: TicketsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TicketsCountOutputType without action
   */
  export type TicketsCountOutputTypeCountTicket_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_commentsWhereInput
  }

  /**
   * TicketsCountOutputType without action
   */
  export type TicketsCountOutputTypeCountTicket_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_historyWhereInput
  }

  /**
   * TicketsCountOutputType without action
   */
  export type TicketsCountOutputTypeCountTicket_workflowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_workflowWhereInput
  }


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    assets: number
    channel_members: number
    documents: number
    hr_records: number
    messages: number
    permissions: number
    reports: number
    resources: number
    task_assignees: number
    tasks: number
    team_members: number
    ticket_comments: number
    ticket_history: number
    tickets_tickets_created_byTousers: number
    tickets_tickets_assigned_toTousers: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assets?: boolean | UsersCountOutputTypeCountAssetsArgs
    channel_members?: boolean | UsersCountOutputTypeCountChannel_membersArgs
    documents?: boolean | UsersCountOutputTypeCountDocumentsArgs
    hr_records?: boolean | UsersCountOutputTypeCountHr_recordsArgs
    messages?: boolean | UsersCountOutputTypeCountMessagesArgs
    permissions?: boolean | UsersCountOutputTypeCountPermissionsArgs
    reports?: boolean | UsersCountOutputTypeCountReportsArgs
    resources?: boolean | UsersCountOutputTypeCountResourcesArgs
    task_assignees?: boolean | UsersCountOutputTypeCountTask_assigneesArgs
    tasks?: boolean | UsersCountOutputTypeCountTasksArgs
    team_members?: boolean | UsersCountOutputTypeCountTeam_membersArgs
    ticket_comments?: boolean | UsersCountOutputTypeCountTicket_commentsArgs
    ticket_history?: boolean | UsersCountOutputTypeCountTicket_historyArgs
    tickets_tickets_created_byTousers?: boolean | UsersCountOutputTypeCountTickets_tickets_created_byTousersArgs
    tickets_tickets_assigned_toTousers?: boolean | UsersCountOutputTypeCountTickets_tickets_assigned_toTousersArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: assetsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountChannel_membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: channel_membersWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: documentsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountHr_recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: hr_recordsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: messagesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: permissionsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reportsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountResourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: resourcesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTask_assigneesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: task_assigneesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tasksWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTeam_membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: team_membersWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTicket_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_commentsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTicket_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_historyWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTickets_tickets_created_byTousersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTickets_tickets_assigned_toTousersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketsWhereInput
  }


  /**
   * Count Type Workflow_stepsCountOutputType
   */

  export type Workflow_stepsCountOutputType = {
    ticket_workflow: number
  }

  export type Workflow_stepsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket_workflow?: boolean | Workflow_stepsCountOutputTypeCountTicket_workflowArgs
  }

  // Custom InputTypes
  /**
   * Workflow_stepsCountOutputType without action
   */
  export type Workflow_stepsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow_stepsCountOutputType
     */
    select?: Workflow_stepsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Workflow_stepsCountOutputType without action
   */
  export type Workflow_stepsCountOutputTypeCountTicket_workflowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_workflowWhereInput
  }


  /**
   * Count Type WorkflowsCountOutputType
   */

  export type WorkflowsCountOutputType = {
    ticket_workflow: number
    workflow_steps: number
  }

  export type WorkflowsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket_workflow?: boolean | WorkflowsCountOutputTypeCountTicket_workflowArgs
    workflow_steps?: boolean | WorkflowsCountOutputTypeCountWorkflow_stepsArgs
  }

  // Custom InputTypes
  /**
   * WorkflowsCountOutputType without action
   */
  export type WorkflowsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowsCountOutputType
     */
    select?: WorkflowsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkflowsCountOutputType without action
   */
  export type WorkflowsCountOutputTypeCountTicket_workflowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_workflowWhereInput
  }

  /**
   * WorkflowsCountOutputType without action
   */
  export type WorkflowsCountOutputTypeCountWorkflow_stepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workflow_stepsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model assets
   */

  export type AggregateAssets = {
    _count: AssetsCountAggregateOutputType | null
    _avg: AssetsAvgAggregateOutputType | null
    _sum: AssetsSumAggregateOutputType | null
    _min: AssetsMinAggregateOutputType | null
    _max: AssetsMaxAggregateOutputType | null
  }

  export type AssetsAvgAggregateOutputType = {
    id: number | null
    assigned_to: number | null
  }

  export type AssetsSumAggregateOutputType = {
    id: number | null
    assigned_to: number | null
  }

  export type AssetsMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    serial_number: string | null
    assigned_to: number | null
    status: $Enums.assets_status | null
  }

  export type AssetsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    serial_number: string | null
    assigned_to: number | null
    status: $Enums.assets_status | null
  }

  export type AssetsCountAggregateOutputType = {
    id: number
    name: number
    type: number
    serial_number: number
    assigned_to: number
    status: number
    _all: number
  }


  export type AssetsAvgAggregateInputType = {
    id?: true
    assigned_to?: true
  }

  export type AssetsSumAggregateInputType = {
    id?: true
    assigned_to?: true
  }

  export type AssetsMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    serial_number?: true
    assigned_to?: true
    status?: true
  }

  export type AssetsMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    serial_number?: true
    assigned_to?: true
    status?: true
  }

  export type AssetsCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    serial_number?: true
    assigned_to?: true
    status?: true
    _all?: true
  }

  export type AssetsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which assets to aggregate.
     */
    where?: assetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assets to fetch.
     */
    orderBy?: assetsOrderByWithRelationInput | assetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: assetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned assets
    **/
    _count?: true | AssetsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssetsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssetsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetsMaxAggregateInputType
  }

  export type GetAssetsAggregateType<T extends AssetsAggregateArgs> = {
        [P in keyof T & keyof AggregateAssets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssets[P]>
      : GetScalarType<T[P], AggregateAssets[P]>
  }




  export type assetsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: assetsWhereInput
    orderBy?: assetsOrderByWithAggregationInput | assetsOrderByWithAggregationInput[]
    by: AssetsScalarFieldEnum[] | AssetsScalarFieldEnum
    having?: assetsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetsCountAggregateInputType | true
    _avg?: AssetsAvgAggregateInputType
    _sum?: AssetsSumAggregateInputType
    _min?: AssetsMinAggregateInputType
    _max?: AssetsMaxAggregateInputType
  }

  export type AssetsGroupByOutputType = {
    id: number
    name: string
    type: string | null
    serial_number: string | null
    assigned_to: number | null
    status: $Enums.assets_status | null
    _count: AssetsCountAggregateOutputType | null
    _avg: AssetsAvgAggregateOutputType | null
    _sum: AssetsSumAggregateOutputType | null
    _min: AssetsMinAggregateOutputType | null
    _max: AssetsMaxAggregateOutputType | null
  }

  type GetAssetsGroupByPayload<T extends assetsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetsGroupByOutputType[P]>
            : GetScalarType<T[P], AssetsGroupByOutputType[P]>
        }
      >
    >


  export type assetsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    serial_number?: boolean
    assigned_to?: boolean
    status?: boolean
    users?: boolean | assets$usersArgs<ExtArgs>
  }, ExtArgs["result"]["assets"]>



  export type assetsSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    serial_number?: boolean
    assigned_to?: boolean
    status?: boolean
  }

  export type assetsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "serial_number" | "assigned_to" | "status", ExtArgs["result"]["assets"]>
  export type assetsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | assets$usersArgs<ExtArgs>
  }

  export type $assetsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "assets"
    objects: {
      users: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: string | null
      serial_number: string | null
      assigned_to: number | null
      status: $Enums.assets_status | null
    }, ExtArgs["result"]["assets"]>
    composites: {}
  }

  type assetsGetPayload<S extends boolean | null | undefined | assetsDefaultArgs> = $Result.GetResult<Prisma.$assetsPayload, S>

  type assetsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<assetsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssetsCountAggregateInputType | true
    }

  export interface assetsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['assets'], meta: { name: 'assets' } }
    /**
     * Find zero or one Assets that matches the filter.
     * @param {assetsFindUniqueArgs} args - Arguments to find a Assets
     * @example
     * // Get one Assets
     * const assets = await prisma.assets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends assetsFindUniqueArgs>(args: SelectSubset<T, assetsFindUniqueArgs<ExtArgs>>): Prisma__assetsClient<$Result.GetResult<Prisma.$assetsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Assets that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {assetsFindUniqueOrThrowArgs} args - Arguments to find a Assets
     * @example
     * // Get one Assets
     * const assets = await prisma.assets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends assetsFindUniqueOrThrowArgs>(args: SelectSubset<T, assetsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__assetsClient<$Result.GetResult<Prisma.$assetsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assetsFindFirstArgs} args - Arguments to find a Assets
     * @example
     * // Get one Assets
     * const assets = await prisma.assets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends assetsFindFirstArgs>(args?: SelectSubset<T, assetsFindFirstArgs<ExtArgs>>): Prisma__assetsClient<$Result.GetResult<Prisma.$assetsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assetsFindFirstOrThrowArgs} args - Arguments to find a Assets
     * @example
     * // Get one Assets
     * const assets = await prisma.assets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends assetsFindFirstOrThrowArgs>(args?: SelectSubset<T, assetsFindFirstOrThrowArgs<ExtArgs>>): Prisma__assetsClient<$Result.GetResult<Prisma.$assetsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Assets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assetsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assets
     * const assets = await prisma.assets.findMany()
     * 
     * // Get first 10 Assets
     * const assets = await prisma.assets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetsWithIdOnly = await prisma.assets.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends assetsFindManyArgs>(args?: SelectSubset<T, assetsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$assetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Assets.
     * @param {assetsCreateArgs} args - Arguments to create a Assets.
     * @example
     * // Create one Assets
     * const Assets = await prisma.assets.create({
     *   data: {
     *     // ... data to create a Assets
     *   }
     * })
     * 
     */
    create<T extends assetsCreateArgs>(args: SelectSubset<T, assetsCreateArgs<ExtArgs>>): Prisma__assetsClient<$Result.GetResult<Prisma.$assetsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Assets.
     * @param {assetsCreateManyArgs} args - Arguments to create many Assets.
     * @example
     * // Create many Assets
     * const assets = await prisma.assets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends assetsCreateManyArgs>(args?: SelectSubset<T, assetsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Assets.
     * @param {assetsDeleteArgs} args - Arguments to delete one Assets.
     * @example
     * // Delete one Assets
     * const Assets = await prisma.assets.delete({
     *   where: {
     *     // ... filter to delete one Assets
     *   }
     * })
     * 
     */
    delete<T extends assetsDeleteArgs>(args: SelectSubset<T, assetsDeleteArgs<ExtArgs>>): Prisma__assetsClient<$Result.GetResult<Prisma.$assetsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Assets.
     * @param {assetsUpdateArgs} args - Arguments to update one Assets.
     * @example
     * // Update one Assets
     * const assets = await prisma.assets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends assetsUpdateArgs>(args: SelectSubset<T, assetsUpdateArgs<ExtArgs>>): Prisma__assetsClient<$Result.GetResult<Prisma.$assetsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Assets.
     * @param {assetsDeleteManyArgs} args - Arguments to filter Assets to delete.
     * @example
     * // Delete a few Assets
     * const { count } = await prisma.assets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends assetsDeleteManyArgs>(args?: SelectSubset<T, assetsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assetsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assets
     * const assets = await prisma.assets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends assetsUpdateManyArgs>(args: SelectSubset<T, assetsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Assets.
     * @param {assetsUpsertArgs} args - Arguments to update or create a Assets.
     * @example
     * // Update or create a Assets
     * const assets = await prisma.assets.upsert({
     *   create: {
     *     // ... data to create a Assets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assets we want to update
     *   }
     * })
     */
    upsert<T extends assetsUpsertArgs>(args: SelectSubset<T, assetsUpsertArgs<ExtArgs>>): Prisma__assetsClient<$Result.GetResult<Prisma.$assetsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assetsCountArgs} args - Arguments to filter Assets to count.
     * @example
     * // Count the number of Assets
     * const count = await prisma.assets.count({
     *   where: {
     *     // ... the filter for the Assets we want to count
     *   }
     * })
    **/
    count<T extends assetsCountArgs>(
      args?: Subset<T, assetsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetsAggregateArgs>(args: Subset<T, AssetsAggregateArgs>): Prisma.PrismaPromise<GetAssetsAggregateType<T>>

    /**
     * Group by Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assetsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends assetsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: assetsGroupByArgs['orderBy'] }
        : { orderBy?: assetsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, assetsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the assets model
   */
  readonly fields: assetsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for assets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__assetsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends assets$usersArgs<ExtArgs> = {}>(args?: Subset<T, assets$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the assets model
   */
  interface assetsFieldRefs {
    readonly id: FieldRef<"assets", 'Int'>
    readonly name: FieldRef<"assets", 'String'>
    readonly type: FieldRef<"assets", 'String'>
    readonly serial_number: FieldRef<"assets", 'String'>
    readonly assigned_to: FieldRef<"assets", 'Int'>
    readonly status: FieldRef<"assets", 'assets_status'>
  }
    

  // Custom InputTypes
  /**
   * assets findUnique
   */
  export type assetsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assets
     */
    select?: assetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assets
     */
    omit?: assetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assetsInclude<ExtArgs> | null
    /**
     * Filter, which assets to fetch.
     */
    where: assetsWhereUniqueInput
  }

  /**
   * assets findUniqueOrThrow
   */
  export type assetsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assets
     */
    select?: assetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assets
     */
    omit?: assetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assetsInclude<ExtArgs> | null
    /**
     * Filter, which assets to fetch.
     */
    where: assetsWhereUniqueInput
  }

  /**
   * assets findFirst
   */
  export type assetsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assets
     */
    select?: assetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assets
     */
    omit?: assetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assetsInclude<ExtArgs> | null
    /**
     * Filter, which assets to fetch.
     */
    where?: assetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assets to fetch.
     */
    orderBy?: assetsOrderByWithRelationInput | assetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for assets.
     */
    cursor?: assetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of assets.
     */
    distinct?: AssetsScalarFieldEnum | AssetsScalarFieldEnum[]
  }

  /**
   * assets findFirstOrThrow
   */
  export type assetsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assets
     */
    select?: assetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assets
     */
    omit?: assetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assetsInclude<ExtArgs> | null
    /**
     * Filter, which assets to fetch.
     */
    where?: assetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assets to fetch.
     */
    orderBy?: assetsOrderByWithRelationInput | assetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for assets.
     */
    cursor?: assetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of assets.
     */
    distinct?: AssetsScalarFieldEnum | AssetsScalarFieldEnum[]
  }

  /**
   * assets findMany
   */
  export type assetsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assets
     */
    select?: assetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assets
     */
    omit?: assetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assetsInclude<ExtArgs> | null
    /**
     * Filter, which assets to fetch.
     */
    where?: assetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assets to fetch.
     */
    orderBy?: assetsOrderByWithRelationInput | assetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing assets.
     */
    cursor?: assetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assets.
     */
    skip?: number
    distinct?: AssetsScalarFieldEnum | AssetsScalarFieldEnum[]
  }

  /**
   * assets create
   */
  export type assetsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assets
     */
    select?: assetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assets
     */
    omit?: assetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assetsInclude<ExtArgs> | null
    /**
     * The data needed to create a assets.
     */
    data: XOR<assetsCreateInput, assetsUncheckedCreateInput>
  }

  /**
   * assets createMany
   */
  export type assetsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many assets.
     */
    data: assetsCreateManyInput | assetsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * assets update
   */
  export type assetsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assets
     */
    select?: assetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assets
     */
    omit?: assetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assetsInclude<ExtArgs> | null
    /**
     * The data needed to update a assets.
     */
    data: XOR<assetsUpdateInput, assetsUncheckedUpdateInput>
    /**
     * Choose, which assets to update.
     */
    where: assetsWhereUniqueInput
  }

  /**
   * assets updateMany
   */
  export type assetsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update assets.
     */
    data: XOR<assetsUpdateManyMutationInput, assetsUncheckedUpdateManyInput>
    /**
     * Filter which assets to update
     */
    where?: assetsWhereInput
    /**
     * Limit how many assets to update.
     */
    limit?: number
  }

  /**
   * assets upsert
   */
  export type assetsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assets
     */
    select?: assetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assets
     */
    omit?: assetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assetsInclude<ExtArgs> | null
    /**
     * The filter to search for the assets to update in case it exists.
     */
    where: assetsWhereUniqueInput
    /**
     * In case the assets found by the `where` argument doesn't exist, create a new assets with this data.
     */
    create: XOR<assetsCreateInput, assetsUncheckedCreateInput>
    /**
     * In case the assets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<assetsUpdateInput, assetsUncheckedUpdateInput>
  }

  /**
   * assets delete
   */
  export type assetsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assets
     */
    select?: assetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assets
     */
    omit?: assetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assetsInclude<ExtArgs> | null
    /**
     * Filter which assets to delete.
     */
    where: assetsWhereUniqueInput
  }

  /**
   * assets deleteMany
   */
  export type assetsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which assets to delete
     */
    where?: assetsWhereInput
    /**
     * Limit how many assets to delete.
     */
    limit?: number
  }

  /**
   * assets.users
   */
  export type assets$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * assets without action
   */
  export type assetsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assets
     */
    select?: assetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assets
     */
    omit?: assetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assetsInclude<ExtArgs> | null
  }


  /**
   * Model budgets
   */

  export type AggregateBudgets = {
    _count: BudgetsCountAggregateOutputType | null
    _avg: BudgetsAvgAggregateOutputType | null
    _sum: BudgetsSumAggregateOutputType | null
    _min: BudgetsMinAggregateOutputType | null
    _max: BudgetsMaxAggregateOutputType | null
  }

  export type BudgetsAvgAggregateOutputType = {
    id: number | null
    project_id: number | null
    amount: Decimal | null
  }

  export type BudgetsSumAggregateOutputType = {
    id: number | null
    project_id: number | null
    amount: Decimal | null
  }

  export type BudgetsMinAggregateOutputType = {
    id: number | null
    project_id: number | null
    amount: Decimal | null
    description: string | null
    created_at: Date | null
  }

  export type BudgetsMaxAggregateOutputType = {
    id: number | null
    project_id: number | null
    amount: Decimal | null
    description: string | null
    created_at: Date | null
  }

  export type BudgetsCountAggregateOutputType = {
    id: number
    project_id: number
    amount: number
    description: number
    created_at: number
    _all: number
  }


  export type BudgetsAvgAggregateInputType = {
    id?: true
    project_id?: true
    amount?: true
  }

  export type BudgetsSumAggregateInputType = {
    id?: true
    project_id?: true
    amount?: true
  }

  export type BudgetsMinAggregateInputType = {
    id?: true
    project_id?: true
    amount?: true
    description?: true
    created_at?: true
  }

  export type BudgetsMaxAggregateInputType = {
    id?: true
    project_id?: true
    amount?: true
    description?: true
    created_at?: true
  }

  export type BudgetsCountAggregateInputType = {
    id?: true
    project_id?: true
    amount?: true
    description?: true
    created_at?: true
    _all?: true
  }

  export type BudgetsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which budgets to aggregate.
     */
    where?: budgetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of budgets to fetch.
     */
    orderBy?: budgetsOrderByWithRelationInput | budgetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: budgetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` budgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned budgets
    **/
    _count?: true | BudgetsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BudgetsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BudgetsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BudgetsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BudgetsMaxAggregateInputType
  }

  export type GetBudgetsAggregateType<T extends BudgetsAggregateArgs> = {
        [P in keyof T & keyof AggregateBudgets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBudgets[P]>
      : GetScalarType<T[P], AggregateBudgets[P]>
  }




  export type budgetsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: budgetsWhereInput
    orderBy?: budgetsOrderByWithAggregationInput | budgetsOrderByWithAggregationInput[]
    by: BudgetsScalarFieldEnum[] | BudgetsScalarFieldEnum
    having?: budgetsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BudgetsCountAggregateInputType | true
    _avg?: BudgetsAvgAggregateInputType
    _sum?: BudgetsSumAggregateInputType
    _min?: BudgetsMinAggregateInputType
    _max?: BudgetsMaxAggregateInputType
  }

  export type BudgetsGroupByOutputType = {
    id: number
    project_id: number
    amount: Decimal
    description: string | null
    created_at: Date | null
    _count: BudgetsCountAggregateOutputType | null
    _avg: BudgetsAvgAggregateOutputType | null
    _sum: BudgetsSumAggregateOutputType | null
    _min: BudgetsMinAggregateOutputType | null
    _max: BudgetsMaxAggregateOutputType | null
  }

  type GetBudgetsGroupByPayload<T extends budgetsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BudgetsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BudgetsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BudgetsGroupByOutputType[P]>
            : GetScalarType<T[P], BudgetsGroupByOutputType[P]>
        }
      >
    >


  export type budgetsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    project_id?: boolean
    amount?: boolean
    description?: boolean
    created_at?: boolean
    projects?: boolean | projectsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["budgets"]>



  export type budgetsSelectScalar = {
    id?: boolean
    project_id?: boolean
    amount?: boolean
    description?: boolean
    created_at?: boolean
  }

  export type budgetsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "project_id" | "amount" | "description" | "created_at", ExtArgs["result"]["budgets"]>
  export type budgetsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | projectsDefaultArgs<ExtArgs>
  }

  export type $budgetsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "budgets"
    objects: {
      projects: Prisma.$projectsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      project_id: number
      amount: Prisma.Decimal
      description: string | null
      created_at: Date | null
    }, ExtArgs["result"]["budgets"]>
    composites: {}
  }

  type budgetsGetPayload<S extends boolean | null | undefined | budgetsDefaultArgs> = $Result.GetResult<Prisma.$budgetsPayload, S>

  type budgetsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<budgetsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BudgetsCountAggregateInputType | true
    }

  export interface budgetsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['budgets'], meta: { name: 'budgets' } }
    /**
     * Find zero or one Budgets that matches the filter.
     * @param {budgetsFindUniqueArgs} args - Arguments to find a Budgets
     * @example
     * // Get one Budgets
     * const budgets = await prisma.budgets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends budgetsFindUniqueArgs>(args: SelectSubset<T, budgetsFindUniqueArgs<ExtArgs>>): Prisma__budgetsClient<$Result.GetResult<Prisma.$budgetsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Budgets that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {budgetsFindUniqueOrThrowArgs} args - Arguments to find a Budgets
     * @example
     * // Get one Budgets
     * const budgets = await prisma.budgets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends budgetsFindUniqueOrThrowArgs>(args: SelectSubset<T, budgetsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__budgetsClient<$Result.GetResult<Prisma.$budgetsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Budgets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {budgetsFindFirstArgs} args - Arguments to find a Budgets
     * @example
     * // Get one Budgets
     * const budgets = await prisma.budgets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends budgetsFindFirstArgs>(args?: SelectSubset<T, budgetsFindFirstArgs<ExtArgs>>): Prisma__budgetsClient<$Result.GetResult<Prisma.$budgetsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Budgets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {budgetsFindFirstOrThrowArgs} args - Arguments to find a Budgets
     * @example
     * // Get one Budgets
     * const budgets = await prisma.budgets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends budgetsFindFirstOrThrowArgs>(args?: SelectSubset<T, budgetsFindFirstOrThrowArgs<ExtArgs>>): Prisma__budgetsClient<$Result.GetResult<Prisma.$budgetsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Budgets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {budgetsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Budgets
     * const budgets = await prisma.budgets.findMany()
     * 
     * // Get first 10 Budgets
     * const budgets = await prisma.budgets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const budgetsWithIdOnly = await prisma.budgets.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends budgetsFindManyArgs>(args?: SelectSubset<T, budgetsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$budgetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Budgets.
     * @param {budgetsCreateArgs} args - Arguments to create a Budgets.
     * @example
     * // Create one Budgets
     * const Budgets = await prisma.budgets.create({
     *   data: {
     *     // ... data to create a Budgets
     *   }
     * })
     * 
     */
    create<T extends budgetsCreateArgs>(args: SelectSubset<T, budgetsCreateArgs<ExtArgs>>): Prisma__budgetsClient<$Result.GetResult<Prisma.$budgetsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Budgets.
     * @param {budgetsCreateManyArgs} args - Arguments to create many Budgets.
     * @example
     * // Create many Budgets
     * const budgets = await prisma.budgets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends budgetsCreateManyArgs>(args?: SelectSubset<T, budgetsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Budgets.
     * @param {budgetsDeleteArgs} args - Arguments to delete one Budgets.
     * @example
     * // Delete one Budgets
     * const Budgets = await prisma.budgets.delete({
     *   where: {
     *     // ... filter to delete one Budgets
     *   }
     * })
     * 
     */
    delete<T extends budgetsDeleteArgs>(args: SelectSubset<T, budgetsDeleteArgs<ExtArgs>>): Prisma__budgetsClient<$Result.GetResult<Prisma.$budgetsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Budgets.
     * @param {budgetsUpdateArgs} args - Arguments to update one Budgets.
     * @example
     * // Update one Budgets
     * const budgets = await prisma.budgets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends budgetsUpdateArgs>(args: SelectSubset<T, budgetsUpdateArgs<ExtArgs>>): Prisma__budgetsClient<$Result.GetResult<Prisma.$budgetsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Budgets.
     * @param {budgetsDeleteManyArgs} args - Arguments to filter Budgets to delete.
     * @example
     * // Delete a few Budgets
     * const { count } = await prisma.budgets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends budgetsDeleteManyArgs>(args?: SelectSubset<T, budgetsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {budgetsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Budgets
     * const budgets = await prisma.budgets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends budgetsUpdateManyArgs>(args: SelectSubset<T, budgetsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Budgets.
     * @param {budgetsUpsertArgs} args - Arguments to update or create a Budgets.
     * @example
     * // Update or create a Budgets
     * const budgets = await prisma.budgets.upsert({
     *   create: {
     *     // ... data to create a Budgets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Budgets we want to update
     *   }
     * })
     */
    upsert<T extends budgetsUpsertArgs>(args: SelectSubset<T, budgetsUpsertArgs<ExtArgs>>): Prisma__budgetsClient<$Result.GetResult<Prisma.$budgetsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {budgetsCountArgs} args - Arguments to filter Budgets to count.
     * @example
     * // Count the number of Budgets
     * const count = await prisma.budgets.count({
     *   where: {
     *     // ... the filter for the Budgets we want to count
     *   }
     * })
    **/
    count<T extends budgetsCountArgs>(
      args?: Subset<T, budgetsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BudgetsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BudgetsAggregateArgs>(args: Subset<T, BudgetsAggregateArgs>): Prisma.PrismaPromise<GetBudgetsAggregateType<T>>

    /**
     * Group by Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {budgetsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends budgetsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: budgetsGroupByArgs['orderBy'] }
        : { orderBy?: budgetsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, budgetsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBudgetsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the budgets model
   */
  readonly fields: budgetsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for budgets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__budgetsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projects<T extends projectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, projectsDefaultArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the budgets model
   */
  interface budgetsFieldRefs {
    readonly id: FieldRef<"budgets", 'Int'>
    readonly project_id: FieldRef<"budgets", 'Int'>
    readonly amount: FieldRef<"budgets", 'Decimal'>
    readonly description: FieldRef<"budgets", 'String'>
    readonly created_at: FieldRef<"budgets", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * budgets findUnique
   */
  export type budgetsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the budgets
     */
    select?: budgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the budgets
     */
    omit?: budgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: budgetsInclude<ExtArgs> | null
    /**
     * Filter, which budgets to fetch.
     */
    where: budgetsWhereUniqueInput
  }

  /**
   * budgets findUniqueOrThrow
   */
  export type budgetsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the budgets
     */
    select?: budgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the budgets
     */
    omit?: budgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: budgetsInclude<ExtArgs> | null
    /**
     * Filter, which budgets to fetch.
     */
    where: budgetsWhereUniqueInput
  }

  /**
   * budgets findFirst
   */
  export type budgetsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the budgets
     */
    select?: budgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the budgets
     */
    omit?: budgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: budgetsInclude<ExtArgs> | null
    /**
     * Filter, which budgets to fetch.
     */
    where?: budgetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of budgets to fetch.
     */
    orderBy?: budgetsOrderByWithRelationInput | budgetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for budgets.
     */
    cursor?: budgetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` budgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of budgets.
     */
    distinct?: BudgetsScalarFieldEnum | BudgetsScalarFieldEnum[]
  }

  /**
   * budgets findFirstOrThrow
   */
  export type budgetsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the budgets
     */
    select?: budgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the budgets
     */
    omit?: budgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: budgetsInclude<ExtArgs> | null
    /**
     * Filter, which budgets to fetch.
     */
    where?: budgetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of budgets to fetch.
     */
    orderBy?: budgetsOrderByWithRelationInput | budgetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for budgets.
     */
    cursor?: budgetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` budgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of budgets.
     */
    distinct?: BudgetsScalarFieldEnum | BudgetsScalarFieldEnum[]
  }

  /**
   * budgets findMany
   */
  export type budgetsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the budgets
     */
    select?: budgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the budgets
     */
    omit?: budgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: budgetsInclude<ExtArgs> | null
    /**
     * Filter, which budgets to fetch.
     */
    where?: budgetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of budgets to fetch.
     */
    orderBy?: budgetsOrderByWithRelationInput | budgetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing budgets.
     */
    cursor?: budgetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` budgets.
     */
    skip?: number
    distinct?: BudgetsScalarFieldEnum | BudgetsScalarFieldEnum[]
  }

  /**
   * budgets create
   */
  export type budgetsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the budgets
     */
    select?: budgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the budgets
     */
    omit?: budgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: budgetsInclude<ExtArgs> | null
    /**
     * The data needed to create a budgets.
     */
    data: XOR<budgetsCreateInput, budgetsUncheckedCreateInput>
  }

  /**
   * budgets createMany
   */
  export type budgetsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many budgets.
     */
    data: budgetsCreateManyInput | budgetsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * budgets update
   */
  export type budgetsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the budgets
     */
    select?: budgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the budgets
     */
    omit?: budgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: budgetsInclude<ExtArgs> | null
    /**
     * The data needed to update a budgets.
     */
    data: XOR<budgetsUpdateInput, budgetsUncheckedUpdateInput>
    /**
     * Choose, which budgets to update.
     */
    where: budgetsWhereUniqueInput
  }

  /**
   * budgets updateMany
   */
  export type budgetsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update budgets.
     */
    data: XOR<budgetsUpdateManyMutationInput, budgetsUncheckedUpdateManyInput>
    /**
     * Filter which budgets to update
     */
    where?: budgetsWhereInput
    /**
     * Limit how many budgets to update.
     */
    limit?: number
  }

  /**
   * budgets upsert
   */
  export type budgetsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the budgets
     */
    select?: budgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the budgets
     */
    omit?: budgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: budgetsInclude<ExtArgs> | null
    /**
     * The filter to search for the budgets to update in case it exists.
     */
    where: budgetsWhereUniqueInput
    /**
     * In case the budgets found by the `where` argument doesn't exist, create a new budgets with this data.
     */
    create: XOR<budgetsCreateInput, budgetsUncheckedCreateInput>
    /**
     * In case the budgets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<budgetsUpdateInput, budgetsUncheckedUpdateInput>
  }

  /**
   * budgets delete
   */
  export type budgetsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the budgets
     */
    select?: budgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the budgets
     */
    omit?: budgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: budgetsInclude<ExtArgs> | null
    /**
     * Filter which budgets to delete.
     */
    where: budgetsWhereUniqueInput
  }

  /**
   * budgets deleteMany
   */
  export type budgetsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which budgets to delete
     */
    where?: budgetsWhereInput
    /**
     * Limit how many budgets to delete.
     */
    limit?: number
  }

  /**
   * budgets without action
   */
  export type budgetsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the budgets
     */
    select?: budgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the budgets
     */
    omit?: budgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: budgetsInclude<ExtArgs> | null
  }


  /**
   * Model channel_members
   */

  export type AggregateChannel_members = {
    _count: Channel_membersCountAggregateOutputType | null
    _avg: Channel_membersAvgAggregateOutputType | null
    _sum: Channel_membersSumAggregateOutputType | null
    _min: Channel_membersMinAggregateOutputType | null
    _max: Channel_membersMaxAggregateOutputType | null
  }

  export type Channel_membersAvgAggregateOutputType = {
    id: number | null
    channel_id: number | null
    user_id: number | null
  }

  export type Channel_membersSumAggregateOutputType = {
    id: number | null
    channel_id: number | null
    user_id: number | null
  }

  export type Channel_membersMinAggregateOutputType = {
    id: number | null
    channel_id: number | null
    user_id: number | null
  }

  export type Channel_membersMaxAggregateOutputType = {
    id: number | null
    channel_id: number | null
    user_id: number | null
  }

  export type Channel_membersCountAggregateOutputType = {
    id: number
    channel_id: number
    user_id: number
    _all: number
  }


  export type Channel_membersAvgAggregateInputType = {
    id?: true
    channel_id?: true
    user_id?: true
  }

  export type Channel_membersSumAggregateInputType = {
    id?: true
    channel_id?: true
    user_id?: true
  }

  export type Channel_membersMinAggregateInputType = {
    id?: true
    channel_id?: true
    user_id?: true
  }

  export type Channel_membersMaxAggregateInputType = {
    id?: true
    channel_id?: true
    user_id?: true
  }

  export type Channel_membersCountAggregateInputType = {
    id?: true
    channel_id?: true
    user_id?: true
    _all?: true
  }

  export type Channel_membersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which channel_members to aggregate.
     */
    where?: channel_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channel_members to fetch.
     */
    orderBy?: channel_membersOrderByWithRelationInput | channel_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: channel_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channel_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channel_members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned channel_members
    **/
    _count?: true | Channel_membersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Channel_membersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Channel_membersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Channel_membersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Channel_membersMaxAggregateInputType
  }

  export type GetChannel_membersAggregateType<T extends Channel_membersAggregateArgs> = {
        [P in keyof T & keyof AggregateChannel_members]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannel_members[P]>
      : GetScalarType<T[P], AggregateChannel_members[P]>
  }




  export type channel_membersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: channel_membersWhereInput
    orderBy?: channel_membersOrderByWithAggregationInput | channel_membersOrderByWithAggregationInput[]
    by: Channel_membersScalarFieldEnum[] | Channel_membersScalarFieldEnum
    having?: channel_membersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Channel_membersCountAggregateInputType | true
    _avg?: Channel_membersAvgAggregateInputType
    _sum?: Channel_membersSumAggregateInputType
    _min?: Channel_membersMinAggregateInputType
    _max?: Channel_membersMaxAggregateInputType
  }

  export type Channel_membersGroupByOutputType = {
    id: number
    channel_id: number
    user_id: number
    _count: Channel_membersCountAggregateOutputType | null
    _avg: Channel_membersAvgAggregateOutputType | null
    _sum: Channel_membersSumAggregateOutputType | null
    _min: Channel_membersMinAggregateOutputType | null
    _max: Channel_membersMaxAggregateOutputType | null
  }

  type GetChannel_membersGroupByPayload<T extends channel_membersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Channel_membersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Channel_membersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Channel_membersGroupByOutputType[P]>
            : GetScalarType<T[P], Channel_membersGroupByOutputType[P]>
        }
      >
    >


  export type channel_membersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    channel_id?: boolean
    user_id?: boolean
    channels?: boolean | channelsDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["channel_members"]>



  export type channel_membersSelectScalar = {
    id?: boolean
    channel_id?: boolean
    user_id?: boolean
  }

  export type channel_membersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "channel_id" | "user_id", ExtArgs["result"]["channel_members"]>
  export type channel_membersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    channels?: boolean | channelsDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $channel_membersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "channel_members"
    objects: {
      channels: Prisma.$channelsPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      channel_id: number
      user_id: number
    }, ExtArgs["result"]["channel_members"]>
    composites: {}
  }

  type channel_membersGetPayload<S extends boolean | null | undefined | channel_membersDefaultArgs> = $Result.GetResult<Prisma.$channel_membersPayload, S>

  type channel_membersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<channel_membersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Channel_membersCountAggregateInputType | true
    }

  export interface channel_membersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['channel_members'], meta: { name: 'channel_members' } }
    /**
     * Find zero or one Channel_members that matches the filter.
     * @param {channel_membersFindUniqueArgs} args - Arguments to find a Channel_members
     * @example
     * // Get one Channel_members
     * const channel_members = await prisma.channel_members.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends channel_membersFindUniqueArgs>(args: SelectSubset<T, channel_membersFindUniqueArgs<ExtArgs>>): Prisma__channel_membersClient<$Result.GetResult<Prisma.$channel_membersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Channel_members that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {channel_membersFindUniqueOrThrowArgs} args - Arguments to find a Channel_members
     * @example
     * // Get one Channel_members
     * const channel_members = await prisma.channel_members.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends channel_membersFindUniqueOrThrowArgs>(args: SelectSubset<T, channel_membersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__channel_membersClient<$Result.GetResult<Prisma.$channel_membersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Channel_members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channel_membersFindFirstArgs} args - Arguments to find a Channel_members
     * @example
     * // Get one Channel_members
     * const channel_members = await prisma.channel_members.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends channel_membersFindFirstArgs>(args?: SelectSubset<T, channel_membersFindFirstArgs<ExtArgs>>): Prisma__channel_membersClient<$Result.GetResult<Prisma.$channel_membersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Channel_members that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channel_membersFindFirstOrThrowArgs} args - Arguments to find a Channel_members
     * @example
     * // Get one Channel_members
     * const channel_members = await prisma.channel_members.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends channel_membersFindFirstOrThrowArgs>(args?: SelectSubset<T, channel_membersFindFirstOrThrowArgs<ExtArgs>>): Prisma__channel_membersClient<$Result.GetResult<Prisma.$channel_membersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Channel_members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channel_membersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Channel_members
     * const channel_members = await prisma.channel_members.findMany()
     * 
     * // Get first 10 Channel_members
     * const channel_members = await prisma.channel_members.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channel_membersWithIdOnly = await prisma.channel_members.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends channel_membersFindManyArgs>(args?: SelectSubset<T, channel_membersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$channel_membersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Channel_members.
     * @param {channel_membersCreateArgs} args - Arguments to create a Channel_members.
     * @example
     * // Create one Channel_members
     * const Channel_members = await prisma.channel_members.create({
     *   data: {
     *     // ... data to create a Channel_members
     *   }
     * })
     * 
     */
    create<T extends channel_membersCreateArgs>(args: SelectSubset<T, channel_membersCreateArgs<ExtArgs>>): Prisma__channel_membersClient<$Result.GetResult<Prisma.$channel_membersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Channel_members.
     * @param {channel_membersCreateManyArgs} args - Arguments to create many Channel_members.
     * @example
     * // Create many Channel_members
     * const channel_members = await prisma.channel_members.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends channel_membersCreateManyArgs>(args?: SelectSubset<T, channel_membersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Channel_members.
     * @param {channel_membersDeleteArgs} args - Arguments to delete one Channel_members.
     * @example
     * // Delete one Channel_members
     * const Channel_members = await prisma.channel_members.delete({
     *   where: {
     *     // ... filter to delete one Channel_members
     *   }
     * })
     * 
     */
    delete<T extends channel_membersDeleteArgs>(args: SelectSubset<T, channel_membersDeleteArgs<ExtArgs>>): Prisma__channel_membersClient<$Result.GetResult<Prisma.$channel_membersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Channel_members.
     * @param {channel_membersUpdateArgs} args - Arguments to update one Channel_members.
     * @example
     * // Update one Channel_members
     * const channel_members = await prisma.channel_members.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends channel_membersUpdateArgs>(args: SelectSubset<T, channel_membersUpdateArgs<ExtArgs>>): Prisma__channel_membersClient<$Result.GetResult<Prisma.$channel_membersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Channel_members.
     * @param {channel_membersDeleteManyArgs} args - Arguments to filter Channel_members to delete.
     * @example
     * // Delete a few Channel_members
     * const { count } = await prisma.channel_members.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends channel_membersDeleteManyArgs>(args?: SelectSubset<T, channel_membersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Channel_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channel_membersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Channel_members
     * const channel_members = await prisma.channel_members.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends channel_membersUpdateManyArgs>(args: SelectSubset<T, channel_membersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Channel_members.
     * @param {channel_membersUpsertArgs} args - Arguments to update or create a Channel_members.
     * @example
     * // Update or create a Channel_members
     * const channel_members = await prisma.channel_members.upsert({
     *   create: {
     *     // ... data to create a Channel_members
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Channel_members we want to update
     *   }
     * })
     */
    upsert<T extends channel_membersUpsertArgs>(args: SelectSubset<T, channel_membersUpsertArgs<ExtArgs>>): Prisma__channel_membersClient<$Result.GetResult<Prisma.$channel_membersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Channel_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channel_membersCountArgs} args - Arguments to filter Channel_members to count.
     * @example
     * // Count the number of Channel_members
     * const count = await prisma.channel_members.count({
     *   where: {
     *     // ... the filter for the Channel_members we want to count
     *   }
     * })
    **/
    count<T extends channel_membersCountArgs>(
      args?: Subset<T, channel_membersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Channel_membersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Channel_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Channel_membersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Channel_membersAggregateArgs>(args: Subset<T, Channel_membersAggregateArgs>): Prisma.PrismaPromise<GetChannel_membersAggregateType<T>>

    /**
     * Group by Channel_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channel_membersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends channel_membersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: channel_membersGroupByArgs['orderBy'] }
        : { orderBy?: channel_membersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, channel_membersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannel_membersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the channel_members model
   */
  readonly fields: channel_membersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for channel_members.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__channel_membersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    channels<T extends channelsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, channelsDefaultArgs<ExtArgs>>): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the channel_members model
   */
  interface channel_membersFieldRefs {
    readonly id: FieldRef<"channel_members", 'Int'>
    readonly channel_id: FieldRef<"channel_members", 'Int'>
    readonly user_id: FieldRef<"channel_members", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * channel_members findUnique
   */
  export type channel_membersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channel_members
     */
    select?: channel_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channel_members
     */
    omit?: channel_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channel_membersInclude<ExtArgs> | null
    /**
     * Filter, which channel_members to fetch.
     */
    where: channel_membersWhereUniqueInput
  }

  /**
   * channel_members findUniqueOrThrow
   */
  export type channel_membersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channel_members
     */
    select?: channel_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channel_members
     */
    omit?: channel_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channel_membersInclude<ExtArgs> | null
    /**
     * Filter, which channel_members to fetch.
     */
    where: channel_membersWhereUniqueInput
  }

  /**
   * channel_members findFirst
   */
  export type channel_membersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channel_members
     */
    select?: channel_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channel_members
     */
    omit?: channel_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channel_membersInclude<ExtArgs> | null
    /**
     * Filter, which channel_members to fetch.
     */
    where?: channel_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channel_members to fetch.
     */
    orderBy?: channel_membersOrderByWithRelationInput | channel_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for channel_members.
     */
    cursor?: channel_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channel_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channel_members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of channel_members.
     */
    distinct?: Channel_membersScalarFieldEnum | Channel_membersScalarFieldEnum[]
  }

  /**
   * channel_members findFirstOrThrow
   */
  export type channel_membersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channel_members
     */
    select?: channel_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channel_members
     */
    omit?: channel_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channel_membersInclude<ExtArgs> | null
    /**
     * Filter, which channel_members to fetch.
     */
    where?: channel_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channel_members to fetch.
     */
    orderBy?: channel_membersOrderByWithRelationInput | channel_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for channel_members.
     */
    cursor?: channel_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channel_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channel_members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of channel_members.
     */
    distinct?: Channel_membersScalarFieldEnum | Channel_membersScalarFieldEnum[]
  }

  /**
   * channel_members findMany
   */
  export type channel_membersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channel_members
     */
    select?: channel_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channel_members
     */
    omit?: channel_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channel_membersInclude<ExtArgs> | null
    /**
     * Filter, which channel_members to fetch.
     */
    where?: channel_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channel_members to fetch.
     */
    orderBy?: channel_membersOrderByWithRelationInput | channel_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing channel_members.
     */
    cursor?: channel_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channel_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channel_members.
     */
    skip?: number
    distinct?: Channel_membersScalarFieldEnum | Channel_membersScalarFieldEnum[]
  }

  /**
   * channel_members create
   */
  export type channel_membersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channel_members
     */
    select?: channel_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channel_members
     */
    omit?: channel_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channel_membersInclude<ExtArgs> | null
    /**
     * The data needed to create a channel_members.
     */
    data: XOR<channel_membersCreateInput, channel_membersUncheckedCreateInput>
  }

  /**
   * channel_members createMany
   */
  export type channel_membersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many channel_members.
     */
    data: channel_membersCreateManyInput | channel_membersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * channel_members update
   */
  export type channel_membersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channel_members
     */
    select?: channel_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channel_members
     */
    omit?: channel_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channel_membersInclude<ExtArgs> | null
    /**
     * The data needed to update a channel_members.
     */
    data: XOR<channel_membersUpdateInput, channel_membersUncheckedUpdateInput>
    /**
     * Choose, which channel_members to update.
     */
    where: channel_membersWhereUniqueInput
  }

  /**
   * channel_members updateMany
   */
  export type channel_membersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update channel_members.
     */
    data: XOR<channel_membersUpdateManyMutationInput, channel_membersUncheckedUpdateManyInput>
    /**
     * Filter which channel_members to update
     */
    where?: channel_membersWhereInput
    /**
     * Limit how many channel_members to update.
     */
    limit?: number
  }

  /**
   * channel_members upsert
   */
  export type channel_membersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channel_members
     */
    select?: channel_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channel_members
     */
    omit?: channel_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channel_membersInclude<ExtArgs> | null
    /**
     * The filter to search for the channel_members to update in case it exists.
     */
    where: channel_membersWhereUniqueInput
    /**
     * In case the channel_members found by the `where` argument doesn't exist, create a new channel_members with this data.
     */
    create: XOR<channel_membersCreateInput, channel_membersUncheckedCreateInput>
    /**
     * In case the channel_members was found with the provided `where` argument, update it with this data.
     */
    update: XOR<channel_membersUpdateInput, channel_membersUncheckedUpdateInput>
  }

  /**
   * channel_members delete
   */
  export type channel_membersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channel_members
     */
    select?: channel_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channel_members
     */
    omit?: channel_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channel_membersInclude<ExtArgs> | null
    /**
     * Filter which channel_members to delete.
     */
    where: channel_membersWhereUniqueInput
  }

  /**
   * channel_members deleteMany
   */
  export type channel_membersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which channel_members to delete
     */
    where?: channel_membersWhereInput
    /**
     * Limit how many channel_members to delete.
     */
    limit?: number
  }

  /**
   * channel_members without action
   */
  export type channel_membersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channel_members
     */
    select?: channel_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channel_members
     */
    omit?: channel_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channel_membersInclude<ExtArgs> | null
  }


  /**
   * Model channels
   */

  export type AggregateChannels = {
    _count: ChannelsCountAggregateOutputType | null
    _avg: ChannelsAvgAggregateOutputType | null
    _sum: ChannelsSumAggregateOutputType | null
    _min: ChannelsMinAggregateOutputType | null
    _max: ChannelsMaxAggregateOutputType | null
  }

  export type ChannelsAvgAggregateOutputType = {
    id: number | null
    team_id: number | null
  }

  export type ChannelsSumAggregateOutputType = {
    id: number | null
    team_id: number | null
  }

  export type ChannelsMinAggregateOutputType = {
    id: number | null
    team_id: number | null
    name: string | null
    type: $Enums.channels_type | null
  }

  export type ChannelsMaxAggregateOutputType = {
    id: number | null
    team_id: number | null
    name: string | null
    type: $Enums.channels_type | null
  }

  export type ChannelsCountAggregateOutputType = {
    id: number
    team_id: number
    name: number
    type: number
    _all: number
  }


  export type ChannelsAvgAggregateInputType = {
    id?: true
    team_id?: true
  }

  export type ChannelsSumAggregateInputType = {
    id?: true
    team_id?: true
  }

  export type ChannelsMinAggregateInputType = {
    id?: true
    team_id?: true
    name?: true
    type?: true
  }

  export type ChannelsMaxAggregateInputType = {
    id?: true
    team_id?: true
    name?: true
    type?: true
  }

  export type ChannelsCountAggregateInputType = {
    id?: true
    team_id?: true
    name?: true
    type?: true
    _all?: true
  }

  export type ChannelsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which channels to aggregate.
     */
    where?: channelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channels to fetch.
     */
    orderBy?: channelsOrderByWithRelationInput | channelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: channelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned channels
    **/
    _count?: true | ChannelsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChannelsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChannelsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelsMaxAggregateInputType
  }

  export type GetChannelsAggregateType<T extends ChannelsAggregateArgs> = {
        [P in keyof T & keyof AggregateChannels]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannels[P]>
      : GetScalarType<T[P], AggregateChannels[P]>
  }




  export type channelsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: channelsWhereInput
    orderBy?: channelsOrderByWithAggregationInput | channelsOrderByWithAggregationInput[]
    by: ChannelsScalarFieldEnum[] | ChannelsScalarFieldEnum
    having?: channelsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelsCountAggregateInputType | true
    _avg?: ChannelsAvgAggregateInputType
    _sum?: ChannelsSumAggregateInputType
    _min?: ChannelsMinAggregateInputType
    _max?: ChannelsMaxAggregateInputType
  }

  export type ChannelsGroupByOutputType = {
    id: number
    team_id: number | null
    name: string
    type: $Enums.channels_type | null
    _count: ChannelsCountAggregateOutputType | null
    _avg: ChannelsAvgAggregateOutputType | null
    _sum: ChannelsSumAggregateOutputType | null
    _min: ChannelsMinAggregateOutputType | null
    _max: ChannelsMaxAggregateOutputType | null
  }

  type GetChannelsGroupByPayload<T extends channelsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChannelsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelsGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelsGroupByOutputType[P]>
        }
      >
    >


  export type channelsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_id?: boolean
    name?: boolean
    type?: boolean
    channel_members?: boolean | channels$channel_membersArgs<ExtArgs>
    teams?: boolean | channels$teamsArgs<ExtArgs>
    messages?: boolean | channels$messagesArgs<ExtArgs>
    _count?: boolean | ChannelsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["channels"]>



  export type channelsSelectScalar = {
    id?: boolean
    team_id?: boolean
    name?: boolean
    type?: boolean
  }

  export type channelsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "team_id" | "name" | "type", ExtArgs["result"]["channels"]>
  export type channelsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    channel_members?: boolean | channels$channel_membersArgs<ExtArgs>
    teams?: boolean | channels$teamsArgs<ExtArgs>
    messages?: boolean | channels$messagesArgs<ExtArgs>
    _count?: boolean | ChannelsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $channelsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "channels"
    objects: {
      channel_members: Prisma.$channel_membersPayload<ExtArgs>[]
      teams: Prisma.$teamsPayload<ExtArgs> | null
      messages: Prisma.$messagesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      team_id: number | null
      name: string
      type: $Enums.channels_type | null
    }, ExtArgs["result"]["channels"]>
    composites: {}
  }

  type channelsGetPayload<S extends boolean | null | undefined | channelsDefaultArgs> = $Result.GetResult<Prisma.$channelsPayload, S>

  type channelsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<channelsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChannelsCountAggregateInputType | true
    }

  export interface channelsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['channels'], meta: { name: 'channels' } }
    /**
     * Find zero or one Channels that matches the filter.
     * @param {channelsFindUniqueArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends channelsFindUniqueArgs>(args: SelectSubset<T, channelsFindUniqueArgs<ExtArgs>>): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Channels that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {channelsFindUniqueOrThrowArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends channelsFindUniqueOrThrowArgs>(args: SelectSubset<T, channelsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsFindFirstArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends channelsFindFirstArgs>(args?: SelectSubset<T, channelsFindFirstArgs<ExtArgs>>): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Channels that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsFindFirstOrThrowArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends channelsFindFirstOrThrowArgs>(args?: SelectSubset<T, channelsFindFirstOrThrowArgs<ExtArgs>>): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Channels
     * const channels = await prisma.channels.findMany()
     * 
     * // Get first 10 Channels
     * const channels = await prisma.channels.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelsWithIdOnly = await prisma.channels.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends channelsFindManyArgs>(args?: SelectSubset<T, channelsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Channels.
     * @param {channelsCreateArgs} args - Arguments to create a Channels.
     * @example
     * // Create one Channels
     * const Channels = await prisma.channels.create({
     *   data: {
     *     // ... data to create a Channels
     *   }
     * })
     * 
     */
    create<T extends channelsCreateArgs>(args: SelectSubset<T, channelsCreateArgs<ExtArgs>>): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Channels.
     * @param {channelsCreateManyArgs} args - Arguments to create many Channels.
     * @example
     * // Create many Channels
     * const channels = await prisma.channels.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends channelsCreateManyArgs>(args?: SelectSubset<T, channelsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Channels.
     * @param {channelsDeleteArgs} args - Arguments to delete one Channels.
     * @example
     * // Delete one Channels
     * const Channels = await prisma.channels.delete({
     *   where: {
     *     // ... filter to delete one Channels
     *   }
     * })
     * 
     */
    delete<T extends channelsDeleteArgs>(args: SelectSubset<T, channelsDeleteArgs<ExtArgs>>): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Channels.
     * @param {channelsUpdateArgs} args - Arguments to update one Channels.
     * @example
     * // Update one Channels
     * const channels = await prisma.channels.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends channelsUpdateArgs>(args: SelectSubset<T, channelsUpdateArgs<ExtArgs>>): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Channels.
     * @param {channelsDeleteManyArgs} args - Arguments to filter Channels to delete.
     * @example
     * // Delete a few Channels
     * const { count } = await prisma.channels.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends channelsDeleteManyArgs>(args?: SelectSubset<T, channelsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Channels
     * const channels = await prisma.channels.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends channelsUpdateManyArgs>(args: SelectSubset<T, channelsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Channels.
     * @param {channelsUpsertArgs} args - Arguments to update or create a Channels.
     * @example
     * // Update or create a Channels
     * const channels = await prisma.channels.upsert({
     *   create: {
     *     // ... data to create a Channels
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Channels we want to update
     *   }
     * })
     */
    upsert<T extends channelsUpsertArgs>(args: SelectSubset<T, channelsUpsertArgs<ExtArgs>>): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsCountArgs} args - Arguments to filter Channels to count.
     * @example
     * // Count the number of Channels
     * const count = await prisma.channels.count({
     *   where: {
     *     // ... the filter for the Channels we want to count
     *   }
     * })
    **/
    count<T extends channelsCountArgs>(
      args?: Subset<T, channelsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelsAggregateArgs>(args: Subset<T, ChannelsAggregateArgs>): Prisma.PrismaPromise<GetChannelsAggregateType<T>>

    /**
     * Group by Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends channelsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: channelsGroupByArgs['orderBy'] }
        : { orderBy?: channelsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, channelsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the channels model
   */
  readonly fields: channelsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for channels.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__channelsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    channel_members<T extends channels$channel_membersArgs<ExtArgs> = {}>(args?: Subset<T, channels$channel_membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$channel_membersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teams<T extends channels$teamsArgs<ExtArgs> = {}>(args?: Subset<T, channels$teamsArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    messages<T extends channels$messagesArgs<ExtArgs> = {}>(args?: Subset<T, channels$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the channels model
   */
  interface channelsFieldRefs {
    readonly id: FieldRef<"channels", 'Int'>
    readonly team_id: FieldRef<"channels", 'Int'>
    readonly name: FieldRef<"channels", 'String'>
    readonly type: FieldRef<"channels", 'channels_type'>
  }
    

  // Custom InputTypes
  /**
   * channels findUnique
   */
  export type channelsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channels
     */
    omit?: channelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * Filter, which channels to fetch.
     */
    where: channelsWhereUniqueInput
  }

  /**
   * channels findUniqueOrThrow
   */
  export type channelsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channels
     */
    omit?: channelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * Filter, which channels to fetch.
     */
    where: channelsWhereUniqueInput
  }

  /**
   * channels findFirst
   */
  export type channelsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channels
     */
    omit?: channelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * Filter, which channels to fetch.
     */
    where?: channelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channels to fetch.
     */
    orderBy?: channelsOrderByWithRelationInput | channelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for channels.
     */
    cursor?: channelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of channels.
     */
    distinct?: ChannelsScalarFieldEnum | ChannelsScalarFieldEnum[]
  }

  /**
   * channels findFirstOrThrow
   */
  export type channelsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channels
     */
    omit?: channelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * Filter, which channels to fetch.
     */
    where?: channelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channels to fetch.
     */
    orderBy?: channelsOrderByWithRelationInput | channelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for channels.
     */
    cursor?: channelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of channels.
     */
    distinct?: ChannelsScalarFieldEnum | ChannelsScalarFieldEnum[]
  }

  /**
   * channels findMany
   */
  export type channelsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channels
     */
    omit?: channelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * Filter, which channels to fetch.
     */
    where?: channelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channels to fetch.
     */
    orderBy?: channelsOrderByWithRelationInput | channelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing channels.
     */
    cursor?: channelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channels.
     */
    skip?: number
    distinct?: ChannelsScalarFieldEnum | ChannelsScalarFieldEnum[]
  }

  /**
   * channels create
   */
  export type channelsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channels
     */
    omit?: channelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * The data needed to create a channels.
     */
    data: XOR<channelsCreateInput, channelsUncheckedCreateInput>
  }

  /**
   * channels createMany
   */
  export type channelsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many channels.
     */
    data: channelsCreateManyInput | channelsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * channels update
   */
  export type channelsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channels
     */
    omit?: channelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * The data needed to update a channels.
     */
    data: XOR<channelsUpdateInput, channelsUncheckedUpdateInput>
    /**
     * Choose, which channels to update.
     */
    where: channelsWhereUniqueInput
  }

  /**
   * channels updateMany
   */
  export type channelsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update channels.
     */
    data: XOR<channelsUpdateManyMutationInput, channelsUncheckedUpdateManyInput>
    /**
     * Filter which channels to update
     */
    where?: channelsWhereInput
    /**
     * Limit how many channels to update.
     */
    limit?: number
  }

  /**
   * channels upsert
   */
  export type channelsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channels
     */
    omit?: channelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * The filter to search for the channels to update in case it exists.
     */
    where: channelsWhereUniqueInput
    /**
     * In case the channels found by the `where` argument doesn't exist, create a new channels with this data.
     */
    create: XOR<channelsCreateInput, channelsUncheckedCreateInput>
    /**
     * In case the channels was found with the provided `where` argument, update it with this data.
     */
    update: XOR<channelsUpdateInput, channelsUncheckedUpdateInput>
  }

  /**
   * channels delete
   */
  export type channelsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channels
     */
    omit?: channelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * Filter which channels to delete.
     */
    where: channelsWhereUniqueInput
  }

  /**
   * channels deleteMany
   */
  export type channelsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which channels to delete
     */
    where?: channelsWhereInput
    /**
     * Limit how many channels to delete.
     */
    limit?: number
  }

  /**
   * channels.channel_members
   */
  export type channels$channel_membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channel_members
     */
    select?: channel_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channel_members
     */
    omit?: channel_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channel_membersInclude<ExtArgs> | null
    where?: channel_membersWhereInput
    orderBy?: channel_membersOrderByWithRelationInput | channel_membersOrderByWithRelationInput[]
    cursor?: channel_membersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Channel_membersScalarFieldEnum | Channel_membersScalarFieldEnum[]
  }

  /**
   * channels.teams
   */
  export type channels$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    where?: teamsWhereInput
  }

  /**
   * channels.messages
   */
  export type channels$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the messages
     */
    omit?: messagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messagesInclude<ExtArgs> | null
    where?: messagesWhereInput
    orderBy?: messagesOrderByWithRelationInput | messagesOrderByWithRelationInput[]
    cursor?: messagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }

  /**
   * channels without action
   */
  export type channelsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channels
     */
    omit?: channelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channelsInclude<ExtArgs> | null
  }


  /**
   * Model clients
   */

  export type AggregateClients = {
    _count: ClientsCountAggregateOutputType | null
    _avg: ClientsAvgAggregateOutputType | null
    _sum: ClientsSumAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
  }

  export type ClientsAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientsSumAggregateOutputType = {
    id: number | null
  }

  export type ClientsMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    company: string | null
    created_at: Date | null
  }

  export type ClientsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    company: string | null
    created_at: Date | null
  }

  export type ClientsCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    company: number
    created_at: number
    _all: number
  }


  export type ClientsAvgAggregateInputType = {
    id?: true
  }

  export type ClientsSumAggregateInputType = {
    id?: true
  }

  export type ClientsMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    company?: true
    created_at?: true
  }

  export type ClientsMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    company?: true
    created_at?: true
  }

  export type ClientsCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    company?: true
    created_at?: true
    _all?: true
  }

  export type ClientsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clients to aggregate.
     */
    where?: clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientsOrderByWithRelationInput | clientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clients
    **/
    _count?: true | ClientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientsMaxAggregateInputType
  }

  export type GetClientsAggregateType<T extends ClientsAggregateArgs> = {
        [P in keyof T & keyof AggregateClients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClients[P]>
      : GetScalarType<T[P], AggregateClients[P]>
  }




  export type clientsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: clientsWhereInput
    orderBy?: clientsOrderByWithAggregationInput | clientsOrderByWithAggregationInput[]
    by: ClientsScalarFieldEnum[] | ClientsScalarFieldEnum
    having?: clientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientsCountAggregateInputType | true
    _avg?: ClientsAvgAggregateInputType
    _sum?: ClientsSumAggregateInputType
    _min?: ClientsMinAggregateInputType
    _max?: ClientsMaxAggregateInputType
  }

  export type ClientsGroupByOutputType = {
    id: number
    name: string
    email: string | null
    phone: string | null
    company: string | null
    created_at: Date | null
    _count: ClientsCountAggregateOutputType | null
    _avg: ClientsAvgAggregateOutputType | null
    _sum: ClientsSumAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
  }

  type GetClientsGroupByPayload<T extends clientsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientsGroupByOutputType[P]>
            : GetScalarType<T[P], ClientsGroupByOutputType[P]>
        }
      >
    >


  export type clientsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    company?: boolean
    created_at?: boolean
    leads?: boolean | clients$leadsArgs<ExtArgs>
    _count?: boolean | ClientsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clients"]>



  export type clientsSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    company?: boolean
    created_at?: boolean
  }

  export type clientsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "company" | "created_at", ExtArgs["result"]["clients"]>
  export type clientsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leads?: boolean | clients$leadsArgs<ExtArgs>
    _count?: boolean | ClientsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $clientsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "clients"
    objects: {
      leads: Prisma.$leadsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string | null
      phone: string | null
      company: string | null
      created_at: Date | null
    }, ExtArgs["result"]["clients"]>
    composites: {}
  }

  type clientsGetPayload<S extends boolean | null | undefined | clientsDefaultArgs> = $Result.GetResult<Prisma.$clientsPayload, S>

  type clientsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<clientsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientsCountAggregateInputType | true
    }

  export interface clientsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['clients'], meta: { name: 'clients' } }
    /**
     * Find zero or one Clients that matches the filter.
     * @param {clientsFindUniqueArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends clientsFindUniqueArgs>(args: SelectSubset<T, clientsFindUniqueArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Clients that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {clientsFindUniqueOrThrowArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends clientsFindUniqueOrThrowArgs>(args: SelectSubset<T, clientsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsFindFirstArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends clientsFindFirstArgs>(args?: SelectSubset<T, clientsFindFirstArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clients that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsFindFirstOrThrowArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends clientsFindFirstOrThrowArgs>(args?: SelectSubset<T, clientsFindFirstOrThrowArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.clients.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.clients.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientsWithIdOnly = await prisma.clients.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends clientsFindManyArgs>(args?: SelectSubset<T, clientsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Clients.
     * @param {clientsCreateArgs} args - Arguments to create a Clients.
     * @example
     * // Create one Clients
     * const Clients = await prisma.clients.create({
     *   data: {
     *     // ... data to create a Clients
     *   }
     * })
     * 
     */
    create<T extends clientsCreateArgs>(args: SelectSubset<T, clientsCreateArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clients.
     * @param {clientsCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const clients = await prisma.clients.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends clientsCreateManyArgs>(args?: SelectSubset<T, clientsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Clients.
     * @param {clientsDeleteArgs} args - Arguments to delete one Clients.
     * @example
     * // Delete one Clients
     * const Clients = await prisma.clients.delete({
     *   where: {
     *     // ... filter to delete one Clients
     *   }
     * })
     * 
     */
    delete<T extends clientsDeleteArgs>(args: SelectSubset<T, clientsDeleteArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Clients.
     * @param {clientsUpdateArgs} args - Arguments to update one Clients.
     * @example
     * // Update one Clients
     * const clients = await prisma.clients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends clientsUpdateArgs>(args: SelectSubset<T, clientsUpdateArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clients.
     * @param {clientsDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.clients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends clientsDeleteManyArgs>(args?: SelectSubset<T, clientsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const clients = await prisma.clients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends clientsUpdateManyArgs>(args: SelectSubset<T, clientsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Clients.
     * @param {clientsUpsertArgs} args - Arguments to update or create a Clients.
     * @example
     * // Update or create a Clients
     * const clients = await prisma.clients.upsert({
     *   create: {
     *     // ... data to create a Clients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clients we want to update
     *   }
     * })
     */
    upsert<T extends clientsUpsertArgs>(args: SelectSubset<T, clientsUpsertArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.clients.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends clientsCountArgs>(
      args?: Subset<T, clientsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientsAggregateArgs>(args: Subset<T, ClientsAggregateArgs>): Prisma.PrismaPromise<GetClientsAggregateType<T>>

    /**
     * Group by Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends clientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: clientsGroupByArgs['orderBy'] }
        : { orderBy?: clientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, clientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the clients model
   */
  readonly fields: clientsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for clients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__clientsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    leads<T extends clients$leadsArgs<ExtArgs> = {}>(args?: Subset<T, clients$leadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$leadsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the clients model
   */
  interface clientsFieldRefs {
    readonly id: FieldRef<"clients", 'Int'>
    readonly name: FieldRef<"clients", 'String'>
    readonly email: FieldRef<"clients", 'String'>
    readonly phone: FieldRef<"clients", 'String'>
    readonly company: FieldRef<"clients", 'String'>
    readonly created_at: FieldRef<"clients", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * clients findUnique
   */
  export type clientsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * Filter, which clients to fetch.
     */
    where: clientsWhereUniqueInput
  }

  /**
   * clients findUniqueOrThrow
   */
  export type clientsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * Filter, which clients to fetch.
     */
    where: clientsWhereUniqueInput
  }

  /**
   * clients findFirst
   */
  export type clientsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * Filter, which clients to fetch.
     */
    where?: clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientsOrderByWithRelationInput | clientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clients.
     */
    cursor?: clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clients.
     */
    distinct?: ClientsScalarFieldEnum | ClientsScalarFieldEnum[]
  }

  /**
   * clients findFirstOrThrow
   */
  export type clientsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * Filter, which clients to fetch.
     */
    where?: clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientsOrderByWithRelationInput | clientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clients.
     */
    cursor?: clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clients.
     */
    distinct?: ClientsScalarFieldEnum | ClientsScalarFieldEnum[]
  }

  /**
   * clients findMany
   */
  export type clientsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * Filter, which clients to fetch.
     */
    where?: clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientsOrderByWithRelationInput | clientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clients.
     */
    cursor?: clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    distinct?: ClientsScalarFieldEnum | ClientsScalarFieldEnum[]
  }

  /**
   * clients create
   */
  export type clientsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * The data needed to create a clients.
     */
    data: XOR<clientsCreateInput, clientsUncheckedCreateInput>
  }

  /**
   * clients createMany
   */
  export type clientsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many clients.
     */
    data: clientsCreateManyInput | clientsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * clients update
   */
  export type clientsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * The data needed to update a clients.
     */
    data: XOR<clientsUpdateInput, clientsUncheckedUpdateInput>
    /**
     * Choose, which clients to update.
     */
    where: clientsWhereUniqueInput
  }

  /**
   * clients updateMany
   */
  export type clientsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update clients.
     */
    data: XOR<clientsUpdateManyMutationInput, clientsUncheckedUpdateManyInput>
    /**
     * Filter which clients to update
     */
    where?: clientsWhereInput
    /**
     * Limit how many clients to update.
     */
    limit?: number
  }

  /**
   * clients upsert
   */
  export type clientsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * The filter to search for the clients to update in case it exists.
     */
    where: clientsWhereUniqueInput
    /**
     * In case the clients found by the `where` argument doesn't exist, create a new clients with this data.
     */
    create: XOR<clientsCreateInput, clientsUncheckedCreateInput>
    /**
     * In case the clients was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clientsUpdateInput, clientsUncheckedUpdateInput>
  }

  /**
   * clients delete
   */
  export type clientsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * Filter which clients to delete.
     */
    where: clientsWhereUniqueInput
  }

  /**
   * clients deleteMany
   */
  export type clientsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clients to delete
     */
    where?: clientsWhereInput
    /**
     * Limit how many clients to delete.
     */
    limit?: number
  }

  /**
   * clients.leads
   */
  export type clients$leadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leads
     */
    select?: leadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leads
     */
    omit?: leadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leadsInclude<ExtArgs> | null
    where?: leadsWhereInput
    orderBy?: leadsOrderByWithRelationInput | leadsOrderByWithRelationInput[]
    cursor?: leadsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadsScalarFieldEnum | LeadsScalarFieldEnum[]
  }

  /**
   * clients without action
   */
  export type clientsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
  }


  /**
   * Model contracts
   */

  export type AggregateContracts = {
    _count: ContractsCountAggregateOutputType | null
    _avg: ContractsAvgAggregateOutputType | null
    _sum: ContractsSumAggregateOutputType | null
    _min: ContractsMinAggregateOutputType | null
    _max: ContractsMaxAggregateOutputType | null
  }

  export type ContractsAvgAggregateOutputType = {
    id: number | null
    supplier_id: number | null
    project_id: number | null
    amount: Decimal | null
  }

  export type ContractsSumAggregateOutputType = {
    id: number | null
    supplier_id: number | null
    project_id: number | null
    amount: Decimal | null
  }

  export type ContractsMinAggregateOutputType = {
    id: number | null
    supplier_id: number | null
    project_id: number | null
    description: string | null
    start_date: Date | null
    end_date: Date | null
    amount: Decimal | null
    status: $Enums.contracts_status | null
  }

  export type ContractsMaxAggregateOutputType = {
    id: number | null
    supplier_id: number | null
    project_id: number | null
    description: string | null
    start_date: Date | null
    end_date: Date | null
    amount: Decimal | null
    status: $Enums.contracts_status | null
  }

  export type ContractsCountAggregateOutputType = {
    id: number
    supplier_id: number
    project_id: number
    description: number
    start_date: number
    end_date: number
    amount: number
    status: number
    _all: number
  }


  export type ContractsAvgAggregateInputType = {
    id?: true
    supplier_id?: true
    project_id?: true
    amount?: true
  }

  export type ContractsSumAggregateInputType = {
    id?: true
    supplier_id?: true
    project_id?: true
    amount?: true
  }

  export type ContractsMinAggregateInputType = {
    id?: true
    supplier_id?: true
    project_id?: true
    description?: true
    start_date?: true
    end_date?: true
    amount?: true
    status?: true
  }

  export type ContractsMaxAggregateInputType = {
    id?: true
    supplier_id?: true
    project_id?: true
    description?: true
    start_date?: true
    end_date?: true
    amount?: true
    status?: true
  }

  export type ContractsCountAggregateInputType = {
    id?: true
    supplier_id?: true
    project_id?: true
    description?: true
    start_date?: true
    end_date?: true
    amount?: true
    status?: true
    _all?: true
  }

  export type ContractsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contracts to aggregate.
     */
    where?: contractsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contracts to fetch.
     */
    orderBy?: contractsOrderByWithRelationInput | contractsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: contractsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned contracts
    **/
    _count?: true | ContractsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContractsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContractsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractsMaxAggregateInputType
  }

  export type GetContractsAggregateType<T extends ContractsAggregateArgs> = {
        [P in keyof T & keyof AggregateContracts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContracts[P]>
      : GetScalarType<T[P], AggregateContracts[P]>
  }




  export type contractsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contractsWhereInput
    orderBy?: contractsOrderByWithAggregationInput | contractsOrderByWithAggregationInput[]
    by: ContractsScalarFieldEnum[] | ContractsScalarFieldEnum
    having?: contractsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractsCountAggregateInputType | true
    _avg?: ContractsAvgAggregateInputType
    _sum?: ContractsSumAggregateInputType
    _min?: ContractsMinAggregateInputType
    _max?: ContractsMaxAggregateInputType
  }

  export type ContractsGroupByOutputType = {
    id: number
    supplier_id: number | null
    project_id: number | null
    description: string | null
    start_date: Date | null
    end_date: Date | null
    amount: Decimal | null
    status: $Enums.contracts_status | null
    _count: ContractsCountAggregateOutputType | null
    _avg: ContractsAvgAggregateOutputType | null
    _sum: ContractsSumAggregateOutputType | null
    _min: ContractsMinAggregateOutputType | null
    _max: ContractsMaxAggregateOutputType | null
  }

  type GetContractsGroupByPayload<T extends contractsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractsGroupByOutputType[P]>
            : GetScalarType<T[P], ContractsGroupByOutputType[P]>
        }
      >
    >


  export type contractsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    supplier_id?: boolean
    project_id?: boolean
    description?: boolean
    start_date?: boolean
    end_date?: boolean
    amount?: boolean
    status?: boolean
    suppliers?: boolean | contracts$suppliersArgs<ExtArgs>
    projects?: boolean | contracts$projectsArgs<ExtArgs>
  }, ExtArgs["result"]["contracts"]>



  export type contractsSelectScalar = {
    id?: boolean
    supplier_id?: boolean
    project_id?: boolean
    description?: boolean
    start_date?: boolean
    end_date?: boolean
    amount?: boolean
    status?: boolean
  }

  export type contractsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "supplier_id" | "project_id" | "description" | "start_date" | "end_date" | "amount" | "status", ExtArgs["result"]["contracts"]>
  export type contractsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    suppliers?: boolean | contracts$suppliersArgs<ExtArgs>
    projects?: boolean | contracts$projectsArgs<ExtArgs>
  }

  export type $contractsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "contracts"
    objects: {
      suppliers: Prisma.$suppliersPayload<ExtArgs> | null
      projects: Prisma.$projectsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      supplier_id: number | null
      project_id: number | null
      description: string | null
      start_date: Date | null
      end_date: Date | null
      amount: Prisma.Decimal | null
      status: $Enums.contracts_status | null
    }, ExtArgs["result"]["contracts"]>
    composites: {}
  }

  type contractsGetPayload<S extends boolean | null | undefined | contractsDefaultArgs> = $Result.GetResult<Prisma.$contractsPayload, S>

  type contractsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<contractsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContractsCountAggregateInputType | true
    }

  export interface contractsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['contracts'], meta: { name: 'contracts' } }
    /**
     * Find zero or one Contracts that matches the filter.
     * @param {contractsFindUniqueArgs} args - Arguments to find a Contracts
     * @example
     * // Get one Contracts
     * const contracts = await prisma.contracts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends contractsFindUniqueArgs>(args: SelectSubset<T, contractsFindUniqueArgs<ExtArgs>>): Prisma__contractsClient<$Result.GetResult<Prisma.$contractsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contracts that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {contractsFindUniqueOrThrowArgs} args - Arguments to find a Contracts
     * @example
     * // Get one Contracts
     * const contracts = await prisma.contracts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends contractsFindUniqueOrThrowArgs>(args: SelectSubset<T, contractsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__contractsClient<$Result.GetResult<Prisma.$contractsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contractsFindFirstArgs} args - Arguments to find a Contracts
     * @example
     * // Get one Contracts
     * const contracts = await prisma.contracts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends contractsFindFirstArgs>(args?: SelectSubset<T, contractsFindFirstArgs<ExtArgs>>): Prisma__contractsClient<$Result.GetResult<Prisma.$contractsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contracts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contractsFindFirstOrThrowArgs} args - Arguments to find a Contracts
     * @example
     * // Get one Contracts
     * const contracts = await prisma.contracts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends contractsFindFirstOrThrowArgs>(args?: SelectSubset<T, contractsFindFirstOrThrowArgs<ExtArgs>>): Prisma__contractsClient<$Result.GetResult<Prisma.$contractsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contractsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contracts
     * const contracts = await prisma.contracts.findMany()
     * 
     * // Get first 10 Contracts
     * const contracts = await prisma.contracts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractsWithIdOnly = await prisma.contracts.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends contractsFindManyArgs>(args?: SelectSubset<T, contractsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contractsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contracts.
     * @param {contractsCreateArgs} args - Arguments to create a Contracts.
     * @example
     * // Create one Contracts
     * const Contracts = await prisma.contracts.create({
     *   data: {
     *     // ... data to create a Contracts
     *   }
     * })
     * 
     */
    create<T extends contractsCreateArgs>(args: SelectSubset<T, contractsCreateArgs<ExtArgs>>): Prisma__contractsClient<$Result.GetResult<Prisma.$contractsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contracts.
     * @param {contractsCreateManyArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contracts = await prisma.contracts.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends contractsCreateManyArgs>(args?: SelectSubset<T, contractsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Contracts.
     * @param {contractsDeleteArgs} args - Arguments to delete one Contracts.
     * @example
     * // Delete one Contracts
     * const Contracts = await prisma.contracts.delete({
     *   where: {
     *     // ... filter to delete one Contracts
     *   }
     * })
     * 
     */
    delete<T extends contractsDeleteArgs>(args: SelectSubset<T, contractsDeleteArgs<ExtArgs>>): Prisma__contractsClient<$Result.GetResult<Prisma.$contractsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contracts.
     * @param {contractsUpdateArgs} args - Arguments to update one Contracts.
     * @example
     * // Update one Contracts
     * const contracts = await prisma.contracts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends contractsUpdateArgs>(args: SelectSubset<T, contractsUpdateArgs<ExtArgs>>): Prisma__contractsClient<$Result.GetResult<Prisma.$contractsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contracts.
     * @param {contractsDeleteManyArgs} args - Arguments to filter Contracts to delete.
     * @example
     * // Delete a few Contracts
     * const { count } = await prisma.contracts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends contractsDeleteManyArgs>(args?: SelectSubset<T, contractsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contractsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contracts
     * const contracts = await prisma.contracts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends contractsUpdateManyArgs>(args: SelectSubset<T, contractsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contracts.
     * @param {contractsUpsertArgs} args - Arguments to update or create a Contracts.
     * @example
     * // Update or create a Contracts
     * const contracts = await prisma.contracts.upsert({
     *   create: {
     *     // ... data to create a Contracts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contracts we want to update
     *   }
     * })
     */
    upsert<T extends contractsUpsertArgs>(args: SelectSubset<T, contractsUpsertArgs<ExtArgs>>): Prisma__contractsClient<$Result.GetResult<Prisma.$contractsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contractsCountArgs} args - Arguments to filter Contracts to count.
     * @example
     * // Count the number of Contracts
     * const count = await prisma.contracts.count({
     *   where: {
     *     // ... the filter for the Contracts we want to count
     *   }
     * })
    **/
    count<T extends contractsCountArgs>(
      args?: Subset<T, contractsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractsAggregateArgs>(args: Subset<T, ContractsAggregateArgs>): Prisma.PrismaPromise<GetContractsAggregateType<T>>

    /**
     * Group by Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contractsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends contractsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: contractsGroupByArgs['orderBy'] }
        : { orderBy?: contractsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, contractsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the contracts model
   */
  readonly fields: contractsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for contracts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__contractsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    suppliers<T extends contracts$suppliersArgs<ExtArgs> = {}>(args?: Subset<T, contracts$suppliersArgs<ExtArgs>>): Prisma__suppliersClient<$Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    projects<T extends contracts$projectsArgs<ExtArgs> = {}>(args?: Subset<T, contracts$projectsArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the contracts model
   */
  interface contractsFieldRefs {
    readonly id: FieldRef<"contracts", 'Int'>
    readonly supplier_id: FieldRef<"contracts", 'Int'>
    readonly project_id: FieldRef<"contracts", 'Int'>
    readonly description: FieldRef<"contracts", 'String'>
    readonly start_date: FieldRef<"contracts", 'DateTime'>
    readonly end_date: FieldRef<"contracts", 'DateTime'>
    readonly amount: FieldRef<"contracts", 'Decimal'>
    readonly status: FieldRef<"contracts", 'contracts_status'>
  }
    

  // Custom InputTypes
  /**
   * contracts findUnique
   */
  export type contractsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contracts
     */
    select?: contractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contracts
     */
    omit?: contractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contractsInclude<ExtArgs> | null
    /**
     * Filter, which contracts to fetch.
     */
    where: contractsWhereUniqueInput
  }

  /**
   * contracts findUniqueOrThrow
   */
  export type contractsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contracts
     */
    select?: contractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contracts
     */
    omit?: contractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contractsInclude<ExtArgs> | null
    /**
     * Filter, which contracts to fetch.
     */
    where: contractsWhereUniqueInput
  }

  /**
   * contracts findFirst
   */
  export type contractsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contracts
     */
    select?: contractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contracts
     */
    omit?: contractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contractsInclude<ExtArgs> | null
    /**
     * Filter, which contracts to fetch.
     */
    where?: contractsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contracts to fetch.
     */
    orderBy?: contractsOrderByWithRelationInput | contractsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contracts.
     */
    cursor?: contractsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contracts.
     */
    distinct?: ContractsScalarFieldEnum | ContractsScalarFieldEnum[]
  }

  /**
   * contracts findFirstOrThrow
   */
  export type contractsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contracts
     */
    select?: contractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contracts
     */
    omit?: contractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contractsInclude<ExtArgs> | null
    /**
     * Filter, which contracts to fetch.
     */
    where?: contractsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contracts to fetch.
     */
    orderBy?: contractsOrderByWithRelationInput | contractsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contracts.
     */
    cursor?: contractsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contracts.
     */
    distinct?: ContractsScalarFieldEnum | ContractsScalarFieldEnum[]
  }

  /**
   * contracts findMany
   */
  export type contractsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contracts
     */
    select?: contractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contracts
     */
    omit?: contractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contractsInclude<ExtArgs> | null
    /**
     * Filter, which contracts to fetch.
     */
    where?: contractsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contracts to fetch.
     */
    orderBy?: contractsOrderByWithRelationInput | contractsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing contracts.
     */
    cursor?: contractsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contracts.
     */
    skip?: number
    distinct?: ContractsScalarFieldEnum | ContractsScalarFieldEnum[]
  }

  /**
   * contracts create
   */
  export type contractsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contracts
     */
    select?: contractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contracts
     */
    omit?: contractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contractsInclude<ExtArgs> | null
    /**
     * The data needed to create a contracts.
     */
    data?: XOR<contractsCreateInput, contractsUncheckedCreateInput>
  }

  /**
   * contracts createMany
   */
  export type contractsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many contracts.
     */
    data: contractsCreateManyInput | contractsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * contracts update
   */
  export type contractsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contracts
     */
    select?: contractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contracts
     */
    omit?: contractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contractsInclude<ExtArgs> | null
    /**
     * The data needed to update a contracts.
     */
    data: XOR<contractsUpdateInput, contractsUncheckedUpdateInput>
    /**
     * Choose, which contracts to update.
     */
    where: contractsWhereUniqueInput
  }

  /**
   * contracts updateMany
   */
  export type contractsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update contracts.
     */
    data: XOR<contractsUpdateManyMutationInput, contractsUncheckedUpdateManyInput>
    /**
     * Filter which contracts to update
     */
    where?: contractsWhereInput
    /**
     * Limit how many contracts to update.
     */
    limit?: number
  }

  /**
   * contracts upsert
   */
  export type contractsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contracts
     */
    select?: contractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contracts
     */
    omit?: contractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contractsInclude<ExtArgs> | null
    /**
     * The filter to search for the contracts to update in case it exists.
     */
    where: contractsWhereUniqueInput
    /**
     * In case the contracts found by the `where` argument doesn't exist, create a new contracts with this data.
     */
    create: XOR<contractsCreateInput, contractsUncheckedCreateInput>
    /**
     * In case the contracts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<contractsUpdateInput, contractsUncheckedUpdateInput>
  }

  /**
   * contracts delete
   */
  export type contractsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contracts
     */
    select?: contractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contracts
     */
    omit?: contractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contractsInclude<ExtArgs> | null
    /**
     * Filter which contracts to delete.
     */
    where: contractsWhereUniqueInput
  }

  /**
   * contracts deleteMany
   */
  export type contractsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contracts to delete
     */
    where?: contractsWhereInput
    /**
     * Limit how many contracts to delete.
     */
    limit?: number
  }

  /**
   * contracts.suppliers
   */
  export type contracts$suppliersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suppliers
     */
    select?: suppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the suppliers
     */
    omit?: suppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: suppliersInclude<ExtArgs> | null
    where?: suppliersWhereInput
  }

  /**
   * contracts.projects
   */
  export type contracts$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    where?: projectsWhereInput
  }

  /**
   * contracts without action
   */
  export type contractsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contracts
     */
    select?: contractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contracts
     */
    omit?: contractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contractsInclude<ExtArgs> | null
  }


  /**
   * Model costs
   */

  export type AggregateCosts = {
    _count: CostsCountAggregateOutputType | null
    _avg: CostsAvgAggregateOutputType | null
    _sum: CostsSumAggregateOutputType | null
    _min: CostsMinAggregateOutputType | null
    _max: CostsMaxAggregateOutputType | null
  }

  export type CostsAvgAggregateOutputType = {
    id: number | null
    project_id: number | null
    amount: Decimal | null
  }

  export type CostsSumAggregateOutputType = {
    id: number | null
    project_id: number | null
    amount: Decimal | null
  }

  export type CostsMinAggregateOutputType = {
    id: number | null
    project_id: number | null
    description: string | null
    amount: Decimal | null
    date: Date | null
  }

  export type CostsMaxAggregateOutputType = {
    id: number | null
    project_id: number | null
    description: string | null
    amount: Decimal | null
    date: Date | null
  }

  export type CostsCountAggregateOutputType = {
    id: number
    project_id: number
    description: number
    amount: number
    date: number
    _all: number
  }


  export type CostsAvgAggregateInputType = {
    id?: true
    project_id?: true
    amount?: true
  }

  export type CostsSumAggregateInputType = {
    id?: true
    project_id?: true
    amount?: true
  }

  export type CostsMinAggregateInputType = {
    id?: true
    project_id?: true
    description?: true
    amount?: true
    date?: true
  }

  export type CostsMaxAggregateInputType = {
    id?: true
    project_id?: true
    description?: true
    amount?: true
    date?: true
  }

  export type CostsCountAggregateInputType = {
    id?: true
    project_id?: true
    description?: true
    amount?: true
    date?: true
    _all?: true
  }

  export type CostsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which costs to aggregate.
     */
    where?: costsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of costs to fetch.
     */
    orderBy?: costsOrderByWithRelationInput | costsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: costsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` costs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` costs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned costs
    **/
    _count?: true | CostsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CostsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CostsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CostsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CostsMaxAggregateInputType
  }

  export type GetCostsAggregateType<T extends CostsAggregateArgs> = {
        [P in keyof T & keyof AggregateCosts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCosts[P]>
      : GetScalarType<T[P], AggregateCosts[P]>
  }




  export type costsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: costsWhereInput
    orderBy?: costsOrderByWithAggregationInput | costsOrderByWithAggregationInput[]
    by: CostsScalarFieldEnum[] | CostsScalarFieldEnum
    having?: costsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CostsCountAggregateInputType | true
    _avg?: CostsAvgAggregateInputType
    _sum?: CostsSumAggregateInputType
    _min?: CostsMinAggregateInputType
    _max?: CostsMaxAggregateInputType
  }

  export type CostsGroupByOutputType = {
    id: number
    project_id: number
    description: string | null
    amount: Decimal
    date: Date | null
    _count: CostsCountAggregateOutputType | null
    _avg: CostsAvgAggregateOutputType | null
    _sum: CostsSumAggregateOutputType | null
    _min: CostsMinAggregateOutputType | null
    _max: CostsMaxAggregateOutputType | null
  }

  type GetCostsGroupByPayload<T extends costsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CostsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CostsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CostsGroupByOutputType[P]>
            : GetScalarType<T[P], CostsGroupByOutputType[P]>
        }
      >
    >


  export type costsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    project_id?: boolean
    description?: boolean
    amount?: boolean
    date?: boolean
    projects?: boolean | projectsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["costs"]>



  export type costsSelectScalar = {
    id?: boolean
    project_id?: boolean
    description?: boolean
    amount?: boolean
    date?: boolean
  }

  export type costsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "project_id" | "description" | "amount" | "date", ExtArgs["result"]["costs"]>
  export type costsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | projectsDefaultArgs<ExtArgs>
  }

  export type $costsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "costs"
    objects: {
      projects: Prisma.$projectsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      project_id: number
      description: string | null
      amount: Prisma.Decimal
      date: Date | null
    }, ExtArgs["result"]["costs"]>
    composites: {}
  }

  type costsGetPayload<S extends boolean | null | undefined | costsDefaultArgs> = $Result.GetResult<Prisma.$costsPayload, S>

  type costsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<costsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CostsCountAggregateInputType | true
    }

  export interface costsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['costs'], meta: { name: 'costs' } }
    /**
     * Find zero or one Costs that matches the filter.
     * @param {costsFindUniqueArgs} args - Arguments to find a Costs
     * @example
     * // Get one Costs
     * const costs = await prisma.costs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends costsFindUniqueArgs>(args: SelectSubset<T, costsFindUniqueArgs<ExtArgs>>): Prisma__costsClient<$Result.GetResult<Prisma.$costsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Costs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {costsFindUniqueOrThrowArgs} args - Arguments to find a Costs
     * @example
     * // Get one Costs
     * const costs = await prisma.costs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends costsFindUniqueOrThrowArgs>(args: SelectSubset<T, costsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__costsClient<$Result.GetResult<Prisma.$costsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Costs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {costsFindFirstArgs} args - Arguments to find a Costs
     * @example
     * // Get one Costs
     * const costs = await prisma.costs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends costsFindFirstArgs>(args?: SelectSubset<T, costsFindFirstArgs<ExtArgs>>): Prisma__costsClient<$Result.GetResult<Prisma.$costsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Costs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {costsFindFirstOrThrowArgs} args - Arguments to find a Costs
     * @example
     * // Get one Costs
     * const costs = await prisma.costs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends costsFindFirstOrThrowArgs>(args?: SelectSubset<T, costsFindFirstOrThrowArgs<ExtArgs>>): Prisma__costsClient<$Result.GetResult<Prisma.$costsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Costs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {costsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Costs
     * const costs = await prisma.costs.findMany()
     * 
     * // Get first 10 Costs
     * const costs = await prisma.costs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const costsWithIdOnly = await prisma.costs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends costsFindManyArgs>(args?: SelectSubset<T, costsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$costsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Costs.
     * @param {costsCreateArgs} args - Arguments to create a Costs.
     * @example
     * // Create one Costs
     * const Costs = await prisma.costs.create({
     *   data: {
     *     // ... data to create a Costs
     *   }
     * })
     * 
     */
    create<T extends costsCreateArgs>(args: SelectSubset<T, costsCreateArgs<ExtArgs>>): Prisma__costsClient<$Result.GetResult<Prisma.$costsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Costs.
     * @param {costsCreateManyArgs} args - Arguments to create many Costs.
     * @example
     * // Create many Costs
     * const costs = await prisma.costs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends costsCreateManyArgs>(args?: SelectSubset<T, costsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Costs.
     * @param {costsDeleteArgs} args - Arguments to delete one Costs.
     * @example
     * // Delete one Costs
     * const Costs = await prisma.costs.delete({
     *   where: {
     *     // ... filter to delete one Costs
     *   }
     * })
     * 
     */
    delete<T extends costsDeleteArgs>(args: SelectSubset<T, costsDeleteArgs<ExtArgs>>): Prisma__costsClient<$Result.GetResult<Prisma.$costsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Costs.
     * @param {costsUpdateArgs} args - Arguments to update one Costs.
     * @example
     * // Update one Costs
     * const costs = await prisma.costs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends costsUpdateArgs>(args: SelectSubset<T, costsUpdateArgs<ExtArgs>>): Prisma__costsClient<$Result.GetResult<Prisma.$costsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Costs.
     * @param {costsDeleteManyArgs} args - Arguments to filter Costs to delete.
     * @example
     * // Delete a few Costs
     * const { count } = await prisma.costs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends costsDeleteManyArgs>(args?: SelectSubset<T, costsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Costs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {costsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Costs
     * const costs = await prisma.costs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends costsUpdateManyArgs>(args: SelectSubset<T, costsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Costs.
     * @param {costsUpsertArgs} args - Arguments to update or create a Costs.
     * @example
     * // Update or create a Costs
     * const costs = await prisma.costs.upsert({
     *   create: {
     *     // ... data to create a Costs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Costs we want to update
     *   }
     * })
     */
    upsert<T extends costsUpsertArgs>(args: SelectSubset<T, costsUpsertArgs<ExtArgs>>): Prisma__costsClient<$Result.GetResult<Prisma.$costsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Costs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {costsCountArgs} args - Arguments to filter Costs to count.
     * @example
     * // Count the number of Costs
     * const count = await prisma.costs.count({
     *   where: {
     *     // ... the filter for the Costs we want to count
     *   }
     * })
    **/
    count<T extends costsCountArgs>(
      args?: Subset<T, costsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CostsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Costs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CostsAggregateArgs>(args: Subset<T, CostsAggregateArgs>): Prisma.PrismaPromise<GetCostsAggregateType<T>>

    /**
     * Group by Costs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {costsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends costsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: costsGroupByArgs['orderBy'] }
        : { orderBy?: costsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, costsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCostsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the costs model
   */
  readonly fields: costsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for costs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__costsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projects<T extends projectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, projectsDefaultArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the costs model
   */
  interface costsFieldRefs {
    readonly id: FieldRef<"costs", 'Int'>
    readonly project_id: FieldRef<"costs", 'Int'>
    readonly description: FieldRef<"costs", 'String'>
    readonly amount: FieldRef<"costs", 'Decimal'>
    readonly date: FieldRef<"costs", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * costs findUnique
   */
  export type costsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the costs
     */
    select?: costsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the costs
     */
    omit?: costsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: costsInclude<ExtArgs> | null
    /**
     * Filter, which costs to fetch.
     */
    where: costsWhereUniqueInput
  }

  /**
   * costs findUniqueOrThrow
   */
  export type costsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the costs
     */
    select?: costsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the costs
     */
    omit?: costsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: costsInclude<ExtArgs> | null
    /**
     * Filter, which costs to fetch.
     */
    where: costsWhereUniqueInput
  }

  /**
   * costs findFirst
   */
  export type costsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the costs
     */
    select?: costsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the costs
     */
    omit?: costsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: costsInclude<ExtArgs> | null
    /**
     * Filter, which costs to fetch.
     */
    where?: costsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of costs to fetch.
     */
    orderBy?: costsOrderByWithRelationInput | costsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for costs.
     */
    cursor?: costsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` costs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` costs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of costs.
     */
    distinct?: CostsScalarFieldEnum | CostsScalarFieldEnum[]
  }

  /**
   * costs findFirstOrThrow
   */
  export type costsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the costs
     */
    select?: costsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the costs
     */
    omit?: costsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: costsInclude<ExtArgs> | null
    /**
     * Filter, which costs to fetch.
     */
    where?: costsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of costs to fetch.
     */
    orderBy?: costsOrderByWithRelationInput | costsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for costs.
     */
    cursor?: costsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` costs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` costs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of costs.
     */
    distinct?: CostsScalarFieldEnum | CostsScalarFieldEnum[]
  }

  /**
   * costs findMany
   */
  export type costsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the costs
     */
    select?: costsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the costs
     */
    omit?: costsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: costsInclude<ExtArgs> | null
    /**
     * Filter, which costs to fetch.
     */
    where?: costsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of costs to fetch.
     */
    orderBy?: costsOrderByWithRelationInput | costsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing costs.
     */
    cursor?: costsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` costs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` costs.
     */
    skip?: number
    distinct?: CostsScalarFieldEnum | CostsScalarFieldEnum[]
  }

  /**
   * costs create
   */
  export type costsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the costs
     */
    select?: costsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the costs
     */
    omit?: costsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: costsInclude<ExtArgs> | null
    /**
     * The data needed to create a costs.
     */
    data: XOR<costsCreateInput, costsUncheckedCreateInput>
  }

  /**
   * costs createMany
   */
  export type costsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many costs.
     */
    data: costsCreateManyInput | costsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * costs update
   */
  export type costsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the costs
     */
    select?: costsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the costs
     */
    omit?: costsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: costsInclude<ExtArgs> | null
    /**
     * The data needed to update a costs.
     */
    data: XOR<costsUpdateInput, costsUncheckedUpdateInput>
    /**
     * Choose, which costs to update.
     */
    where: costsWhereUniqueInput
  }

  /**
   * costs updateMany
   */
  export type costsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update costs.
     */
    data: XOR<costsUpdateManyMutationInput, costsUncheckedUpdateManyInput>
    /**
     * Filter which costs to update
     */
    where?: costsWhereInput
    /**
     * Limit how many costs to update.
     */
    limit?: number
  }

  /**
   * costs upsert
   */
  export type costsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the costs
     */
    select?: costsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the costs
     */
    omit?: costsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: costsInclude<ExtArgs> | null
    /**
     * The filter to search for the costs to update in case it exists.
     */
    where: costsWhereUniqueInput
    /**
     * In case the costs found by the `where` argument doesn't exist, create a new costs with this data.
     */
    create: XOR<costsCreateInput, costsUncheckedCreateInput>
    /**
     * In case the costs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<costsUpdateInput, costsUncheckedUpdateInput>
  }

  /**
   * costs delete
   */
  export type costsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the costs
     */
    select?: costsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the costs
     */
    omit?: costsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: costsInclude<ExtArgs> | null
    /**
     * Filter which costs to delete.
     */
    where: costsWhereUniqueInput
  }

  /**
   * costs deleteMany
   */
  export type costsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which costs to delete
     */
    where?: costsWhereInput
    /**
     * Limit how many costs to delete.
     */
    limit?: number
  }

  /**
   * costs without action
   */
  export type costsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the costs
     */
    select?: costsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the costs
     */
    omit?: costsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: costsInclude<ExtArgs> | null
  }


  /**
   * Model documents
   */

  export type AggregateDocuments = {
    _count: DocumentsCountAggregateOutputType | null
    _avg: DocumentsAvgAggregateOutputType | null
    _sum: DocumentsSumAggregateOutputType | null
    _min: DocumentsMinAggregateOutputType | null
    _max: DocumentsMaxAggregateOutputType | null
  }

  export type DocumentsAvgAggregateOutputType = {
    id: number | null
    project_id: number | null
    created_by: number | null
  }

  export type DocumentsSumAggregateOutputType = {
    id: number | null
    project_id: number | null
    created_by: number | null
  }

  export type DocumentsMinAggregateOutputType = {
    id: number | null
    project_id: number | null
    name: string | null
    content: string | null
    type: $Enums.documents_type | null
    created_by: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type DocumentsMaxAggregateOutputType = {
    id: number | null
    project_id: number | null
    name: string | null
    content: string | null
    type: $Enums.documents_type | null
    created_by: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type DocumentsCountAggregateOutputType = {
    id: number
    project_id: number
    name: number
    content: number
    type: number
    created_by: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type DocumentsAvgAggregateInputType = {
    id?: true
    project_id?: true
    created_by?: true
  }

  export type DocumentsSumAggregateInputType = {
    id?: true
    project_id?: true
    created_by?: true
  }

  export type DocumentsMinAggregateInputType = {
    id?: true
    project_id?: true
    name?: true
    content?: true
    type?: true
    created_by?: true
    created_at?: true
    updated_at?: true
  }

  export type DocumentsMaxAggregateInputType = {
    id?: true
    project_id?: true
    name?: true
    content?: true
    type?: true
    created_by?: true
    created_at?: true
    updated_at?: true
  }

  export type DocumentsCountAggregateInputType = {
    id?: true
    project_id?: true
    name?: true
    content?: true
    type?: true
    created_by?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type DocumentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which documents to aggregate.
     */
    where?: documentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of documents to fetch.
     */
    orderBy?: documentsOrderByWithRelationInput | documentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: documentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned documents
    **/
    _count?: true | DocumentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentsMaxAggregateInputType
  }

  export type GetDocumentsAggregateType<T extends DocumentsAggregateArgs> = {
        [P in keyof T & keyof AggregateDocuments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocuments[P]>
      : GetScalarType<T[P], AggregateDocuments[P]>
  }




  export type documentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: documentsWhereInput
    orderBy?: documentsOrderByWithAggregationInput | documentsOrderByWithAggregationInput[]
    by: DocumentsScalarFieldEnum[] | DocumentsScalarFieldEnum
    having?: documentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentsCountAggregateInputType | true
    _avg?: DocumentsAvgAggregateInputType
    _sum?: DocumentsSumAggregateInputType
    _min?: DocumentsMinAggregateInputType
    _max?: DocumentsMaxAggregateInputType
  }

  export type DocumentsGroupByOutputType = {
    id: number
    project_id: number | null
    name: string
    content: string | null
    type: $Enums.documents_type | null
    created_by: number | null
    created_at: Date | null
    updated_at: Date | null
    _count: DocumentsCountAggregateOutputType | null
    _avg: DocumentsAvgAggregateOutputType | null
    _sum: DocumentsSumAggregateOutputType | null
    _min: DocumentsMinAggregateOutputType | null
    _max: DocumentsMaxAggregateOutputType | null
  }

  type GetDocumentsGroupByPayload<T extends documentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentsGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentsGroupByOutputType[P]>
        }
      >
    >


  export type documentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    project_id?: boolean
    name?: boolean
    content?: boolean
    type?: boolean
    created_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    projects?: boolean | documents$projectsArgs<ExtArgs>
    users?: boolean | documents$usersArgs<ExtArgs>
  }, ExtArgs["result"]["documents"]>



  export type documentsSelectScalar = {
    id?: boolean
    project_id?: boolean
    name?: boolean
    content?: boolean
    type?: boolean
    created_by?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type documentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "project_id" | "name" | "content" | "type" | "created_by" | "created_at" | "updated_at", ExtArgs["result"]["documents"]>
  export type documentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | documents$projectsArgs<ExtArgs>
    users?: boolean | documents$usersArgs<ExtArgs>
  }

  export type $documentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "documents"
    objects: {
      projects: Prisma.$projectsPayload<ExtArgs> | null
      users: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      project_id: number | null
      name: string
      content: string | null
      type: $Enums.documents_type | null
      created_by: number | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["documents"]>
    composites: {}
  }

  type documentsGetPayload<S extends boolean | null | undefined | documentsDefaultArgs> = $Result.GetResult<Prisma.$documentsPayload, S>

  type documentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<documentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentsCountAggregateInputType | true
    }

  export interface documentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['documents'], meta: { name: 'documents' } }
    /**
     * Find zero or one Documents that matches the filter.
     * @param {documentsFindUniqueArgs} args - Arguments to find a Documents
     * @example
     * // Get one Documents
     * const documents = await prisma.documents.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends documentsFindUniqueArgs>(args: SelectSubset<T, documentsFindUniqueArgs<ExtArgs>>): Prisma__documentsClient<$Result.GetResult<Prisma.$documentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Documents that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {documentsFindUniqueOrThrowArgs} args - Arguments to find a Documents
     * @example
     * // Get one Documents
     * const documents = await prisma.documents.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends documentsFindUniqueOrThrowArgs>(args: SelectSubset<T, documentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__documentsClient<$Result.GetResult<Prisma.$documentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentsFindFirstArgs} args - Arguments to find a Documents
     * @example
     * // Get one Documents
     * const documents = await prisma.documents.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends documentsFindFirstArgs>(args?: SelectSubset<T, documentsFindFirstArgs<ExtArgs>>): Prisma__documentsClient<$Result.GetResult<Prisma.$documentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Documents that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentsFindFirstOrThrowArgs} args - Arguments to find a Documents
     * @example
     * // Get one Documents
     * const documents = await prisma.documents.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends documentsFindFirstOrThrowArgs>(args?: SelectSubset<T, documentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__documentsClient<$Result.GetResult<Prisma.$documentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.documents.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.documents.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentsWithIdOnly = await prisma.documents.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends documentsFindManyArgs>(args?: SelectSubset<T, documentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$documentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Documents.
     * @param {documentsCreateArgs} args - Arguments to create a Documents.
     * @example
     * // Create one Documents
     * const Documents = await prisma.documents.create({
     *   data: {
     *     // ... data to create a Documents
     *   }
     * })
     * 
     */
    create<T extends documentsCreateArgs>(args: SelectSubset<T, documentsCreateArgs<ExtArgs>>): Prisma__documentsClient<$Result.GetResult<Prisma.$documentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Documents.
     * @param {documentsCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const documents = await prisma.documents.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends documentsCreateManyArgs>(args?: SelectSubset<T, documentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Documents.
     * @param {documentsDeleteArgs} args - Arguments to delete one Documents.
     * @example
     * // Delete one Documents
     * const Documents = await prisma.documents.delete({
     *   where: {
     *     // ... filter to delete one Documents
     *   }
     * })
     * 
     */
    delete<T extends documentsDeleteArgs>(args: SelectSubset<T, documentsDeleteArgs<ExtArgs>>): Prisma__documentsClient<$Result.GetResult<Prisma.$documentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Documents.
     * @param {documentsUpdateArgs} args - Arguments to update one Documents.
     * @example
     * // Update one Documents
     * const documents = await prisma.documents.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends documentsUpdateArgs>(args: SelectSubset<T, documentsUpdateArgs<ExtArgs>>): Prisma__documentsClient<$Result.GetResult<Prisma.$documentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Documents.
     * @param {documentsDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.documents.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends documentsDeleteManyArgs>(args?: SelectSubset<T, documentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const documents = await prisma.documents.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends documentsUpdateManyArgs>(args: SelectSubset<T, documentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Documents.
     * @param {documentsUpsertArgs} args - Arguments to update or create a Documents.
     * @example
     * // Update or create a Documents
     * const documents = await prisma.documents.upsert({
     *   create: {
     *     // ... data to create a Documents
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Documents we want to update
     *   }
     * })
     */
    upsert<T extends documentsUpsertArgs>(args: SelectSubset<T, documentsUpsertArgs<ExtArgs>>): Prisma__documentsClient<$Result.GetResult<Prisma.$documentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentsCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.documents.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends documentsCountArgs>(
      args?: Subset<T, documentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentsAggregateArgs>(args: Subset<T, DocumentsAggregateArgs>): Prisma.PrismaPromise<GetDocumentsAggregateType<T>>

    /**
     * Group by Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends documentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: documentsGroupByArgs['orderBy'] }
        : { orderBy?: documentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, documentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the documents model
   */
  readonly fields: documentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for documents.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__documentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projects<T extends documents$projectsArgs<ExtArgs> = {}>(args?: Subset<T, documents$projectsArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    users<T extends documents$usersArgs<ExtArgs> = {}>(args?: Subset<T, documents$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the documents model
   */
  interface documentsFieldRefs {
    readonly id: FieldRef<"documents", 'Int'>
    readonly project_id: FieldRef<"documents", 'Int'>
    readonly name: FieldRef<"documents", 'String'>
    readonly content: FieldRef<"documents", 'String'>
    readonly type: FieldRef<"documents", 'documents_type'>
    readonly created_by: FieldRef<"documents", 'Int'>
    readonly created_at: FieldRef<"documents", 'DateTime'>
    readonly updated_at: FieldRef<"documents", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * documents findUnique
   */
  export type documentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documents
     */
    select?: documentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documents
     */
    omit?: documentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentsInclude<ExtArgs> | null
    /**
     * Filter, which documents to fetch.
     */
    where: documentsWhereUniqueInput
  }

  /**
   * documents findUniqueOrThrow
   */
  export type documentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documents
     */
    select?: documentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documents
     */
    omit?: documentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentsInclude<ExtArgs> | null
    /**
     * Filter, which documents to fetch.
     */
    where: documentsWhereUniqueInput
  }

  /**
   * documents findFirst
   */
  export type documentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documents
     */
    select?: documentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documents
     */
    omit?: documentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentsInclude<ExtArgs> | null
    /**
     * Filter, which documents to fetch.
     */
    where?: documentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of documents to fetch.
     */
    orderBy?: documentsOrderByWithRelationInput | documentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for documents.
     */
    cursor?: documentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of documents.
     */
    distinct?: DocumentsScalarFieldEnum | DocumentsScalarFieldEnum[]
  }

  /**
   * documents findFirstOrThrow
   */
  export type documentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documents
     */
    select?: documentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documents
     */
    omit?: documentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentsInclude<ExtArgs> | null
    /**
     * Filter, which documents to fetch.
     */
    where?: documentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of documents to fetch.
     */
    orderBy?: documentsOrderByWithRelationInput | documentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for documents.
     */
    cursor?: documentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of documents.
     */
    distinct?: DocumentsScalarFieldEnum | DocumentsScalarFieldEnum[]
  }

  /**
   * documents findMany
   */
  export type documentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documents
     */
    select?: documentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documents
     */
    omit?: documentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentsInclude<ExtArgs> | null
    /**
     * Filter, which documents to fetch.
     */
    where?: documentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of documents to fetch.
     */
    orderBy?: documentsOrderByWithRelationInput | documentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing documents.
     */
    cursor?: documentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` documents.
     */
    skip?: number
    distinct?: DocumentsScalarFieldEnum | DocumentsScalarFieldEnum[]
  }

  /**
   * documents create
   */
  export type documentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documents
     */
    select?: documentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documents
     */
    omit?: documentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentsInclude<ExtArgs> | null
    /**
     * The data needed to create a documents.
     */
    data: XOR<documentsCreateInput, documentsUncheckedCreateInput>
  }

  /**
   * documents createMany
   */
  export type documentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many documents.
     */
    data: documentsCreateManyInput | documentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * documents update
   */
  export type documentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documents
     */
    select?: documentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documents
     */
    omit?: documentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentsInclude<ExtArgs> | null
    /**
     * The data needed to update a documents.
     */
    data: XOR<documentsUpdateInput, documentsUncheckedUpdateInput>
    /**
     * Choose, which documents to update.
     */
    where: documentsWhereUniqueInput
  }

  /**
   * documents updateMany
   */
  export type documentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update documents.
     */
    data: XOR<documentsUpdateManyMutationInput, documentsUncheckedUpdateManyInput>
    /**
     * Filter which documents to update
     */
    where?: documentsWhereInput
    /**
     * Limit how many documents to update.
     */
    limit?: number
  }

  /**
   * documents upsert
   */
  export type documentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documents
     */
    select?: documentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documents
     */
    omit?: documentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentsInclude<ExtArgs> | null
    /**
     * The filter to search for the documents to update in case it exists.
     */
    where: documentsWhereUniqueInput
    /**
     * In case the documents found by the `where` argument doesn't exist, create a new documents with this data.
     */
    create: XOR<documentsCreateInput, documentsUncheckedCreateInput>
    /**
     * In case the documents was found with the provided `where` argument, update it with this data.
     */
    update: XOR<documentsUpdateInput, documentsUncheckedUpdateInput>
  }

  /**
   * documents delete
   */
  export type documentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documents
     */
    select?: documentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documents
     */
    omit?: documentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentsInclude<ExtArgs> | null
    /**
     * Filter which documents to delete.
     */
    where: documentsWhereUniqueInput
  }

  /**
   * documents deleteMany
   */
  export type documentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which documents to delete
     */
    where?: documentsWhereInput
    /**
     * Limit how many documents to delete.
     */
    limit?: number
  }

  /**
   * documents.projects
   */
  export type documents$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    where?: projectsWhereInput
  }

  /**
   * documents.users
   */
  export type documents$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * documents without action
   */
  export type documentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documents
     */
    select?: documentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documents
     */
    omit?: documentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentsInclude<ExtArgs> | null
  }


  /**
   * Model events
   */

  export type AggregateEvents = {
    _count: EventsCountAggregateOutputType | null
    _avg: EventsAvgAggregateOutputType | null
    _sum: EventsSumAggregateOutputType | null
    _min: EventsMinAggregateOutputType | null
    _max: EventsMaxAggregateOutputType | null
  }

  export type EventsAvgAggregateOutputType = {
    id: number | null
    project_id: number | null
  }

  export type EventsSumAggregateOutputType = {
    id: number | null
    project_id: number | null
  }

  export type EventsMinAggregateOutputType = {
    id: number | null
    project_id: number | null
    name: string | null
    description: string | null
    start_datetime: Date | null
    end_datetime: Date | null
    type: $Enums.events_type | null
  }

  export type EventsMaxAggregateOutputType = {
    id: number | null
    project_id: number | null
    name: string | null
    description: string | null
    start_datetime: Date | null
    end_datetime: Date | null
    type: $Enums.events_type | null
  }

  export type EventsCountAggregateOutputType = {
    id: number
    project_id: number
    name: number
    description: number
    start_datetime: number
    end_datetime: number
    type: number
    _all: number
  }


  export type EventsAvgAggregateInputType = {
    id?: true
    project_id?: true
  }

  export type EventsSumAggregateInputType = {
    id?: true
    project_id?: true
  }

  export type EventsMinAggregateInputType = {
    id?: true
    project_id?: true
    name?: true
    description?: true
    start_datetime?: true
    end_datetime?: true
    type?: true
  }

  export type EventsMaxAggregateInputType = {
    id?: true
    project_id?: true
    name?: true
    description?: true
    start_datetime?: true
    end_datetime?: true
    type?: true
  }

  export type EventsCountAggregateInputType = {
    id?: true
    project_id?: true
    name?: true
    description?: true
    start_datetime?: true
    end_datetime?: true
    type?: true
    _all?: true
  }

  export type EventsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which events to aggregate.
     */
    where?: eventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of events to fetch.
     */
    orderBy?: eventsOrderByWithRelationInput | eventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: eventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned events
    **/
    _count?: true | EventsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventsMaxAggregateInputType
  }

  export type GetEventsAggregateType<T extends EventsAggregateArgs> = {
        [P in keyof T & keyof AggregateEvents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvents[P]>
      : GetScalarType<T[P], AggregateEvents[P]>
  }




  export type eventsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: eventsWhereInput
    orderBy?: eventsOrderByWithAggregationInput | eventsOrderByWithAggregationInput[]
    by: EventsScalarFieldEnum[] | EventsScalarFieldEnum
    having?: eventsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventsCountAggregateInputType | true
    _avg?: EventsAvgAggregateInputType
    _sum?: EventsSumAggregateInputType
    _min?: EventsMinAggregateInputType
    _max?: EventsMaxAggregateInputType
  }

  export type EventsGroupByOutputType = {
    id: number
    project_id: number | null
    name: string
    description: string | null
    start_datetime: Date | null
    end_datetime: Date | null
    type: $Enums.events_type | null
    _count: EventsCountAggregateOutputType | null
    _avg: EventsAvgAggregateOutputType | null
    _sum: EventsSumAggregateOutputType | null
    _min: EventsMinAggregateOutputType | null
    _max: EventsMaxAggregateOutputType | null
  }

  type GetEventsGroupByPayload<T extends eventsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventsGroupByOutputType[P]>
            : GetScalarType<T[P], EventsGroupByOutputType[P]>
        }
      >
    >


  export type eventsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    project_id?: boolean
    name?: boolean
    description?: boolean
    start_datetime?: boolean
    end_datetime?: boolean
    type?: boolean
    projects?: boolean | events$projectsArgs<ExtArgs>
  }, ExtArgs["result"]["events"]>



  export type eventsSelectScalar = {
    id?: boolean
    project_id?: boolean
    name?: boolean
    description?: boolean
    start_datetime?: boolean
    end_datetime?: boolean
    type?: boolean
  }

  export type eventsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "project_id" | "name" | "description" | "start_datetime" | "end_datetime" | "type", ExtArgs["result"]["events"]>
  export type eventsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | events$projectsArgs<ExtArgs>
  }

  export type $eventsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "events"
    objects: {
      projects: Prisma.$projectsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      project_id: number | null
      name: string
      description: string | null
      start_datetime: Date | null
      end_datetime: Date | null
      type: $Enums.events_type | null
    }, ExtArgs["result"]["events"]>
    composites: {}
  }

  type eventsGetPayload<S extends boolean | null | undefined | eventsDefaultArgs> = $Result.GetResult<Prisma.$eventsPayload, S>

  type eventsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<eventsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventsCountAggregateInputType | true
    }

  export interface eventsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['events'], meta: { name: 'events' } }
    /**
     * Find zero or one Events that matches the filter.
     * @param {eventsFindUniqueArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends eventsFindUniqueArgs>(args: SelectSubset<T, eventsFindUniqueArgs<ExtArgs>>): Prisma__eventsClient<$Result.GetResult<Prisma.$eventsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Events that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {eventsFindUniqueOrThrowArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends eventsFindUniqueOrThrowArgs>(args: SelectSubset<T, eventsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__eventsClient<$Result.GetResult<Prisma.$eventsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventsFindFirstArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends eventsFindFirstArgs>(args?: SelectSubset<T, eventsFindFirstArgs<ExtArgs>>): Prisma__eventsClient<$Result.GetResult<Prisma.$eventsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Events that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventsFindFirstOrThrowArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends eventsFindFirstOrThrowArgs>(args?: SelectSubset<T, eventsFindFirstOrThrowArgs<ExtArgs>>): Prisma__eventsClient<$Result.GetResult<Prisma.$eventsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.events.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.events.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventsWithIdOnly = await prisma.events.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends eventsFindManyArgs>(args?: SelectSubset<T, eventsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$eventsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Events.
     * @param {eventsCreateArgs} args - Arguments to create a Events.
     * @example
     * // Create one Events
     * const Events = await prisma.events.create({
     *   data: {
     *     // ... data to create a Events
     *   }
     * })
     * 
     */
    create<T extends eventsCreateArgs>(args: SelectSubset<T, eventsCreateArgs<ExtArgs>>): Prisma__eventsClient<$Result.GetResult<Prisma.$eventsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Events.
     * @param {eventsCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const events = await prisma.events.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends eventsCreateManyArgs>(args?: SelectSubset<T, eventsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Events.
     * @param {eventsDeleteArgs} args - Arguments to delete one Events.
     * @example
     * // Delete one Events
     * const Events = await prisma.events.delete({
     *   where: {
     *     // ... filter to delete one Events
     *   }
     * })
     * 
     */
    delete<T extends eventsDeleteArgs>(args: SelectSubset<T, eventsDeleteArgs<ExtArgs>>): Prisma__eventsClient<$Result.GetResult<Prisma.$eventsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Events.
     * @param {eventsUpdateArgs} args - Arguments to update one Events.
     * @example
     * // Update one Events
     * const events = await prisma.events.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends eventsUpdateArgs>(args: SelectSubset<T, eventsUpdateArgs<ExtArgs>>): Prisma__eventsClient<$Result.GetResult<Prisma.$eventsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Events.
     * @param {eventsDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.events.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends eventsDeleteManyArgs>(args?: SelectSubset<T, eventsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const events = await prisma.events.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends eventsUpdateManyArgs>(args: SelectSubset<T, eventsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Events.
     * @param {eventsUpsertArgs} args - Arguments to update or create a Events.
     * @example
     * // Update or create a Events
     * const events = await prisma.events.upsert({
     *   create: {
     *     // ... data to create a Events
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Events we want to update
     *   }
     * })
     */
    upsert<T extends eventsUpsertArgs>(args: SelectSubset<T, eventsUpsertArgs<ExtArgs>>): Prisma__eventsClient<$Result.GetResult<Prisma.$eventsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventsCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.events.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends eventsCountArgs>(
      args?: Subset<T, eventsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventsAggregateArgs>(args: Subset<T, EventsAggregateArgs>): Prisma.PrismaPromise<GetEventsAggregateType<T>>

    /**
     * Group by Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends eventsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: eventsGroupByArgs['orderBy'] }
        : { orderBy?: eventsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, eventsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the events model
   */
  readonly fields: eventsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for events.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__eventsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projects<T extends events$projectsArgs<ExtArgs> = {}>(args?: Subset<T, events$projectsArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the events model
   */
  interface eventsFieldRefs {
    readonly id: FieldRef<"events", 'Int'>
    readonly project_id: FieldRef<"events", 'Int'>
    readonly name: FieldRef<"events", 'String'>
    readonly description: FieldRef<"events", 'String'>
    readonly start_datetime: FieldRef<"events", 'DateTime'>
    readonly end_datetime: FieldRef<"events", 'DateTime'>
    readonly type: FieldRef<"events", 'events_type'>
  }
    

  // Custom InputTypes
  /**
   * events findUnique
   */
  export type eventsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the events
     */
    select?: eventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the events
     */
    omit?: eventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventsInclude<ExtArgs> | null
    /**
     * Filter, which events to fetch.
     */
    where: eventsWhereUniqueInput
  }

  /**
   * events findUniqueOrThrow
   */
  export type eventsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the events
     */
    select?: eventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the events
     */
    omit?: eventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventsInclude<ExtArgs> | null
    /**
     * Filter, which events to fetch.
     */
    where: eventsWhereUniqueInput
  }

  /**
   * events findFirst
   */
  export type eventsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the events
     */
    select?: eventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the events
     */
    omit?: eventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventsInclude<ExtArgs> | null
    /**
     * Filter, which events to fetch.
     */
    where?: eventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of events to fetch.
     */
    orderBy?: eventsOrderByWithRelationInput | eventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for events.
     */
    cursor?: eventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of events.
     */
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }

  /**
   * events findFirstOrThrow
   */
  export type eventsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the events
     */
    select?: eventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the events
     */
    omit?: eventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventsInclude<ExtArgs> | null
    /**
     * Filter, which events to fetch.
     */
    where?: eventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of events to fetch.
     */
    orderBy?: eventsOrderByWithRelationInput | eventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for events.
     */
    cursor?: eventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of events.
     */
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }

  /**
   * events findMany
   */
  export type eventsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the events
     */
    select?: eventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the events
     */
    omit?: eventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventsInclude<ExtArgs> | null
    /**
     * Filter, which events to fetch.
     */
    where?: eventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of events to fetch.
     */
    orderBy?: eventsOrderByWithRelationInput | eventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing events.
     */
    cursor?: eventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` events.
     */
    skip?: number
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }

  /**
   * events create
   */
  export type eventsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the events
     */
    select?: eventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the events
     */
    omit?: eventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventsInclude<ExtArgs> | null
    /**
     * The data needed to create a events.
     */
    data: XOR<eventsCreateInput, eventsUncheckedCreateInput>
  }

  /**
   * events createMany
   */
  export type eventsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many events.
     */
    data: eventsCreateManyInput | eventsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * events update
   */
  export type eventsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the events
     */
    select?: eventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the events
     */
    omit?: eventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventsInclude<ExtArgs> | null
    /**
     * The data needed to update a events.
     */
    data: XOR<eventsUpdateInput, eventsUncheckedUpdateInput>
    /**
     * Choose, which events to update.
     */
    where: eventsWhereUniqueInput
  }

  /**
   * events updateMany
   */
  export type eventsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update events.
     */
    data: XOR<eventsUpdateManyMutationInput, eventsUncheckedUpdateManyInput>
    /**
     * Filter which events to update
     */
    where?: eventsWhereInput
    /**
     * Limit how many events to update.
     */
    limit?: number
  }

  /**
   * events upsert
   */
  export type eventsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the events
     */
    select?: eventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the events
     */
    omit?: eventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventsInclude<ExtArgs> | null
    /**
     * The filter to search for the events to update in case it exists.
     */
    where: eventsWhereUniqueInput
    /**
     * In case the events found by the `where` argument doesn't exist, create a new events with this data.
     */
    create: XOR<eventsCreateInput, eventsUncheckedCreateInput>
    /**
     * In case the events was found with the provided `where` argument, update it with this data.
     */
    update: XOR<eventsUpdateInput, eventsUncheckedUpdateInput>
  }

  /**
   * events delete
   */
  export type eventsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the events
     */
    select?: eventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the events
     */
    omit?: eventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventsInclude<ExtArgs> | null
    /**
     * Filter which events to delete.
     */
    where: eventsWhereUniqueInput
  }

  /**
   * events deleteMany
   */
  export type eventsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which events to delete
     */
    where?: eventsWhereInput
    /**
     * Limit how many events to delete.
     */
    limit?: number
  }

  /**
   * events.projects
   */
  export type events$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    where?: projectsWhereInput
  }

  /**
   * events without action
   */
  export type eventsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the events
     */
    select?: eventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the events
     */
    omit?: eventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventsInclude<ExtArgs> | null
  }


  /**
   * Model hr_records
   */

  export type AggregateHr_records = {
    _count: Hr_recordsCountAggregateOutputType | null
    _avg: Hr_recordsAvgAggregateOutputType | null
    _sum: Hr_recordsSumAggregateOutputType | null
    _min: Hr_recordsMinAggregateOutputType | null
    _max: Hr_recordsMaxAggregateOutputType | null
  }

  export type Hr_recordsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type Hr_recordsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type Hr_recordsMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    type: $Enums.hr_records_type | null
    details: string | null
    date: Date | null
  }

  export type Hr_recordsMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    type: $Enums.hr_records_type | null
    details: string | null
    date: Date | null
  }

  export type Hr_recordsCountAggregateOutputType = {
    id: number
    user_id: number
    type: number
    details: number
    date: number
    _all: number
  }


  export type Hr_recordsAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type Hr_recordsSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type Hr_recordsMinAggregateInputType = {
    id?: true
    user_id?: true
    type?: true
    details?: true
    date?: true
  }

  export type Hr_recordsMaxAggregateInputType = {
    id?: true
    user_id?: true
    type?: true
    details?: true
    date?: true
  }

  export type Hr_recordsCountAggregateInputType = {
    id?: true
    user_id?: true
    type?: true
    details?: true
    date?: true
    _all?: true
  }

  export type Hr_recordsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which hr_records to aggregate.
     */
    where?: hr_recordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hr_records to fetch.
     */
    orderBy?: hr_recordsOrderByWithRelationInput | hr_recordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: hr_recordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hr_records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hr_records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned hr_records
    **/
    _count?: true | Hr_recordsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Hr_recordsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Hr_recordsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Hr_recordsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Hr_recordsMaxAggregateInputType
  }

  export type GetHr_recordsAggregateType<T extends Hr_recordsAggregateArgs> = {
        [P in keyof T & keyof AggregateHr_records]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHr_records[P]>
      : GetScalarType<T[P], AggregateHr_records[P]>
  }




  export type hr_recordsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: hr_recordsWhereInput
    orderBy?: hr_recordsOrderByWithAggregationInput | hr_recordsOrderByWithAggregationInput[]
    by: Hr_recordsScalarFieldEnum[] | Hr_recordsScalarFieldEnum
    having?: hr_recordsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Hr_recordsCountAggregateInputType | true
    _avg?: Hr_recordsAvgAggregateInputType
    _sum?: Hr_recordsSumAggregateInputType
    _min?: Hr_recordsMinAggregateInputType
    _max?: Hr_recordsMaxAggregateInputType
  }

  export type Hr_recordsGroupByOutputType = {
    id: number
    user_id: number
    type: $Enums.hr_records_type | null
    details: string | null
    date: Date | null
    _count: Hr_recordsCountAggregateOutputType | null
    _avg: Hr_recordsAvgAggregateOutputType | null
    _sum: Hr_recordsSumAggregateOutputType | null
    _min: Hr_recordsMinAggregateOutputType | null
    _max: Hr_recordsMaxAggregateOutputType | null
  }

  type GetHr_recordsGroupByPayload<T extends hr_recordsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Hr_recordsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Hr_recordsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Hr_recordsGroupByOutputType[P]>
            : GetScalarType<T[P], Hr_recordsGroupByOutputType[P]>
        }
      >
    >


  export type hr_recordsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    type?: boolean
    details?: boolean
    date?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hr_records"]>



  export type hr_recordsSelectScalar = {
    id?: boolean
    user_id?: boolean
    type?: boolean
    details?: boolean
    date?: boolean
  }

  export type hr_recordsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "type" | "details" | "date", ExtArgs["result"]["hr_records"]>
  export type hr_recordsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $hr_recordsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "hr_records"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      type: $Enums.hr_records_type | null
      details: string | null
      date: Date | null
    }, ExtArgs["result"]["hr_records"]>
    composites: {}
  }

  type hr_recordsGetPayload<S extends boolean | null | undefined | hr_recordsDefaultArgs> = $Result.GetResult<Prisma.$hr_recordsPayload, S>

  type hr_recordsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<hr_recordsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Hr_recordsCountAggregateInputType | true
    }

  export interface hr_recordsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['hr_records'], meta: { name: 'hr_records' } }
    /**
     * Find zero or one Hr_records that matches the filter.
     * @param {hr_recordsFindUniqueArgs} args - Arguments to find a Hr_records
     * @example
     * // Get one Hr_records
     * const hr_records = await prisma.hr_records.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends hr_recordsFindUniqueArgs>(args: SelectSubset<T, hr_recordsFindUniqueArgs<ExtArgs>>): Prisma__hr_recordsClient<$Result.GetResult<Prisma.$hr_recordsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Hr_records that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {hr_recordsFindUniqueOrThrowArgs} args - Arguments to find a Hr_records
     * @example
     * // Get one Hr_records
     * const hr_records = await prisma.hr_records.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends hr_recordsFindUniqueOrThrowArgs>(args: SelectSubset<T, hr_recordsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__hr_recordsClient<$Result.GetResult<Prisma.$hr_recordsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Hr_records that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hr_recordsFindFirstArgs} args - Arguments to find a Hr_records
     * @example
     * // Get one Hr_records
     * const hr_records = await prisma.hr_records.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends hr_recordsFindFirstArgs>(args?: SelectSubset<T, hr_recordsFindFirstArgs<ExtArgs>>): Prisma__hr_recordsClient<$Result.GetResult<Prisma.$hr_recordsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Hr_records that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hr_recordsFindFirstOrThrowArgs} args - Arguments to find a Hr_records
     * @example
     * // Get one Hr_records
     * const hr_records = await prisma.hr_records.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends hr_recordsFindFirstOrThrowArgs>(args?: SelectSubset<T, hr_recordsFindFirstOrThrowArgs<ExtArgs>>): Prisma__hr_recordsClient<$Result.GetResult<Prisma.$hr_recordsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Hr_records that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hr_recordsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hr_records
     * const hr_records = await prisma.hr_records.findMany()
     * 
     * // Get first 10 Hr_records
     * const hr_records = await prisma.hr_records.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hr_recordsWithIdOnly = await prisma.hr_records.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends hr_recordsFindManyArgs>(args?: SelectSubset<T, hr_recordsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$hr_recordsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Hr_records.
     * @param {hr_recordsCreateArgs} args - Arguments to create a Hr_records.
     * @example
     * // Create one Hr_records
     * const Hr_records = await prisma.hr_records.create({
     *   data: {
     *     // ... data to create a Hr_records
     *   }
     * })
     * 
     */
    create<T extends hr_recordsCreateArgs>(args: SelectSubset<T, hr_recordsCreateArgs<ExtArgs>>): Prisma__hr_recordsClient<$Result.GetResult<Prisma.$hr_recordsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Hr_records.
     * @param {hr_recordsCreateManyArgs} args - Arguments to create many Hr_records.
     * @example
     * // Create many Hr_records
     * const hr_records = await prisma.hr_records.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends hr_recordsCreateManyArgs>(args?: SelectSubset<T, hr_recordsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Hr_records.
     * @param {hr_recordsDeleteArgs} args - Arguments to delete one Hr_records.
     * @example
     * // Delete one Hr_records
     * const Hr_records = await prisma.hr_records.delete({
     *   where: {
     *     // ... filter to delete one Hr_records
     *   }
     * })
     * 
     */
    delete<T extends hr_recordsDeleteArgs>(args: SelectSubset<T, hr_recordsDeleteArgs<ExtArgs>>): Prisma__hr_recordsClient<$Result.GetResult<Prisma.$hr_recordsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Hr_records.
     * @param {hr_recordsUpdateArgs} args - Arguments to update one Hr_records.
     * @example
     * // Update one Hr_records
     * const hr_records = await prisma.hr_records.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends hr_recordsUpdateArgs>(args: SelectSubset<T, hr_recordsUpdateArgs<ExtArgs>>): Prisma__hr_recordsClient<$Result.GetResult<Prisma.$hr_recordsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Hr_records.
     * @param {hr_recordsDeleteManyArgs} args - Arguments to filter Hr_records to delete.
     * @example
     * // Delete a few Hr_records
     * const { count } = await prisma.hr_records.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends hr_recordsDeleteManyArgs>(args?: SelectSubset<T, hr_recordsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hr_records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hr_recordsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hr_records
     * const hr_records = await prisma.hr_records.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends hr_recordsUpdateManyArgs>(args: SelectSubset<T, hr_recordsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Hr_records.
     * @param {hr_recordsUpsertArgs} args - Arguments to update or create a Hr_records.
     * @example
     * // Update or create a Hr_records
     * const hr_records = await prisma.hr_records.upsert({
     *   create: {
     *     // ... data to create a Hr_records
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hr_records we want to update
     *   }
     * })
     */
    upsert<T extends hr_recordsUpsertArgs>(args: SelectSubset<T, hr_recordsUpsertArgs<ExtArgs>>): Prisma__hr_recordsClient<$Result.GetResult<Prisma.$hr_recordsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Hr_records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hr_recordsCountArgs} args - Arguments to filter Hr_records to count.
     * @example
     * // Count the number of Hr_records
     * const count = await prisma.hr_records.count({
     *   where: {
     *     // ... the filter for the Hr_records we want to count
     *   }
     * })
    **/
    count<T extends hr_recordsCountArgs>(
      args?: Subset<T, hr_recordsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Hr_recordsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hr_records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Hr_recordsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Hr_recordsAggregateArgs>(args: Subset<T, Hr_recordsAggregateArgs>): Prisma.PrismaPromise<GetHr_recordsAggregateType<T>>

    /**
     * Group by Hr_records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hr_recordsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends hr_recordsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: hr_recordsGroupByArgs['orderBy'] }
        : { orderBy?: hr_recordsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, hr_recordsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHr_recordsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the hr_records model
   */
  readonly fields: hr_recordsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for hr_records.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__hr_recordsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the hr_records model
   */
  interface hr_recordsFieldRefs {
    readonly id: FieldRef<"hr_records", 'Int'>
    readonly user_id: FieldRef<"hr_records", 'Int'>
    readonly type: FieldRef<"hr_records", 'hr_records_type'>
    readonly details: FieldRef<"hr_records", 'String'>
    readonly date: FieldRef<"hr_records", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * hr_records findUnique
   */
  export type hr_recordsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hr_records
     */
    select?: hr_recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hr_records
     */
    omit?: hr_recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hr_recordsInclude<ExtArgs> | null
    /**
     * Filter, which hr_records to fetch.
     */
    where: hr_recordsWhereUniqueInput
  }

  /**
   * hr_records findUniqueOrThrow
   */
  export type hr_recordsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hr_records
     */
    select?: hr_recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hr_records
     */
    omit?: hr_recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hr_recordsInclude<ExtArgs> | null
    /**
     * Filter, which hr_records to fetch.
     */
    where: hr_recordsWhereUniqueInput
  }

  /**
   * hr_records findFirst
   */
  export type hr_recordsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hr_records
     */
    select?: hr_recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hr_records
     */
    omit?: hr_recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hr_recordsInclude<ExtArgs> | null
    /**
     * Filter, which hr_records to fetch.
     */
    where?: hr_recordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hr_records to fetch.
     */
    orderBy?: hr_recordsOrderByWithRelationInput | hr_recordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for hr_records.
     */
    cursor?: hr_recordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hr_records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hr_records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of hr_records.
     */
    distinct?: Hr_recordsScalarFieldEnum | Hr_recordsScalarFieldEnum[]
  }

  /**
   * hr_records findFirstOrThrow
   */
  export type hr_recordsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hr_records
     */
    select?: hr_recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hr_records
     */
    omit?: hr_recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hr_recordsInclude<ExtArgs> | null
    /**
     * Filter, which hr_records to fetch.
     */
    where?: hr_recordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hr_records to fetch.
     */
    orderBy?: hr_recordsOrderByWithRelationInput | hr_recordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for hr_records.
     */
    cursor?: hr_recordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hr_records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hr_records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of hr_records.
     */
    distinct?: Hr_recordsScalarFieldEnum | Hr_recordsScalarFieldEnum[]
  }

  /**
   * hr_records findMany
   */
  export type hr_recordsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hr_records
     */
    select?: hr_recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hr_records
     */
    omit?: hr_recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hr_recordsInclude<ExtArgs> | null
    /**
     * Filter, which hr_records to fetch.
     */
    where?: hr_recordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hr_records to fetch.
     */
    orderBy?: hr_recordsOrderByWithRelationInput | hr_recordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing hr_records.
     */
    cursor?: hr_recordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hr_records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hr_records.
     */
    skip?: number
    distinct?: Hr_recordsScalarFieldEnum | Hr_recordsScalarFieldEnum[]
  }

  /**
   * hr_records create
   */
  export type hr_recordsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hr_records
     */
    select?: hr_recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hr_records
     */
    omit?: hr_recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hr_recordsInclude<ExtArgs> | null
    /**
     * The data needed to create a hr_records.
     */
    data: XOR<hr_recordsCreateInput, hr_recordsUncheckedCreateInput>
  }

  /**
   * hr_records createMany
   */
  export type hr_recordsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many hr_records.
     */
    data: hr_recordsCreateManyInput | hr_recordsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * hr_records update
   */
  export type hr_recordsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hr_records
     */
    select?: hr_recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hr_records
     */
    omit?: hr_recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hr_recordsInclude<ExtArgs> | null
    /**
     * The data needed to update a hr_records.
     */
    data: XOR<hr_recordsUpdateInput, hr_recordsUncheckedUpdateInput>
    /**
     * Choose, which hr_records to update.
     */
    where: hr_recordsWhereUniqueInput
  }

  /**
   * hr_records updateMany
   */
  export type hr_recordsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update hr_records.
     */
    data: XOR<hr_recordsUpdateManyMutationInput, hr_recordsUncheckedUpdateManyInput>
    /**
     * Filter which hr_records to update
     */
    where?: hr_recordsWhereInput
    /**
     * Limit how many hr_records to update.
     */
    limit?: number
  }

  /**
   * hr_records upsert
   */
  export type hr_recordsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hr_records
     */
    select?: hr_recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hr_records
     */
    omit?: hr_recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hr_recordsInclude<ExtArgs> | null
    /**
     * The filter to search for the hr_records to update in case it exists.
     */
    where: hr_recordsWhereUniqueInput
    /**
     * In case the hr_records found by the `where` argument doesn't exist, create a new hr_records with this data.
     */
    create: XOR<hr_recordsCreateInput, hr_recordsUncheckedCreateInput>
    /**
     * In case the hr_records was found with the provided `where` argument, update it with this data.
     */
    update: XOR<hr_recordsUpdateInput, hr_recordsUncheckedUpdateInput>
  }

  /**
   * hr_records delete
   */
  export type hr_recordsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hr_records
     */
    select?: hr_recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hr_records
     */
    omit?: hr_recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hr_recordsInclude<ExtArgs> | null
    /**
     * Filter which hr_records to delete.
     */
    where: hr_recordsWhereUniqueInput
  }

  /**
   * hr_records deleteMany
   */
  export type hr_recordsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which hr_records to delete
     */
    where?: hr_recordsWhereInput
    /**
     * Limit how many hr_records to delete.
     */
    limit?: number
  }

  /**
   * hr_records without action
   */
  export type hr_recordsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hr_records
     */
    select?: hr_recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hr_records
     */
    omit?: hr_recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hr_recordsInclude<ExtArgs> | null
  }


  /**
   * Model leads
   */

  export type AggregateLeads = {
    _count: LeadsCountAggregateOutputType | null
    _avg: LeadsAvgAggregateOutputType | null
    _sum: LeadsSumAggregateOutputType | null
    _min: LeadsMinAggregateOutputType | null
    _max: LeadsMaxAggregateOutputType | null
  }

  export type LeadsAvgAggregateOutputType = {
    id: number | null
    client_id: number | null
    project_id: number | null
  }

  export type LeadsSumAggregateOutputType = {
    id: number | null
    client_id: number | null
    project_id: number | null
  }

  export type LeadsMinAggregateOutputType = {
    id: number | null
    client_id: number | null
    project_id: number | null
    status: $Enums.leads_status | null
    notes: string | null
    created_at: Date | null
  }

  export type LeadsMaxAggregateOutputType = {
    id: number | null
    client_id: number | null
    project_id: number | null
    status: $Enums.leads_status | null
    notes: string | null
    created_at: Date | null
  }

  export type LeadsCountAggregateOutputType = {
    id: number
    client_id: number
    project_id: number
    status: number
    notes: number
    created_at: number
    _all: number
  }


  export type LeadsAvgAggregateInputType = {
    id?: true
    client_id?: true
    project_id?: true
  }

  export type LeadsSumAggregateInputType = {
    id?: true
    client_id?: true
    project_id?: true
  }

  export type LeadsMinAggregateInputType = {
    id?: true
    client_id?: true
    project_id?: true
    status?: true
    notes?: true
    created_at?: true
  }

  export type LeadsMaxAggregateInputType = {
    id?: true
    client_id?: true
    project_id?: true
    status?: true
    notes?: true
    created_at?: true
  }

  export type LeadsCountAggregateInputType = {
    id?: true
    client_id?: true
    project_id?: true
    status?: true
    notes?: true
    created_at?: true
    _all?: true
  }

  export type LeadsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which leads to aggregate.
     */
    where?: leadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leads to fetch.
     */
    orderBy?: leadsOrderByWithRelationInput | leadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: leadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned leads
    **/
    _count?: true | LeadsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeadsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeadsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeadsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeadsMaxAggregateInputType
  }

  export type GetLeadsAggregateType<T extends LeadsAggregateArgs> = {
        [P in keyof T & keyof AggregateLeads]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeads[P]>
      : GetScalarType<T[P], AggregateLeads[P]>
  }




  export type leadsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: leadsWhereInput
    orderBy?: leadsOrderByWithAggregationInput | leadsOrderByWithAggregationInput[]
    by: LeadsScalarFieldEnum[] | LeadsScalarFieldEnum
    having?: leadsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeadsCountAggregateInputType | true
    _avg?: LeadsAvgAggregateInputType
    _sum?: LeadsSumAggregateInputType
    _min?: LeadsMinAggregateInputType
    _max?: LeadsMaxAggregateInputType
  }

  export type LeadsGroupByOutputType = {
    id: number
    client_id: number | null
    project_id: number | null
    status: $Enums.leads_status | null
    notes: string | null
    created_at: Date | null
    _count: LeadsCountAggregateOutputType | null
    _avg: LeadsAvgAggregateOutputType | null
    _sum: LeadsSumAggregateOutputType | null
    _min: LeadsMinAggregateOutputType | null
    _max: LeadsMaxAggregateOutputType | null
  }

  type GetLeadsGroupByPayload<T extends leadsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeadsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeadsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeadsGroupByOutputType[P]>
            : GetScalarType<T[P], LeadsGroupByOutputType[P]>
        }
      >
    >


  export type leadsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    client_id?: boolean
    project_id?: boolean
    status?: boolean
    notes?: boolean
    created_at?: boolean
    clients?: boolean | leads$clientsArgs<ExtArgs>
    projects?: boolean | leads$projectsArgs<ExtArgs>
  }, ExtArgs["result"]["leads"]>



  export type leadsSelectScalar = {
    id?: boolean
    client_id?: boolean
    project_id?: boolean
    status?: boolean
    notes?: boolean
    created_at?: boolean
  }

  export type leadsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "client_id" | "project_id" | "status" | "notes" | "created_at", ExtArgs["result"]["leads"]>
  export type leadsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clients?: boolean | leads$clientsArgs<ExtArgs>
    projects?: boolean | leads$projectsArgs<ExtArgs>
  }

  export type $leadsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "leads"
    objects: {
      clients: Prisma.$clientsPayload<ExtArgs> | null
      projects: Prisma.$projectsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      client_id: number | null
      project_id: number | null
      status: $Enums.leads_status | null
      notes: string | null
      created_at: Date | null
    }, ExtArgs["result"]["leads"]>
    composites: {}
  }

  type leadsGetPayload<S extends boolean | null | undefined | leadsDefaultArgs> = $Result.GetResult<Prisma.$leadsPayload, S>

  type leadsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<leadsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeadsCountAggregateInputType | true
    }

  export interface leadsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['leads'], meta: { name: 'leads' } }
    /**
     * Find zero or one Leads that matches the filter.
     * @param {leadsFindUniqueArgs} args - Arguments to find a Leads
     * @example
     * // Get one Leads
     * const leads = await prisma.leads.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends leadsFindUniqueArgs>(args: SelectSubset<T, leadsFindUniqueArgs<ExtArgs>>): Prisma__leadsClient<$Result.GetResult<Prisma.$leadsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Leads that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {leadsFindUniqueOrThrowArgs} args - Arguments to find a Leads
     * @example
     * // Get one Leads
     * const leads = await prisma.leads.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends leadsFindUniqueOrThrowArgs>(args: SelectSubset<T, leadsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__leadsClient<$Result.GetResult<Prisma.$leadsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Leads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leadsFindFirstArgs} args - Arguments to find a Leads
     * @example
     * // Get one Leads
     * const leads = await prisma.leads.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends leadsFindFirstArgs>(args?: SelectSubset<T, leadsFindFirstArgs<ExtArgs>>): Prisma__leadsClient<$Result.GetResult<Prisma.$leadsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Leads that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leadsFindFirstOrThrowArgs} args - Arguments to find a Leads
     * @example
     * // Get one Leads
     * const leads = await prisma.leads.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends leadsFindFirstOrThrowArgs>(args?: SelectSubset<T, leadsFindFirstOrThrowArgs<ExtArgs>>): Prisma__leadsClient<$Result.GetResult<Prisma.$leadsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Leads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leadsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leads
     * const leads = await prisma.leads.findMany()
     * 
     * // Get first 10 Leads
     * const leads = await prisma.leads.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leadsWithIdOnly = await prisma.leads.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends leadsFindManyArgs>(args?: SelectSubset<T, leadsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$leadsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Leads.
     * @param {leadsCreateArgs} args - Arguments to create a Leads.
     * @example
     * // Create one Leads
     * const Leads = await prisma.leads.create({
     *   data: {
     *     // ... data to create a Leads
     *   }
     * })
     * 
     */
    create<T extends leadsCreateArgs>(args: SelectSubset<T, leadsCreateArgs<ExtArgs>>): Prisma__leadsClient<$Result.GetResult<Prisma.$leadsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Leads.
     * @param {leadsCreateManyArgs} args - Arguments to create many Leads.
     * @example
     * // Create many Leads
     * const leads = await prisma.leads.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends leadsCreateManyArgs>(args?: SelectSubset<T, leadsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Leads.
     * @param {leadsDeleteArgs} args - Arguments to delete one Leads.
     * @example
     * // Delete one Leads
     * const Leads = await prisma.leads.delete({
     *   where: {
     *     // ... filter to delete one Leads
     *   }
     * })
     * 
     */
    delete<T extends leadsDeleteArgs>(args: SelectSubset<T, leadsDeleteArgs<ExtArgs>>): Prisma__leadsClient<$Result.GetResult<Prisma.$leadsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Leads.
     * @param {leadsUpdateArgs} args - Arguments to update one Leads.
     * @example
     * // Update one Leads
     * const leads = await prisma.leads.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends leadsUpdateArgs>(args: SelectSubset<T, leadsUpdateArgs<ExtArgs>>): Prisma__leadsClient<$Result.GetResult<Prisma.$leadsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Leads.
     * @param {leadsDeleteManyArgs} args - Arguments to filter Leads to delete.
     * @example
     * // Delete a few Leads
     * const { count } = await prisma.leads.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends leadsDeleteManyArgs>(args?: SelectSubset<T, leadsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leadsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leads
     * const leads = await prisma.leads.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends leadsUpdateManyArgs>(args: SelectSubset<T, leadsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Leads.
     * @param {leadsUpsertArgs} args - Arguments to update or create a Leads.
     * @example
     * // Update or create a Leads
     * const leads = await prisma.leads.upsert({
     *   create: {
     *     // ... data to create a Leads
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Leads we want to update
     *   }
     * })
     */
    upsert<T extends leadsUpsertArgs>(args: SelectSubset<T, leadsUpsertArgs<ExtArgs>>): Prisma__leadsClient<$Result.GetResult<Prisma.$leadsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leadsCountArgs} args - Arguments to filter Leads to count.
     * @example
     * // Count the number of Leads
     * const count = await prisma.leads.count({
     *   where: {
     *     // ... the filter for the Leads we want to count
     *   }
     * })
    **/
    count<T extends leadsCountArgs>(
      args?: Subset<T, leadsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeadsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeadsAggregateArgs>(args: Subset<T, LeadsAggregateArgs>): Prisma.PrismaPromise<GetLeadsAggregateType<T>>

    /**
     * Group by Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leadsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends leadsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: leadsGroupByArgs['orderBy'] }
        : { orderBy?: leadsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, leadsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeadsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the leads model
   */
  readonly fields: leadsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for leads.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__leadsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clients<T extends leads$clientsArgs<ExtArgs> = {}>(args?: Subset<T, leads$clientsArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    projects<T extends leads$projectsArgs<ExtArgs> = {}>(args?: Subset<T, leads$projectsArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the leads model
   */
  interface leadsFieldRefs {
    readonly id: FieldRef<"leads", 'Int'>
    readonly client_id: FieldRef<"leads", 'Int'>
    readonly project_id: FieldRef<"leads", 'Int'>
    readonly status: FieldRef<"leads", 'leads_status'>
    readonly notes: FieldRef<"leads", 'String'>
    readonly created_at: FieldRef<"leads", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * leads findUnique
   */
  export type leadsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leads
     */
    select?: leadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leads
     */
    omit?: leadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leadsInclude<ExtArgs> | null
    /**
     * Filter, which leads to fetch.
     */
    where: leadsWhereUniqueInput
  }

  /**
   * leads findUniqueOrThrow
   */
  export type leadsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leads
     */
    select?: leadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leads
     */
    omit?: leadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leadsInclude<ExtArgs> | null
    /**
     * Filter, which leads to fetch.
     */
    where: leadsWhereUniqueInput
  }

  /**
   * leads findFirst
   */
  export type leadsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leads
     */
    select?: leadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leads
     */
    omit?: leadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leadsInclude<ExtArgs> | null
    /**
     * Filter, which leads to fetch.
     */
    where?: leadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leads to fetch.
     */
    orderBy?: leadsOrderByWithRelationInput | leadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for leads.
     */
    cursor?: leadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of leads.
     */
    distinct?: LeadsScalarFieldEnum | LeadsScalarFieldEnum[]
  }

  /**
   * leads findFirstOrThrow
   */
  export type leadsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leads
     */
    select?: leadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leads
     */
    omit?: leadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leadsInclude<ExtArgs> | null
    /**
     * Filter, which leads to fetch.
     */
    where?: leadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leads to fetch.
     */
    orderBy?: leadsOrderByWithRelationInput | leadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for leads.
     */
    cursor?: leadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of leads.
     */
    distinct?: LeadsScalarFieldEnum | LeadsScalarFieldEnum[]
  }

  /**
   * leads findMany
   */
  export type leadsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leads
     */
    select?: leadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leads
     */
    omit?: leadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leadsInclude<ExtArgs> | null
    /**
     * Filter, which leads to fetch.
     */
    where?: leadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leads to fetch.
     */
    orderBy?: leadsOrderByWithRelationInput | leadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing leads.
     */
    cursor?: leadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leads.
     */
    skip?: number
    distinct?: LeadsScalarFieldEnum | LeadsScalarFieldEnum[]
  }

  /**
   * leads create
   */
  export type leadsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leads
     */
    select?: leadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leads
     */
    omit?: leadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leadsInclude<ExtArgs> | null
    /**
     * The data needed to create a leads.
     */
    data?: XOR<leadsCreateInput, leadsUncheckedCreateInput>
  }

  /**
   * leads createMany
   */
  export type leadsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many leads.
     */
    data: leadsCreateManyInput | leadsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * leads update
   */
  export type leadsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leads
     */
    select?: leadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leads
     */
    omit?: leadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leadsInclude<ExtArgs> | null
    /**
     * The data needed to update a leads.
     */
    data: XOR<leadsUpdateInput, leadsUncheckedUpdateInput>
    /**
     * Choose, which leads to update.
     */
    where: leadsWhereUniqueInput
  }

  /**
   * leads updateMany
   */
  export type leadsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update leads.
     */
    data: XOR<leadsUpdateManyMutationInput, leadsUncheckedUpdateManyInput>
    /**
     * Filter which leads to update
     */
    where?: leadsWhereInput
    /**
     * Limit how many leads to update.
     */
    limit?: number
  }

  /**
   * leads upsert
   */
  export type leadsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leads
     */
    select?: leadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leads
     */
    omit?: leadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leadsInclude<ExtArgs> | null
    /**
     * The filter to search for the leads to update in case it exists.
     */
    where: leadsWhereUniqueInput
    /**
     * In case the leads found by the `where` argument doesn't exist, create a new leads with this data.
     */
    create: XOR<leadsCreateInput, leadsUncheckedCreateInput>
    /**
     * In case the leads was found with the provided `where` argument, update it with this data.
     */
    update: XOR<leadsUpdateInput, leadsUncheckedUpdateInput>
  }

  /**
   * leads delete
   */
  export type leadsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leads
     */
    select?: leadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leads
     */
    omit?: leadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leadsInclude<ExtArgs> | null
    /**
     * Filter which leads to delete.
     */
    where: leadsWhereUniqueInput
  }

  /**
   * leads deleteMany
   */
  export type leadsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which leads to delete
     */
    where?: leadsWhereInput
    /**
     * Limit how many leads to delete.
     */
    limit?: number
  }

  /**
   * leads.clients
   */
  export type leads$clientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    where?: clientsWhereInput
  }

  /**
   * leads.projects
   */
  export type leads$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    where?: projectsWhereInput
  }

  /**
   * leads without action
   */
  export type leadsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leads
     */
    select?: leadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leads
     */
    omit?: leadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leadsInclude<ExtArgs> | null
  }


  /**
   * Model messages
   */

  export type AggregateMessages = {
    _count: MessagesCountAggregateOutputType | null
    _avg: MessagesAvgAggregateOutputType | null
    _sum: MessagesSumAggregateOutputType | null
    _min: MessagesMinAggregateOutputType | null
    _max: MessagesMaxAggregateOutputType | null
  }

  export type MessagesAvgAggregateOutputType = {
    id: number | null
    channel_id: number | null
    user_id: number | null
  }

  export type MessagesSumAggregateOutputType = {
    id: number | null
    channel_id: number | null
    user_id: number | null
  }

  export type MessagesMinAggregateOutputType = {
    id: number | null
    channel_id: number | null
    user_id: number | null
    content: string | null
    created_at: Date | null
  }

  export type MessagesMaxAggregateOutputType = {
    id: number | null
    channel_id: number | null
    user_id: number | null
    content: string | null
    created_at: Date | null
  }

  export type MessagesCountAggregateOutputType = {
    id: number
    channel_id: number
    user_id: number
    content: number
    created_at: number
    _all: number
  }


  export type MessagesAvgAggregateInputType = {
    id?: true
    channel_id?: true
    user_id?: true
  }

  export type MessagesSumAggregateInputType = {
    id?: true
    channel_id?: true
    user_id?: true
  }

  export type MessagesMinAggregateInputType = {
    id?: true
    channel_id?: true
    user_id?: true
    content?: true
    created_at?: true
  }

  export type MessagesMaxAggregateInputType = {
    id?: true
    channel_id?: true
    user_id?: true
    content?: true
    created_at?: true
  }

  export type MessagesCountAggregateInputType = {
    id?: true
    channel_id?: true
    user_id?: true
    content?: true
    created_at?: true
    _all?: true
  }

  export type MessagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which messages to aggregate.
     */
    where?: messagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messagesOrderByWithRelationInput | messagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: messagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned messages
    **/
    _count?: true | MessagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessagesMaxAggregateInputType
  }

  export type GetMessagesAggregateType<T extends MessagesAggregateArgs> = {
        [P in keyof T & keyof AggregateMessages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessages[P]>
      : GetScalarType<T[P], AggregateMessages[P]>
  }




  export type messagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: messagesWhereInput
    orderBy?: messagesOrderByWithAggregationInput | messagesOrderByWithAggregationInput[]
    by: MessagesScalarFieldEnum[] | MessagesScalarFieldEnum
    having?: messagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessagesCountAggregateInputType | true
    _avg?: MessagesAvgAggregateInputType
    _sum?: MessagesSumAggregateInputType
    _min?: MessagesMinAggregateInputType
    _max?: MessagesMaxAggregateInputType
  }

  export type MessagesGroupByOutputType = {
    id: number
    channel_id: number
    user_id: number
    content: string
    created_at: Date | null
    _count: MessagesCountAggregateOutputType | null
    _avg: MessagesAvgAggregateOutputType | null
    _sum: MessagesSumAggregateOutputType | null
    _min: MessagesMinAggregateOutputType | null
    _max: MessagesMaxAggregateOutputType | null
  }

  type GetMessagesGroupByPayload<T extends messagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessagesGroupByOutputType[P]>
            : GetScalarType<T[P], MessagesGroupByOutputType[P]>
        }
      >
    >


  export type messagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    channel_id?: boolean
    user_id?: boolean
    content?: boolean
    created_at?: boolean
    channels?: boolean | channelsDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messages"]>



  export type messagesSelectScalar = {
    id?: boolean
    channel_id?: boolean
    user_id?: boolean
    content?: boolean
    created_at?: boolean
  }

  export type messagesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "channel_id" | "user_id" | "content" | "created_at", ExtArgs["result"]["messages"]>
  export type messagesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    channels?: boolean | channelsDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $messagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "messages"
    objects: {
      channels: Prisma.$channelsPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      channel_id: number
      user_id: number
      content: string
      created_at: Date | null
    }, ExtArgs["result"]["messages"]>
    composites: {}
  }

  type messagesGetPayload<S extends boolean | null | undefined | messagesDefaultArgs> = $Result.GetResult<Prisma.$messagesPayload, S>

  type messagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<messagesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessagesCountAggregateInputType | true
    }

  export interface messagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['messages'], meta: { name: 'messages' } }
    /**
     * Find zero or one Messages that matches the filter.
     * @param {messagesFindUniqueArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends messagesFindUniqueArgs>(args: SelectSubset<T, messagesFindUniqueArgs<ExtArgs>>): Prisma__messagesClient<$Result.GetResult<Prisma.$messagesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Messages that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {messagesFindUniqueOrThrowArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends messagesFindUniqueOrThrowArgs>(args: SelectSubset<T, messagesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__messagesClient<$Result.GetResult<Prisma.$messagesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messagesFindFirstArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends messagesFindFirstArgs>(args?: SelectSubset<T, messagesFindFirstArgs<ExtArgs>>): Prisma__messagesClient<$Result.GetResult<Prisma.$messagesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Messages that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messagesFindFirstOrThrowArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends messagesFindFirstOrThrowArgs>(args?: SelectSubset<T, messagesFindFirstOrThrowArgs<ExtArgs>>): Prisma__messagesClient<$Result.GetResult<Prisma.$messagesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messagesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.messages.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.messages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messagesWithIdOnly = await prisma.messages.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends messagesFindManyArgs>(args?: SelectSubset<T, messagesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Messages.
     * @param {messagesCreateArgs} args - Arguments to create a Messages.
     * @example
     * // Create one Messages
     * const Messages = await prisma.messages.create({
     *   data: {
     *     // ... data to create a Messages
     *   }
     * })
     * 
     */
    create<T extends messagesCreateArgs>(args: SelectSubset<T, messagesCreateArgs<ExtArgs>>): Prisma__messagesClient<$Result.GetResult<Prisma.$messagesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {messagesCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const messages = await prisma.messages.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends messagesCreateManyArgs>(args?: SelectSubset<T, messagesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Messages.
     * @param {messagesDeleteArgs} args - Arguments to delete one Messages.
     * @example
     * // Delete one Messages
     * const Messages = await prisma.messages.delete({
     *   where: {
     *     // ... filter to delete one Messages
     *   }
     * })
     * 
     */
    delete<T extends messagesDeleteArgs>(args: SelectSubset<T, messagesDeleteArgs<ExtArgs>>): Prisma__messagesClient<$Result.GetResult<Prisma.$messagesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Messages.
     * @param {messagesUpdateArgs} args - Arguments to update one Messages.
     * @example
     * // Update one Messages
     * const messages = await prisma.messages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends messagesUpdateArgs>(args: SelectSubset<T, messagesUpdateArgs<ExtArgs>>): Prisma__messagesClient<$Result.GetResult<Prisma.$messagesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {messagesDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.messages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends messagesDeleteManyArgs>(args?: SelectSubset<T, messagesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const messages = await prisma.messages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends messagesUpdateManyArgs>(args: SelectSubset<T, messagesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Messages.
     * @param {messagesUpsertArgs} args - Arguments to update or create a Messages.
     * @example
     * // Update or create a Messages
     * const messages = await prisma.messages.upsert({
     *   create: {
     *     // ... data to create a Messages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Messages we want to update
     *   }
     * })
     */
    upsert<T extends messagesUpsertArgs>(args: SelectSubset<T, messagesUpsertArgs<ExtArgs>>): Prisma__messagesClient<$Result.GetResult<Prisma.$messagesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messagesCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.messages.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends messagesCountArgs>(
      args?: Subset<T, messagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessagesAggregateArgs>(args: Subset<T, MessagesAggregateArgs>): Prisma.PrismaPromise<GetMessagesAggregateType<T>>

    /**
     * Group by Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends messagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: messagesGroupByArgs['orderBy'] }
        : { orderBy?: messagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, messagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the messages model
   */
  readonly fields: messagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for messages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__messagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    channels<T extends channelsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, channelsDefaultArgs<ExtArgs>>): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the messages model
   */
  interface messagesFieldRefs {
    readonly id: FieldRef<"messages", 'Int'>
    readonly channel_id: FieldRef<"messages", 'Int'>
    readonly user_id: FieldRef<"messages", 'Int'>
    readonly content: FieldRef<"messages", 'String'>
    readonly created_at: FieldRef<"messages", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * messages findUnique
   */
  export type messagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the messages
     */
    omit?: messagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * Filter, which messages to fetch.
     */
    where: messagesWhereUniqueInput
  }

  /**
   * messages findUniqueOrThrow
   */
  export type messagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the messages
     */
    omit?: messagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * Filter, which messages to fetch.
     */
    where: messagesWhereUniqueInput
  }

  /**
   * messages findFirst
   */
  export type messagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the messages
     */
    omit?: messagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * Filter, which messages to fetch.
     */
    where?: messagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messagesOrderByWithRelationInput | messagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messages.
     */
    cursor?: messagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messages.
     */
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }

  /**
   * messages findFirstOrThrow
   */
  export type messagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the messages
     */
    omit?: messagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * Filter, which messages to fetch.
     */
    where?: messagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messagesOrderByWithRelationInput | messagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messages.
     */
    cursor?: messagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messages.
     */
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }

  /**
   * messages findMany
   */
  export type messagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the messages
     */
    omit?: messagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * Filter, which messages to fetch.
     */
    where?: messagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messagesOrderByWithRelationInput | messagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing messages.
     */
    cursor?: messagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }

  /**
   * messages create
   */
  export type messagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the messages
     */
    omit?: messagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * The data needed to create a messages.
     */
    data: XOR<messagesCreateInput, messagesUncheckedCreateInput>
  }

  /**
   * messages createMany
   */
  export type messagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many messages.
     */
    data: messagesCreateManyInput | messagesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * messages update
   */
  export type messagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the messages
     */
    omit?: messagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * The data needed to update a messages.
     */
    data: XOR<messagesUpdateInput, messagesUncheckedUpdateInput>
    /**
     * Choose, which messages to update.
     */
    where: messagesWhereUniqueInput
  }

  /**
   * messages updateMany
   */
  export type messagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update messages.
     */
    data: XOR<messagesUpdateManyMutationInput, messagesUncheckedUpdateManyInput>
    /**
     * Filter which messages to update
     */
    where?: messagesWhereInput
    /**
     * Limit how many messages to update.
     */
    limit?: number
  }

  /**
   * messages upsert
   */
  export type messagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the messages
     */
    omit?: messagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * The filter to search for the messages to update in case it exists.
     */
    where: messagesWhereUniqueInput
    /**
     * In case the messages found by the `where` argument doesn't exist, create a new messages with this data.
     */
    create: XOR<messagesCreateInput, messagesUncheckedCreateInput>
    /**
     * In case the messages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<messagesUpdateInput, messagesUncheckedUpdateInput>
  }

  /**
   * messages delete
   */
  export type messagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the messages
     */
    omit?: messagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * Filter which messages to delete.
     */
    where: messagesWhereUniqueInput
  }

  /**
   * messages deleteMany
   */
  export type messagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which messages to delete
     */
    where?: messagesWhereInput
    /**
     * Limit how many messages to delete.
     */
    limit?: number
  }

  /**
   * messages without action
   */
  export type messagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the messages
     */
    omit?: messagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messagesInclude<ExtArgs> | null
  }


  /**
   * Model permissions
   */

  export type AggregatePermissions = {
    _count: PermissionsCountAggregateOutputType | null
    _avg: PermissionsAvgAggregateOutputType | null
    _sum: PermissionsSumAggregateOutputType | null
    _min: PermissionsMinAggregateOutputType | null
    _max: PermissionsMaxAggregateOutputType | null
  }

  export type PermissionsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    project_id: number | null
  }

  export type PermissionsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    project_id: number | null
  }

  export type PermissionsMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    project_id: number | null
    permission: string | null
  }

  export type PermissionsMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    project_id: number | null
    permission: string | null
  }

  export type PermissionsCountAggregateOutputType = {
    id: number
    user_id: number
    project_id: number
    permission: number
    _all: number
  }


  export type PermissionsAvgAggregateInputType = {
    id?: true
    user_id?: true
    project_id?: true
  }

  export type PermissionsSumAggregateInputType = {
    id?: true
    user_id?: true
    project_id?: true
  }

  export type PermissionsMinAggregateInputType = {
    id?: true
    user_id?: true
    project_id?: true
    permission?: true
  }

  export type PermissionsMaxAggregateInputType = {
    id?: true
    user_id?: true
    project_id?: true
    permission?: true
  }

  export type PermissionsCountAggregateInputType = {
    id?: true
    user_id?: true
    project_id?: true
    permission?: true
    _all?: true
  }

  export type PermissionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which permissions to aggregate.
     */
    where?: permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionsOrderByWithRelationInput | permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned permissions
    **/
    _count?: true | PermissionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PermissionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PermissionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionsMaxAggregateInputType
  }

  export type GetPermissionsAggregateType<T extends PermissionsAggregateArgs> = {
        [P in keyof T & keyof AggregatePermissions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermissions[P]>
      : GetScalarType<T[P], AggregatePermissions[P]>
  }




  export type permissionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: permissionsWhereInput
    orderBy?: permissionsOrderByWithAggregationInput | permissionsOrderByWithAggregationInput[]
    by: PermissionsScalarFieldEnum[] | PermissionsScalarFieldEnum
    having?: permissionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionsCountAggregateInputType | true
    _avg?: PermissionsAvgAggregateInputType
    _sum?: PermissionsSumAggregateInputType
    _min?: PermissionsMinAggregateInputType
    _max?: PermissionsMaxAggregateInputType
  }

  export type PermissionsGroupByOutputType = {
    id: number
    user_id: number
    project_id: number | null
    permission: string
    _count: PermissionsCountAggregateOutputType | null
    _avg: PermissionsAvgAggregateOutputType | null
    _sum: PermissionsSumAggregateOutputType | null
    _min: PermissionsMinAggregateOutputType | null
    _max: PermissionsMaxAggregateOutputType | null
  }

  type GetPermissionsGroupByPayload<T extends permissionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionsGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionsGroupByOutputType[P]>
        }
      >
    >


  export type permissionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    project_id?: boolean
    permission?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
    projects?: boolean | permissions$projectsArgs<ExtArgs>
  }, ExtArgs["result"]["permissions"]>



  export type permissionsSelectScalar = {
    id?: boolean
    user_id?: boolean
    project_id?: boolean
    permission?: boolean
  }

  export type permissionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "project_id" | "permission", ExtArgs["result"]["permissions"]>
  export type permissionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
    projects?: boolean | permissions$projectsArgs<ExtArgs>
  }

  export type $permissionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "permissions"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
      projects: Prisma.$projectsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      project_id: number | null
      permission: string
    }, ExtArgs["result"]["permissions"]>
    composites: {}
  }

  type permissionsGetPayload<S extends boolean | null | undefined | permissionsDefaultArgs> = $Result.GetResult<Prisma.$permissionsPayload, S>

  type permissionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<permissionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PermissionsCountAggregateInputType | true
    }

  export interface permissionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['permissions'], meta: { name: 'permissions' } }
    /**
     * Find zero or one Permissions that matches the filter.
     * @param {permissionsFindUniqueArgs} args - Arguments to find a Permissions
     * @example
     * // Get one Permissions
     * const permissions = await prisma.permissions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends permissionsFindUniqueArgs>(args: SelectSubset<T, permissionsFindUniqueArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Permissions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {permissionsFindUniqueOrThrowArgs} args - Arguments to find a Permissions
     * @example
     * // Get one Permissions
     * const permissions = await prisma.permissions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends permissionsFindUniqueOrThrowArgs>(args: SelectSubset<T, permissionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsFindFirstArgs} args - Arguments to find a Permissions
     * @example
     * // Get one Permissions
     * const permissions = await prisma.permissions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends permissionsFindFirstArgs>(args?: SelectSubset<T, permissionsFindFirstArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permissions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsFindFirstOrThrowArgs} args - Arguments to find a Permissions
     * @example
     * // Get one Permissions
     * const permissions = await prisma.permissions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends permissionsFindFirstOrThrowArgs>(args?: SelectSubset<T, permissionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permissions.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permissions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionsWithIdOnly = await prisma.permissions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends permissionsFindManyArgs>(args?: SelectSubset<T, permissionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Permissions.
     * @param {permissionsCreateArgs} args - Arguments to create a Permissions.
     * @example
     * // Create one Permissions
     * const Permissions = await prisma.permissions.create({
     *   data: {
     *     // ... data to create a Permissions
     *   }
     * })
     * 
     */
    create<T extends permissionsCreateArgs>(args: SelectSubset<T, permissionsCreateArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Permissions.
     * @param {permissionsCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permissions = await prisma.permissions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends permissionsCreateManyArgs>(args?: SelectSubset<T, permissionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Permissions.
     * @param {permissionsDeleteArgs} args - Arguments to delete one Permissions.
     * @example
     * // Delete one Permissions
     * const Permissions = await prisma.permissions.delete({
     *   where: {
     *     // ... filter to delete one Permissions
     *   }
     * })
     * 
     */
    delete<T extends permissionsDeleteArgs>(args: SelectSubset<T, permissionsDeleteArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Permissions.
     * @param {permissionsUpdateArgs} args - Arguments to update one Permissions.
     * @example
     * // Update one Permissions
     * const permissions = await prisma.permissions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends permissionsUpdateArgs>(args: SelectSubset<T, permissionsUpdateArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Permissions.
     * @param {permissionsDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permissions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends permissionsDeleteManyArgs>(args?: SelectSubset<T, permissionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permissions = await prisma.permissions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends permissionsUpdateManyArgs>(args: SelectSubset<T, permissionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permissions.
     * @param {permissionsUpsertArgs} args - Arguments to update or create a Permissions.
     * @example
     * // Update or create a Permissions
     * const permissions = await prisma.permissions.upsert({
     *   create: {
     *     // ... data to create a Permissions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permissions we want to update
     *   }
     * })
     */
    upsert<T extends permissionsUpsertArgs>(args: SelectSubset<T, permissionsUpsertArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permissions.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends permissionsCountArgs>(
      args?: Subset<T, permissionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionsAggregateArgs>(args: Subset<T, PermissionsAggregateArgs>): Prisma.PrismaPromise<GetPermissionsAggregateType<T>>

    /**
     * Group by Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends permissionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: permissionsGroupByArgs['orderBy'] }
        : { orderBy?: permissionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, permissionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the permissions model
   */
  readonly fields: permissionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for permissions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__permissionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    projects<T extends permissions$projectsArgs<ExtArgs> = {}>(args?: Subset<T, permissions$projectsArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the permissions model
   */
  interface permissionsFieldRefs {
    readonly id: FieldRef<"permissions", 'Int'>
    readonly user_id: FieldRef<"permissions", 'Int'>
    readonly project_id: FieldRef<"permissions", 'Int'>
    readonly permission: FieldRef<"permissions", 'String'>
  }
    

  // Custom InputTypes
  /**
   * permissions findUnique
   */
  export type permissionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where: permissionsWhereUniqueInput
  }

  /**
   * permissions findUniqueOrThrow
   */
  export type permissionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where: permissionsWhereUniqueInput
  }

  /**
   * permissions findFirst
   */
  export type permissionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where?: permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionsOrderByWithRelationInput | permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for permissions.
     */
    cursor?: permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of permissions.
     */
    distinct?: PermissionsScalarFieldEnum | PermissionsScalarFieldEnum[]
  }

  /**
   * permissions findFirstOrThrow
   */
  export type permissionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where?: permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionsOrderByWithRelationInput | permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for permissions.
     */
    cursor?: permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of permissions.
     */
    distinct?: PermissionsScalarFieldEnum | PermissionsScalarFieldEnum[]
  }

  /**
   * permissions findMany
   */
  export type permissionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where?: permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionsOrderByWithRelationInput | permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing permissions.
     */
    cursor?: permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    distinct?: PermissionsScalarFieldEnum | PermissionsScalarFieldEnum[]
  }

  /**
   * permissions create
   */
  export type permissionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * The data needed to create a permissions.
     */
    data: XOR<permissionsCreateInput, permissionsUncheckedCreateInput>
  }

  /**
   * permissions createMany
   */
  export type permissionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many permissions.
     */
    data: permissionsCreateManyInput | permissionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * permissions update
   */
  export type permissionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * The data needed to update a permissions.
     */
    data: XOR<permissionsUpdateInput, permissionsUncheckedUpdateInput>
    /**
     * Choose, which permissions to update.
     */
    where: permissionsWhereUniqueInput
  }

  /**
   * permissions updateMany
   */
  export type permissionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update permissions.
     */
    data: XOR<permissionsUpdateManyMutationInput, permissionsUncheckedUpdateManyInput>
    /**
     * Filter which permissions to update
     */
    where?: permissionsWhereInput
    /**
     * Limit how many permissions to update.
     */
    limit?: number
  }

  /**
   * permissions upsert
   */
  export type permissionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * The filter to search for the permissions to update in case it exists.
     */
    where: permissionsWhereUniqueInput
    /**
     * In case the permissions found by the `where` argument doesn't exist, create a new permissions with this data.
     */
    create: XOR<permissionsCreateInput, permissionsUncheckedCreateInput>
    /**
     * In case the permissions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<permissionsUpdateInput, permissionsUncheckedUpdateInput>
  }

  /**
   * permissions delete
   */
  export type permissionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * Filter which permissions to delete.
     */
    where: permissionsWhereUniqueInput
  }

  /**
   * permissions deleteMany
   */
  export type permissionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which permissions to delete
     */
    where?: permissionsWhereInput
    /**
     * Limit how many permissions to delete.
     */
    limit?: number
  }

  /**
   * permissions.projects
   */
  export type permissions$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    where?: projectsWhereInput
  }

  /**
   * permissions without action
   */
  export type permissionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
  }


  /**
   * Model project_resources
   */

  export type AggregateProject_resources = {
    _count: Project_resourcesCountAggregateOutputType | null
    _avg: Project_resourcesAvgAggregateOutputType | null
    _sum: Project_resourcesSumAggregateOutputType | null
    _min: Project_resourcesMinAggregateOutputType | null
    _max: Project_resourcesMaxAggregateOutputType | null
  }

  export type Project_resourcesAvgAggregateOutputType = {
    id: number | null
    project_id: number | null
    resource_id: number | null
  }

  export type Project_resourcesSumAggregateOutputType = {
    id: number | null
    project_id: number | null
    resource_id: number | null
  }

  export type Project_resourcesMinAggregateOutputType = {
    id: number | null
    project_id: number | null
    resource_id: number | null
    assigned_from: Date | null
    assigned_to: Date | null
  }

  export type Project_resourcesMaxAggregateOutputType = {
    id: number | null
    project_id: number | null
    resource_id: number | null
    assigned_from: Date | null
    assigned_to: Date | null
  }

  export type Project_resourcesCountAggregateOutputType = {
    id: number
    project_id: number
    resource_id: number
    assigned_from: number
    assigned_to: number
    _all: number
  }


  export type Project_resourcesAvgAggregateInputType = {
    id?: true
    project_id?: true
    resource_id?: true
  }

  export type Project_resourcesSumAggregateInputType = {
    id?: true
    project_id?: true
    resource_id?: true
  }

  export type Project_resourcesMinAggregateInputType = {
    id?: true
    project_id?: true
    resource_id?: true
    assigned_from?: true
    assigned_to?: true
  }

  export type Project_resourcesMaxAggregateInputType = {
    id?: true
    project_id?: true
    resource_id?: true
    assigned_from?: true
    assigned_to?: true
  }

  export type Project_resourcesCountAggregateInputType = {
    id?: true
    project_id?: true
    resource_id?: true
    assigned_from?: true
    assigned_to?: true
    _all?: true
  }

  export type Project_resourcesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which project_resources to aggregate.
     */
    where?: project_resourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of project_resources to fetch.
     */
    orderBy?: project_resourcesOrderByWithRelationInput | project_resourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: project_resourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` project_resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` project_resources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned project_resources
    **/
    _count?: true | Project_resourcesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Project_resourcesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Project_resourcesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Project_resourcesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Project_resourcesMaxAggregateInputType
  }

  export type GetProject_resourcesAggregateType<T extends Project_resourcesAggregateArgs> = {
        [P in keyof T & keyof AggregateProject_resources]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject_resources[P]>
      : GetScalarType<T[P], AggregateProject_resources[P]>
  }




  export type project_resourcesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: project_resourcesWhereInput
    orderBy?: project_resourcesOrderByWithAggregationInput | project_resourcesOrderByWithAggregationInput[]
    by: Project_resourcesScalarFieldEnum[] | Project_resourcesScalarFieldEnum
    having?: project_resourcesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Project_resourcesCountAggregateInputType | true
    _avg?: Project_resourcesAvgAggregateInputType
    _sum?: Project_resourcesSumAggregateInputType
    _min?: Project_resourcesMinAggregateInputType
    _max?: Project_resourcesMaxAggregateInputType
  }

  export type Project_resourcesGroupByOutputType = {
    id: number
    project_id: number
    resource_id: number
    assigned_from: Date | null
    assigned_to: Date | null
    _count: Project_resourcesCountAggregateOutputType | null
    _avg: Project_resourcesAvgAggregateOutputType | null
    _sum: Project_resourcesSumAggregateOutputType | null
    _min: Project_resourcesMinAggregateOutputType | null
    _max: Project_resourcesMaxAggregateOutputType | null
  }

  type GetProject_resourcesGroupByPayload<T extends project_resourcesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Project_resourcesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Project_resourcesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Project_resourcesGroupByOutputType[P]>
            : GetScalarType<T[P], Project_resourcesGroupByOutputType[P]>
        }
      >
    >


  export type project_resourcesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    project_id?: boolean
    resource_id?: boolean
    assigned_from?: boolean
    assigned_to?: boolean
    projects?: boolean | projectsDefaultArgs<ExtArgs>
    resources?: boolean | resourcesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project_resources"]>



  export type project_resourcesSelectScalar = {
    id?: boolean
    project_id?: boolean
    resource_id?: boolean
    assigned_from?: boolean
    assigned_to?: boolean
  }

  export type project_resourcesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "project_id" | "resource_id" | "assigned_from" | "assigned_to", ExtArgs["result"]["project_resources"]>
  export type project_resourcesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | projectsDefaultArgs<ExtArgs>
    resources?: boolean | resourcesDefaultArgs<ExtArgs>
  }

  export type $project_resourcesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "project_resources"
    objects: {
      projects: Prisma.$projectsPayload<ExtArgs>
      resources: Prisma.$resourcesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      project_id: number
      resource_id: number
      assigned_from: Date | null
      assigned_to: Date | null
    }, ExtArgs["result"]["project_resources"]>
    composites: {}
  }

  type project_resourcesGetPayload<S extends boolean | null | undefined | project_resourcesDefaultArgs> = $Result.GetResult<Prisma.$project_resourcesPayload, S>

  type project_resourcesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<project_resourcesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Project_resourcesCountAggregateInputType | true
    }

  export interface project_resourcesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['project_resources'], meta: { name: 'project_resources' } }
    /**
     * Find zero or one Project_resources that matches the filter.
     * @param {project_resourcesFindUniqueArgs} args - Arguments to find a Project_resources
     * @example
     * // Get one Project_resources
     * const project_resources = await prisma.project_resources.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends project_resourcesFindUniqueArgs>(args: SelectSubset<T, project_resourcesFindUniqueArgs<ExtArgs>>): Prisma__project_resourcesClient<$Result.GetResult<Prisma.$project_resourcesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Project_resources that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {project_resourcesFindUniqueOrThrowArgs} args - Arguments to find a Project_resources
     * @example
     * // Get one Project_resources
     * const project_resources = await prisma.project_resources.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends project_resourcesFindUniqueOrThrowArgs>(args: SelectSubset<T, project_resourcesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__project_resourcesClient<$Result.GetResult<Prisma.$project_resourcesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project_resources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {project_resourcesFindFirstArgs} args - Arguments to find a Project_resources
     * @example
     * // Get one Project_resources
     * const project_resources = await prisma.project_resources.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends project_resourcesFindFirstArgs>(args?: SelectSubset<T, project_resourcesFindFirstArgs<ExtArgs>>): Prisma__project_resourcesClient<$Result.GetResult<Prisma.$project_resourcesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project_resources that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {project_resourcesFindFirstOrThrowArgs} args - Arguments to find a Project_resources
     * @example
     * // Get one Project_resources
     * const project_resources = await prisma.project_resources.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends project_resourcesFindFirstOrThrowArgs>(args?: SelectSubset<T, project_resourcesFindFirstOrThrowArgs<ExtArgs>>): Prisma__project_resourcesClient<$Result.GetResult<Prisma.$project_resourcesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Project_resources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {project_resourcesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Project_resources
     * const project_resources = await prisma.project_resources.findMany()
     * 
     * // Get first 10 Project_resources
     * const project_resources = await prisma.project_resources.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const project_resourcesWithIdOnly = await prisma.project_resources.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends project_resourcesFindManyArgs>(args?: SelectSubset<T, project_resourcesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$project_resourcesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Project_resources.
     * @param {project_resourcesCreateArgs} args - Arguments to create a Project_resources.
     * @example
     * // Create one Project_resources
     * const Project_resources = await prisma.project_resources.create({
     *   data: {
     *     // ... data to create a Project_resources
     *   }
     * })
     * 
     */
    create<T extends project_resourcesCreateArgs>(args: SelectSubset<T, project_resourcesCreateArgs<ExtArgs>>): Prisma__project_resourcesClient<$Result.GetResult<Prisma.$project_resourcesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Project_resources.
     * @param {project_resourcesCreateManyArgs} args - Arguments to create many Project_resources.
     * @example
     * // Create many Project_resources
     * const project_resources = await prisma.project_resources.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends project_resourcesCreateManyArgs>(args?: SelectSubset<T, project_resourcesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project_resources.
     * @param {project_resourcesDeleteArgs} args - Arguments to delete one Project_resources.
     * @example
     * // Delete one Project_resources
     * const Project_resources = await prisma.project_resources.delete({
     *   where: {
     *     // ... filter to delete one Project_resources
     *   }
     * })
     * 
     */
    delete<T extends project_resourcesDeleteArgs>(args: SelectSubset<T, project_resourcesDeleteArgs<ExtArgs>>): Prisma__project_resourcesClient<$Result.GetResult<Prisma.$project_resourcesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Project_resources.
     * @param {project_resourcesUpdateArgs} args - Arguments to update one Project_resources.
     * @example
     * // Update one Project_resources
     * const project_resources = await prisma.project_resources.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends project_resourcesUpdateArgs>(args: SelectSubset<T, project_resourcesUpdateArgs<ExtArgs>>): Prisma__project_resourcesClient<$Result.GetResult<Prisma.$project_resourcesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Project_resources.
     * @param {project_resourcesDeleteManyArgs} args - Arguments to filter Project_resources to delete.
     * @example
     * // Delete a few Project_resources
     * const { count } = await prisma.project_resources.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends project_resourcesDeleteManyArgs>(args?: SelectSubset<T, project_resourcesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Project_resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {project_resourcesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Project_resources
     * const project_resources = await prisma.project_resources.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends project_resourcesUpdateManyArgs>(args: SelectSubset<T, project_resourcesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project_resources.
     * @param {project_resourcesUpsertArgs} args - Arguments to update or create a Project_resources.
     * @example
     * // Update or create a Project_resources
     * const project_resources = await prisma.project_resources.upsert({
     *   create: {
     *     // ... data to create a Project_resources
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project_resources we want to update
     *   }
     * })
     */
    upsert<T extends project_resourcesUpsertArgs>(args: SelectSubset<T, project_resourcesUpsertArgs<ExtArgs>>): Prisma__project_resourcesClient<$Result.GetResult<Prisma.$project_resourcesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Project_resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {project_resourcesCountArgs} args - Arguments to filter Project_resources to count.
     * @example
     * // Count the number of Project_resources
     * const count = await prisma.project_resources.count({
     *   where: {
     *     // ... the filter for the Project_resources we want to count
     *   }
     * })
    **/
    count<T extends project_resourcesCountArgs>(
      args?: Subset<T, project_resourcesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Project_resourcesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project_resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Project_resourcesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Project_resourcesAggregateArgs>(args: Subset<T, Project_resourcesAggregateArgs>): Prisma.PrismaPromise<GetProject_resourcesAggregateType<T>>

    /**
     * Group by Project_resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {project_resourcesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends project_resourcesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: project_resourcesGroupByArgs['orderBy'] }
        : { orderBy?: project_resourcesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, project_resourcesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProject_resourcesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the project_resources model
   */
  readonly fields: project_resourcesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for project_resources.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__project_resourcesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projects<T extends projectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, projectsDefaultArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    resources<T extends resourcesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, resourcesDefaultArgs<ExtArgs>>): Prisma__resourcesClient<$Result.GetResult<Prisma.$resourcesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the project_resources model
   */
  interface project_resourcesFieldRefs {
    readonly id: FieldRef<"project_resources", 'Int'>
    readonly project_id: FieldRef<"project_resources", 'Int'>
    readonly resource_id: FieldRef<"project_resources", 'Int'>
    readonly assigned_from: FieldRef<"project_resources", 'DateTime'>
    readonly assigned_to: FieldRef<"project_resources", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * project_resources findUnique
   */
  export type project_resourcesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project_resources
     */
    select?: project_resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project_resources
     */
    omit?: project_resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: project_resourcesInclude<ExtArgs> | null
    /**
     * Filter, which project_resources to fetch.
     */
    where: project_resourcesWhereUniqueInput
  }

  /**
   * project_resources findUniqueOrThrow
   */
  export type project_resourcesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project_resources
     */
    select?: project_resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project_resources
     */
    omit?: project_resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: project_resourcesInclude<ExtArgs> | null
    /**
     * Filter, which project_resources to fetch.
     */
    where: project_resourcesWhereUniqueInput
  }

  /**
   * project_resources findFirst
   */
  export type project_resourcesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project_resources
     */
    select?: project_resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project_resources
     */
    omit?: project_resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: project_resourcesInclude<ExtArgs> | null
    /**
     * Filter, which project_resources to fetch.
     */
    where?: project_resourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of project_resources to fetch.
     */
    orderBy?: project_resourcesOrderByWithRelationInput | project_resourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for project_resources.
     */
    cursor?: project_resourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` project_resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` project_resources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of project_resources.
     */
    distinct?: Project_resourcesScalarFieldEnum | Project_resourcesScalarFieldEnum[]
  }

  /**
   * project_resources findFirstOrThrow
   */
  export type project_resourcesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project_resources
     */
    select?: project_resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project_resources
     */
    omit?: project_resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: project_resourcesInclude<ExtArgs> | null
    /**
     * Filter, which project_resources to fetch.
     */
    where?: project_resourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of project_resources to fetch.
     */
    orderBy?: project_resourcesOrderByWithRelationInput | project_resourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for project_resources.
     */
    cursor?: project_resourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` project_resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` project_resources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of project_resources.
     */
    distinct?: Project_resourcesScalarFieldEnum | Project_resourcesScalarFieldEnum[]
  }

  /**
   * project_resources findMany
   */
  export type project_resourcesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project_resources
     */
    select?: project_resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project_resources
     */
    omit?: project_resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: project_resourcesInclude<ExtArgs> | null
    /**
     * Filter, which project_resources to fetch.
     */
    where?: project_resourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of project_resources to fetch.
     */
    orderBy?: project_resourcesOrderByWithRelationInput | project_resourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing project_resources.
     */
    cursor?: project_resourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` project_resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` project_resources.
     */
    skip?: number
    distinct?: Project_resourcesScalarFieldEnum | Project_resourcesScalarFieldEnum[]
  }

  /**
   * project_resources create
   */
  export type project_resourcesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project_resources
     */
    select?: project_resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project_resources
     */
    omit?: project_resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: project_resourcesInclude<ExtArgs> | null
    /**
     * The data needed to create a project_resources.
     */
    data: XOR<project_resourcesCreateInput, project_resourcesUncheckedCreateInput>
  }

  /**
   * project_resources createMany
   */
  export type project_resourcesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many project_resources.
     */
    data: project_resourcesCreateManyInput | project_resourcesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * project_resources update
   */
  export type project_resourcesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project_resources
     */
    select?: project_resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project_resources
     */
    omit?: project_resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: project_resourcesInclude<ExtArgs> | null
    /**
     * The data needed to update a project_resources.
     */
    data: XOR<project_resourcesUpdateInput, project_resourcesUncheckedUpdateInput>
    /**
     * Choose, which project_resources to update.
     */
    where: project_resourcesWhereUniqueInput
  }

  /**
   * project_resources updateMany
   */
  export type project_resourcesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update project_resources.
     */
    data: XOR<project_resourcesUpdateManyMutationInput, project_resourcesUncheckedUpdateManyInput>
    /**
     * Filter which project_resources to update
     */
    where?: project_resourcesWhereInput
    /**
     * Limit how many project_resources to update.
     */
    limit?: number
  }

  /**
   * project_resources upsert
   */
  export type project_resourcesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project_resources
     */
    select?: project_resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project_resources
     */
    omit?: project_resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: project_resourcesInclude<ExtArgs> | null
    /**
     * The filter to search for the project_resources to update in case it exists.
     */
    where: project_resourcesWhereUniqueInput
    /**
     * In case the project_resources found by the `where` argument doesn't exist, create a new project_resources with this data.
     */
    create: XOR<project_resourcesCreateInput, project_resourcesUncheckedCreateInput>
    /**
     * In case the project_resources was found with the provided `where` argument, update it with this data.
     */
    update: XOR<project_resourcesUpdateInput, project_resourcesUncheckedUpdateInput>
  }

  /**
   * project_resources delete
   */
  export type project_resourcesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project_resources
     */
    select?: project_resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project_resources
     */
    omit?: project_resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: project_resourcesInclude<ExtArgs> | null
    /**
     * Filter which project_resources to delete.
     */
    where: project_resourcesWhereUniqueInput
  }

  /**
   * project_resources deleteMany
   */
  export type project_resourcesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which project_resources to delete
     */
    where?: project_resourcesWhereInput
    /**
     * Limit how many project_resources to delete.
     */
    limit?: number
  }

  /**
   * project_resources without action
   */
  export type project_resourcesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project_resources
     */
    select?: project_resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project_resources
     */
    omit?: project_resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: project_resourcesInclude<ExtArgs> | null
  }


  /**
   * Model projects
   */

  export type AggregateProjects = {
    _count: ProjectsCountAggregateOutputType | null
    _avg: ProjectsAvgAggregateOutputType | null
    _sum: ProjectsSumAggregateOutputType | null
    _min: ProjectsMinAggregateOutputType | null
    _max: ProjectsMaxAggregateOutputType | null
  }

  export type ProjectsAvgAggregateOutputType = {
    id: number | null
    team_id: number | null
  }

  export type ProjectsSumAggregateOutputType = {
    id: number | null
    team_id: number | null
  }

  export type ProjectsMinAggregateOutputType = {
    id: number | null
    team_id: number | null
    name: string | null
    description: string | null
    status: $Enums.projects_status | null
    start_date: Date | null
    end_date: Date | null
    created_at: Date | null
  }

  export type ProjectsMaxAggregateOutputType = {
    id: number | null
    team_id: number | null
    name: string | null
    description: string | null
    status: $Enums.projects_status | null
    start_date: Date | null
    end_date: Date | null
    created_at: Date | null
  }

  export type ProjectsCountAggregateOutputType = {
    id: number
    team_id: number
    name: number
    description: number
    status: number
    start_date: number
    end_date: number
    created_at: number
    _all: number
  }


  export type ProjectsAvgAggregateInputType = {
    id?: true
    team_id?: true
  }

  export type ProjectsSumAggregateInputType = {
    id?: true
    team_id?: true
  }

  export type ProjectsMinAggregateInputType = {
    id?: true
    team_id?: true
    name?: true
    description?: true
    status?: true
    start_date?: true
    end_date?: true
    created_at?: true
  }

  export type ProjectsMaxAggregateInputType = {
    id?: true
    team_id?: true
    name?: true
    description?: true
    status?: true
    start_date?: true
    end_date?: true
    created_at?: true
  }

  export type ProjectsCountAggregateInputType = {
    id?: true
    team_id?: true
    name?: true
    description?: true
    status?: true
    start_date?: true
    end_date?: true
    created_at?: true
    _all?: true
  }

  export type ProjectsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which projects to aggregate.
     */
    where?: projectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projects to fetch.
     */
    orderBy?: projectsOrderByWithRelationInput | projectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: projectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned projects
    **/
    _count?: true | ProjectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectsMaxAggregateInputType
  }

  export type GetProjectsAggregateType<T extends ProjectsAggregateArgs> = {
        [P in keyof T & keyof AggregateProjects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjects[P]>
      : GetScalarType<T[P], AggregateProjects[P]>
  }




  export type projectsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: projectsWhereInput
    orderBy?: projectsOrderByWithAggregationInput | projectsOrderByWithAggregationInput[]
    by: ProjectsScalarFieldEnum[] | ProjectsScalarFieldEnum
    having?: projectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectsCountAggregateInputType | true
    _avg?: ProjectsAvgAggregateInputType
    _sum?: ProjectsSumAggregateInputType
    _min?: ProjectsMinAggregateInputType
    _max?: ProjectsMaxAggregateInputType
  }

  export type ProjectsGroupByOutputType = {
    id: number
    team_id: number | null
    name: string
    description: string | null
    status: $Enums.projects_status | null
    start_date: Date | null
    end_date: Date | null
    created_at: Date | null
    _count: ProjectsCountAggregateOutputType | null
    _avg: ProjectsAvgAggregateOutputType | null
    _sum: ProjectsSumAggregateOutputType | null
    _min: ProjectsMinAggregateOutputType | null
    _max: ProjectsMaxAggregateOutputType | null
  }

  type GetProjectsGroupByPayload<T extends projectsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectsGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectsGroupByOutputType[P]>
        }
      >
    >


  export type projectsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    start_date?: boolean
    end_date?: boolean
    created_at?: boolean
    budgets?: boolean | projects$budgetsArgs<ExtArgs>
    contracts?: boolean | projects$contractsArgs<ExtArgs>
    costs?: boolean | projects$costsArgs<ExtArgs>
    documents?: boolean | projects$documentsArgs<ExtArgs>
    events?: boolean | projects$eventsArgs<ExtArgs>
    leads?: boolean | projects$leadsArgs<ExtArgs>
    permissions?: boolean | projects$permissionsArgs<ExtArgs>
    project_resources?: boolean | projects$project_resourcesArgs<ExtArgs>
    teams?: boolean | projects$teamsArgs<ExtArgs>
    reports?: boolean | projects$reportsArgs<ExtArgs>
    sprints?: boolean | projects$sprintsArgs<ExtArgs>
    tasks?: boolean | projects$tasksArgs<ExtArgs>
    tickets?: boolean | projects$ticketsArgs<ExtArgs>
    _count?: boolean | ProjectsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projects"]>



  export type projectsSelectScalar = {
    id?: boolean
    team_id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    start_date?: boolean
    end_date?: boolean
    created_at?: boolean
  }

  export type projectsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "team_id" | "name" | "description" | "status" | "start_date" | "end_date" | "created_at", ExtArgs["result"]["projects"]>
  export type projectsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    budgets?: boolean | projects$budgetsArgs<ExtArgs>
    contracts?: boolean | projects$contractsArgs<ExtArgs>
    costs?: boolean | projects$costsArgs<ExtArgs>
    documents?: boolean | projects$documentsArgs<ExtArgs>
    events?: boolean | projects$eventsArgs<ExtArgs>
    leads?: boolean | projects$leadsArgs<ExtArgs>
    permissions?: boolean | projects$permissionsArgs<ExtArgs>
    project_resources?: boolean | projects$project_resourcesArgs<ExtArgs>
    teams?: boolean | projects$teamsArgs<ExtArgs>
    reports?: boolean | projects$reportsArgs<ExtArgs>
    sprints?: boolean | projects$sprintsArgs<ExtArgs>
    tasks?: boolean | projects$tasksArgs<ExtArgs>
    tickets?: boolean | projects$ticketsArgs<ExtArgs>
    _count?: boolean | ProjectsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $projectsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "projects"
    objects: {
      budgets: Prisma.$budgetsPayload<ExtArgs>[]
      contracts: Prisma.$contractsPayload<ExtArgs>[]
      costs: Prisma.$costsPayload<ExtArgs>[]
      documents: Prisma.$documentsPayload<ExtArgs>[]
      events: Prisma.$eventsPayload<ExtArgs>[]
      leads: Prisma.$leadsPayload<ExtArgs>[]
      permissions: Prisma.$permissionsPayload<ExtArgs>[]
      project_resources: Prisma.$project_resourcesPayload<ExtArgs>[]
      teams: Prisma.$teamsPayload<ExtArgs> | null
      reports: Prisma.$reportsPayload<ExtArgs>[]
      sprints: Prisma.$sprintsPayload<ExtArgs>[]
      tasks: Prisma.$tasksPayload<ExtArgs>[]
      tickets: Prisma.$ticketsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      team_id: number | null
      name: string
      description: string | null
      status: $Enums.projects_status | null
      start_date: Date | null
      end_date: Date | null
      created_at: Date | null
    }, ExtArgs["result"]["projects"]>
    composites: {}
  }

  type projectsGetPayload<S extends boolean | null | undefined | projectsDefaultArgs> = $Result.GetResult<Prisma.$projectsPayload, S>

  type projectsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<projectsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectsCountAggregateInputType | true
    }

  export interface projectsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['projects'], meta: { name: 'projects' } }
    /**
     * Find zero or one Projects that matches the filter.
     * @param {projectsFindUniqueArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends projectsFindUniqueArgs>(args: SelectSubset<T, projectsFindUniqueArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Projects that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {projectsFindUniqueOrThrowArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends projectsFindUniqueOrThrowArgs>(args: SelectSubset<T, projectsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectsFindFirstArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends projectsFindFirstArgs>(args?: SelectSubset<T, projectsFindFirstArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Projects that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectsFindFirstOrThrowArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends projectsFindFirstOrThrowArgs>(args?: SelectSubset<T, projectsFindFirstOrThrowArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.projects.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.projects.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectsWithIdOnly = await prisma.projects.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends projectsFindManyArgs>(args?: SelectSubset<T, projectsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Projects.
     * @param {projectsCreateArgs} args - Arguments to create a Projects.
     * @example
     * // Create one Projects
     * const Projects = await prisma.projects.create({
     *   data: {
     *     // ... data to create a Projects
     *   }
     * })
     * 
     */
    create<T extends projectsCreateArgs>(args: SelectSubset<T, projectsCreateArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {projectsCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const projects = await prisma.projects.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends projectsCreateManyArgs>(args?: SelectSubset<T, projectsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Projects.
     * @param {projectsDeleteArgs} args - Arguments to delete one Projects.
     * @example
     * // Delete one Projects
     * const Projects = await prisma.projects.delete({
     *   where: {
     *     // ... filter to delete one Projects
     *   }
     * })
     * 
     */
    delete<T extends projectsDeleteArgs>(args: SelectSubset<T, projectsDeleteArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Projects.
     * @param {projectsUpdateArgs} args - Arguments to update one Projects.
     * @example
     * // Update one Projects
     * const projects = await prisma.projects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends projectsUpdateArgs>(args: SelectSubset<T, projectsUpdateArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {projectsDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.projects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends projectsDeleteManyArgs>(args?: SelectSubset<T, projectsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const projects = await prisma.projects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends projectsUpdateManyArgs>(args: SelectSubset<T, projectsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Projects.
     * @param {projectsUpsertArgs} args - Arguments to update or create a Projects.
     * @example
     * // Update or create a Projects
     * const projects = await prisma.projects.upsert({
     *   create: {
     *     // ... data to create a Projects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Projects we want to update
     *   }
     * })
     */
    upsert<T extends projectsUpsertArgs>(args: SelectSubset<T, projectsUpsertArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectsCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.projects.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends projectsCountArgs>(
      args?: Subset<T, projectsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectsAggregateArgs>(args: Subset<T, ProjectsAggregateArgs>): Prisma.PrismaPromise<GetProjectsAggregateType<T>>

    /**
     * Group by Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends projectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: projectsGroupByArgs['orderBy'] }
        : { orderBy?: projectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, projectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the projects model
   */
  readonly fields: projectsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for projects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__projectsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    budgets<T extends projects$budgetsArgs<ExtArgs> = {}>(args?: Subset<T, projects$budgetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$budgetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contracts<T extends projects$contractsArgs<ExtArgs> = {}>(args?: Subset<T, projects$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contractsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    costs<T extends projects$costsArgs<ExtArgs> = {}>(args?: Subset<T, projects$costsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$costsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends projects$documentsArgs<ExtArgs> = {}>(args?: Subset<T, projects$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$documentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    events<T extends projects$eventsArgs<ExtArgs> = {}>(args?: Subset<T, projects$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$eventsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leads<T extends projects$leadsArgs<ExtArgs> = {}>(args?: Subset<T, projects$leadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$leadsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    permissions<T extends projects$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, projects$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    project_resources<T extends projects$project_resourcesArgs<ExtArgs> = {}>(args?: Subset<T, projects$project_resourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$project_resourcesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teams<T extends projects$teamsArgs<ExtArgs> = {}>(args?: Subset<T, projects$teamsArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    reports<T extends projects$reportsArgs<ExtArgs> = {}>(args?: Subset<T, projects$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sprints<T extends projects$sprintsArgs<ExtArgs> = {}>(args?: Subset<T, projects$sprintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sprintsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tasks<T extends projects$tasksArgs<ExtArgs> = {}>(args?: Subset<T, projects$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tickets<T extends projects$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, projects$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the projects model
   */
  interface projectsFieldRefs {
    readonly id: FieldRef<"projects", 'Int'>
    readonly team_id: FieldRef<"projects", 'Int'>
    readonly name: FieldRef<"projects", 'String'>
    readonly description: FieldRef<"projects", 'String'>
    readonly status: FieldRef<"projects", 'projects_status'>
    readonly start_date: FieldRef<"projects", 'DateTime'>
    readonly end_date: FieldRef<"projects", 'DateTime'>
    readonly created_at: FieldRef<"projects", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * projects findUnique
   */
  export type projectsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * Filter, which projects to fetch.
     */
    where: projectsWhereUniqueInput
  }

  /**
   * projects findUniqueOrThrow
   */
  export type projectsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * Filter, which projects to fetch.
     */
    where: projectsWhereUniqueInput
  }

  /**
   * projects findFirst
   */
  export type projectsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * Filter, which projects to fetch.
     */
    where?: projectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projects to fetch.
     */
    orderBy?: projectsOrderByWithRelationInput | projectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for projects.
     */
    cursor?: projectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of projects.
     */
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * projects findFirstOrThrow
   */
  export type projectsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * Filter, which projects to fetch.
     */
    where?: projectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projects to fetch.
     */
    orderBy?: projectsOrderByWithRelationInput | projectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for projects.
     */
    cursor?: projectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of projects.
     */
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * projects findMany
   */
  export type projectsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * Filter, which projects to fetch.
     */
    where?: projectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projects to fetch.
     */
    orderBy?: projectsOrderByWithRelationInput | projectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing projects.
     */
    cursor?: projectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects.
     */
    skip?: number
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * projects create
   */
  export type projectsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * The data needed to create a projects.
     */
    data: XOR<projectsCreateInput, projectsUncheckedCreateInput>
  }

  /**
   * projects createMany
   */
  export type projectsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many projects.
     */
    data: projectsCreateManyInput | projectsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * projects update
   */
  export type projectsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * The data needed to update a projects.
     */
    data: XOR<projectsUpdateInput, projectsUncheckedUpdateInput>
    /**
     * Choose, which projects to update.
     */
    where: projectsWhereUniqueInput
  }

  /**
   * projects updateMany
   */
  export type projectsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update projects.
     */
    data: XOR<projectsUpdateManyMutationInput, projectsUncheckedUpdateManyInput>
    /**
     * Filter which projects to update
     */
    where?: projectsWhereInput
    /**
     * Limit how many projects to update.
     */
    limit?: number
  }

  /**
   * projects upsert
   */
  export type projectsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * The filter to search for the projects to update in case it exists.
     */
    where: projectsWhereUniqueInput
    /**
     * In case the projects found by the `where` argument doesn't exist, create a new projects with this data.
     */
    create: XOR<projectsCreateInput, projectsUncheckedCreateInput>
    /**
     * In case the projects was found with the provided `where` argument, update it with this data.
     */
    update: XOR<projectsUpdateInput, projectsUncheckedUpdateInput>
  }

  /**
   * projects delete
   */
  export type projectsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * Filter which projects to delete.
     */
    where: projectsWhereUniqueInput
  }

  /**
   * projects deleteMany
   */
  export type projectsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which projects to delete
     */
    where?: projectsWhereInput
    /**
     * Limit how many projects to delete.
     */
    limit?: number
  }

  /**
   * projects.budgets
   */
  export type projects$budgetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the budgets
     */
    select?: budgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the budgets
     */
    omit?: budgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: budgetsInclude<ExtArgs> | null
    where?: budgetsWhereInput
    orderBy?: budgetsOrderByWithRelationInput | budgetsOrderByWithRelationInput[]
    cursor?: budgetsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BudgetsScalarFieldEnum | BudgetsScalarFieldEnum[]
  }

  /**
   * projects.contracts
   */
  export type projects$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contracts
     */
    select?: contractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contracts
     */
    omit?: contractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contractsInclude<ExtArgs> | null
    where?: contractsWhereInput
    orderBy?: contractsOrderByWithRelationInput | contractsOrderByWithRelationInput[]
    cursor?: contractsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractsScalarFieldEnum | ContractsScalarFieldEnum[]
  }

  /**
   * projects.costs
   */
  export type projects$costsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the costs
     */
    select?: costsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the costs
     */
    omit?: costsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: costsInclude<ExtArgs> | null
    where?: costsWhereInput
    orderBy?: costsOrderByWithRelationInput | costsOrderByWithRelationInput[]
    cursor?: costsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CostsScalarFieldEnum | CostsScalarFieldEnum[]
  }

  /**
   * projects.documents
   */
  export type projects$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documents
     */
    select?: documentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documents
     */
    omit?: documentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentsInclude<ExtArgs> | null
    where?: documentsWhereInput
    orderBy?: documentsOrderByWithRelationInput | documentsOrderByWithRelationInput[]
    cursor?: documentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentsScalarFieldEnum | DocumentsScalarFieldEnum[]
  }

  /**
   * projects.events
   */
  export type projects$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the events
     */
    select?: eventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the events
     */
    omit?: eventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventsInclude<ExtArgs> | null
    where?: eventsWhereInput
    orderBy?: eventsOrderByWithRelationInput | eventsOrderByWithRelationInput[]
    cursor?: eventsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }

  /**
   * projects.leads
   */
  export type projects$leadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leads
     */
    select?: leadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leads
     */
    omit?: leadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leadsInclude<ExtArgs> | null
    where?: leadsWhereInput
    orderBy?: leadsOrderByWithRelationInput | leadsOrderByWithRelationInput[]
    cursor?: leadsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadsScalarFieldEnum | LeadsScalarFieldEnum[]
  }

  /**
   * projects.permissions
   */
  export type projects$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    where?: permissionsWhereInput
    orderBy?: permissionsOrderByWithRelationInput | permissionsOrderByWithRelationInput[]
    cursor?: permissionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PermissionsScalarFieldEnum | PermissionsScalarFieldEnum[]
  }

  /**
   * projects.project_resources
   */
  export type projects$project_resourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project_resources
     */
    select?: project_resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project_resources
     */
    omit?: project_resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: project_resourcesInclude<ExtArgs> | null
    where?: project_resourcesWhereInput
    orderBy?: project_resourcesOrderByWithRelationInput | project_resourcesOrderByWithRelationInput[]
    cursor?: project_resourcesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Project_resourcesScalarFieldEnum | Project_resourcesScalarFieldEnum[]
  }

  /**
   * projects.teams
   */
  export type projects$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    where?: teamsWhereInput
  }

  /**
   * projects.reports
   */
  export type projects$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reports
     */
    omit?: reportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    where?: reportsWhereInput
    orderBy?: reportsOrderByWithRelationInput | reportsOrderByWithRelationInput[]
    cursor?: reportsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * projects.sprints
   */
  export type projects$sprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprints
     */
    select?: sprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprints
     */
    omit?: sprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprintsInclude<ExtArgs> | null
    where?: sprintsWhereInput
    orderBy?: sprintsOrderByWithRelationInput | sprintsOrderByWithRelationInput[]
    cursor?: sprintsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SprintsScalarFieldEnum | SprintsScalarFieldEnum[]
  }

  /**
   * projects.tasks
   */
  export type projects$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    where?: tasksWhereInput
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    cursor?: tasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * projects.tickets
   */
  export type projects$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    where?: ticketsWhereInput
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    cursor?: ticketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * projects without action
   */
  export type projectsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
  }


  /**
   * Model reports
   */

  export type AggregateReports = {
    _count: ReportsCountAggregateOutputType | null
    _avg: ReportsAvgAggregateOutputType | null
    _sum: ReportsSumAggregateOutputType | null
    _min: ReportsMinAggregateOutputType | null
    _max: ReportsMaxAggregateOutputType | null
  }

  export type ReportsAvgAggregateOutputType = {
    id: number | null
    project_id: number | null
    team_id: number | null
    user_id: number | null
  }

  export type ReportsSumAggregateOutputType = {
    id: number | null
    project_id: number | null
    team_id: number | null
    user_id: number | null
  }

  export type ReportsMinAggregateOutputType = {
    id: number | null
    project_id: number | null
    team_id: number | null
    user_id: number | null
    type: $Enums.reports_type | null
    created_at: Date | null
  }

  export type ReportsMaxAggregateOutputType = {
    id: number | null
    project_id: number | null
    team_id: number | null
    user_id: number | null
    type: $Enums.reports_type | null
    created_at: Date | null
  }

  export type ReportsCountAggregateOutputType = {
    id: number
    project_id: number
    team_id: number
    user_id: number
    type: number
    data: number
    created_at: number
    _all: number
  }


  export type ReportsAvgAggregateInputType = {
    id?: true
    project_id?: true
    team_id?: true
    user_id?: true
  }

  export type ReportsSumAggregateInputType = {
    id?: true
    project_id?: true
    team_id?: true
    user_id?: true
  }

  export type ReportsMinAggregateInputType = {
    id?: true
    project_id?: true
    team_id?: true
    user_id?: true
    type?: true
    created_at?: true
  }

  export type ReportsMaxAggregateInputType = {
    id?: true
    project_id?: true
    team_id?: true
    user_id?: true
    type?: true
    created_at?: true
  }

  export type ReportsCountAggregateInputType = {
    id?: true
    project_id?: true
    team_id?: true
    user_id?: true
    type?: true
    data?: true
    created_at?: true
    _all?: true
  }

  export type ReportsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reports to aggregate.
     */
    where?: reportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: reportsOrderByWithRelationInput | reportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reports
    **/
    _count?: true | ReportsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportsMaxAggregateInputType
  }

  export type GetReportsAggregateType<T extends ReportsAggregateArgs> = {
        [P in keyof T & keyof AggregateReports]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReports[P]>
      : GetScalarType<T[P], AggregateReports[P]>
  }




  export type reportsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reportsWhereInput
    orderBy?: reportsOrderByWithAggregationInput | reportsOrderByWithAggregationInput[]
    by: ReportsScalarFieldEnum[] | ReportsScalarFieldEnum
    having?: reportsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportsCountAggregateInputType | true
    _avg?: ReportsAvgAggregateInputType
    _sum?: ReportsSumAggregateInputType
    _min?: ReportsMinAggregateInputType
    _max?: ReportsMaxAggregateInputType
  }

  export type ReportsGroupByOutputType = {
    id: number
    project_id: number | null
    team_id: number | null
    user_id: number | null
    type: $Enums.reports_type | null
    data: JsonValue | null
    created_at: Date | null
    _count: ReportsCountAggregateOutputType | null
    _avg: ReportsAvgAggregateOutputType | null
    _sum: ReportsSumAggregateOutputType | null
    _min: ReportsMinAggregateOutputType | null
    _max: ReportsMaxAggregateOutputType | null
  }

  type GetReportsGroupByPayload<T extends reportsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportsGroupByOutputType[P]>
            : GetScalarType<T[P], ReportsGroupByOutputType[P]>
        }
      >
    >


  export type reportsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    project_id?: boolean
    team_id?: boolean
    user_id?: boolean
    type?: boolean
    data?: boolean
    created_at?: boolean
    projects?: boolean | reports$projectsArgs<ExtArgs>
    teams?: boolean | reports$teamsArgs<ExtArgs>
    users?: boolean | reports$usersArgs<ExtArgs>
  }, ExtArgs["result"]["reports"]>



  export type reportsSelectScalar = {
    id?: boolean
    project_id?: boolean
    team_id?: boolean
    user_id?: boolean
    type?: boolean
    data?: boolean
    created_at?: boolean
  }

  export type reportsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "project_id" | "team_id" | "user_id" | "type" | "data" | "created_at", ExtArgs["result"]["reports"]>
  export type reportsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | reports$projectsArgs<ExtArgs>
    teams?: boolean | reports$teamsArgs<ExtArgs>
    users?: boolean | reports$usersArgs<ExtArgs>
  }

  export type $reportsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "reports"
    objects: {
      projects: Prisma.$projectsPayload<ExtArgs> | null
      teams: Prisma.$teamsPayload<ExtArgs> | null
      users: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      project_id: number | null
      team_id: number | null
      user_id: number | null
      type: $Enums.reports_type | null
      data: Prisma.JsonValue | null
      created_at: Date | null
    }, ExtArgs["result"]["reports"]>
    composites: {}
  }

  type reportsGetPayload<S extends boolean | null | undefined | reportsDefaultArgs> = $Result.GetResult<Prisma.$reportsPayload, S>

  type reportsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<reportsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportsCountAggregateInputType | true
    }

  export interface reportsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['reports'], meta: { name: 'reports' } }
    /**
     * Find zero or one Reports that matches the filter.
     * @param {reportsFindUniqueArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends reportsFindUniqueArgs>(args: SelectSubset<T, reportsFindUniqueArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Reports that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {reportsFindUniqueOrThrowArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends reportsFindUniqueOrThrowArgs>(args: SelectSubset<T, reportsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsFindFirstArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends reportsFindFirstArgs>(args?: SelectSubset<T, reportsFindFirstArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reports that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsFindFirstOrThrowArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends reportsFindFirstOrThrowArgs>(args?: SelectSubset<T, reportsFindFirstOrThrowArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.reports.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.reports.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportsWithIdOnly = await prisma.reports.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends reportsFindManyArgs>(args?: SelectSubset<T, reportsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Reports.
     * @param {reportsCreateArgs} args - Arguments to create a Reports.
     * @example
     * // Create one Reports
     * const Reports = await prisma.reports.create({
     *   data: {
     *     // ... data to create a Reports
     *   }
     * })
     * 
     */
    create<T extends reportsCreateArgs>(args: SelectSubset<T, reportsCreateArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reports.
     * @param {reportsCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const reports = await prisma.reports.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends reportsCreateManyArgs>(args?: SelectSubset<T, reportsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reports.
     * @param {reportsDeleteArgs} args - Arguments to delete one Reports.
     * @example
     * // Delete one Reports
     * const Reports = await prisma.reports.delete({
     *   where: {
     *     // ... filter to delete one Reports
     *   }
     * })
     * 
     */
    delete<T extends reportsDeleteArgs>(args: SelectSubset<T, reportsDeleteArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Reports.
     * @param {reportsUpdateArgs} args - Arguments to update one Reports.
     * @example
     * // Update one Reports
     * const reports = await prisma.reports.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends reportsUpdateArgs>(args: SelectSubset<T, reportsUpdateArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reports.
     * @param {reportsDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.reports.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends reportsDeleteManyArgs>(args?: SelectSubset<T, reportsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const reports = await prisma.reports.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends reportsUpdateManyArgs>(args: SelectSubset<T, reportsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reports.
     * @param {reportsUpsertArgs} args - Arguments to update or create a Reports.
     * @example
     * // Update or create a Reports
     * const reports = await prisma.reports.upsert({
     *   create: {
     *     // ... data to create a Reports
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reports we want to update
     *   }
     * })
     */
    upsert<T extends reportsUpsertArgs>(args: SelectSubset<T, reportsUpsertArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.reports.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends reportsCountArgs>(
      args?: Subset<T, reportsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportsAggregateArgs>(args: Subset<T, ReportsAggregateArgs>): Prisma.PrismaPromise<GetReportsAggregateType<T>>

    /**
     * Group by Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reportsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reportsGroupByArgs['orderBy'] }
        : { orderBy?: reportsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reportsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the reports model
   */
  readonly fields: reportsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for reports.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__reportsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projects<T extends reports$projectsArgs<ExtArgs> = {}>(args?: Subset<T, reports$projectsArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    teams<T extends reports$teamsArgs<ExtArgs> = {}>(args?: Subset<T, reports$teamsArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    users<T extends reports$usersArgs<ExtArgs> = {}>(args?: Subset<T, reports$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the reports model
   */
  interface reportsFieldRefs {
    readonly id: FieldRef<"reports", 'Int'>
    readonly project_id: FieldRef<"reports", 'Int'>
    readonly team_id: FieldRef<"reports", 'Int'>
    readonly user_id: FieldRef<"reports", 'Int'>
    readonly type: FieldRef<"reports", 'reports_type'>
    readonly data: FieldRef<"reports", 'Json'>
    readonly created_at: FieldRef<"reports", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * reports findUnique
   */
  export type reportsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reports
     */
    omit?: reportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * Filter, which reports to fetch.
     */
    where: reportsWhereUniqueInput
  }

  /**
   * reports findUniqueOrThrow
   */
  export type reportsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reports
     */
    omit?: reportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * Filter, which reports to fetch.
     */
    where: reportsWhereUniqueInput
  }

  /**
   * reports findFirst
   */
  export type reportsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reports
     */
    omit?: reportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * Filter, which reports to fetch.
     */
    where?: reportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: reportsOrderByWithRelationInput | reportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reports.
     */
    cursor?: reportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reports.
     */
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * reports findFirstOrThrow
   */
  export type reportsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reports
     */
    omit?: reportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * Filter, which reports to fetch.
     */
    where?: reportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: reportsOrderByWithRelationInput | reportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reports.
     */
    cursor?: reportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reports.
     */
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * reports findMany
   */
  export type reportsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reports
     */
    omit?: reportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * Filter, which reports to fetch.
     */
    where?: reportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: reportsOrderByWithRelationInput | reportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reports.
     */
    cursor?: reportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * reports create
   */
  export type reportsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reports
     */
    omit?: reportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * The data needed to create a reports.
     */
    data?: XOR<reportsCreateInput, reportsUncheckedCreateInput>
  }

  /**
   * reports createMany
   */
  export type reportsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reports.
     */
    data: reportsCreateManyInput | reportsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * reports update
   */
  export type reportsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reports
     */
    omit?: reportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * The data needed to update a reports.
     */
    data: XOR<reportsUpdateInput, reportsUncheckedUpdateInput>
    /**
     * Choose, which reports to update.
     */
    where: reportsWhereUniqueInput
  }

  /**
   * reports updateMany
   */
  export type reportsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reports.
     */
    data: XOR<reportsUpdateManyMutationInput, reportsUncheckedUpdateManyInput>
    /**
     * Filter which reports to update
     */
    where?: reportsWhereInput
    /**
     * Limit how many reports to update.
     */
    limit?: number
  }

  /**
   * reports upsert
   */
  export type reportsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reports
     */
    omit?: reportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * The filter to search for the reports to update in case it exists.
     */
    where: reportsWhereUniqueInput
    /**
     * In case the reports found by the `where` argument doesn't exist, create a new reports with this data.
     */
    create: XOR<reportsCreateInput, reportsUncheckedCreateInput>
    /**
     * In case the reports was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reportsUpdateInput, reportsUncheckedUpdateInput>
  }

  /**
   * reports delete
   */
  export type reportsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reports
     */
    omit?: reportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * Filter which reports to delete.
     */
    where: reportsWhereUniqueInput
  }

  /**
   * reports deleteMany
   */
  export type reportsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reports to delete
     */
    where?: reportsWhereInput
    /**
     * Limit how many reports to delete.
     */
    limit?: number
  }

  /**
   * reports.projects
   */
  export type reports$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    where?: projectsWhereInput
  }

  /**
   * reports.teams
   */
  export type reports$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    where?: teamsWhereInput
  }

  /**
   * reports.users
   */
  export type reports$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * reports without action
   */
  export type reportsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reports
     */
    omit?: reportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
  }


  /**
   * Model resources
   */

  export type AggregateResources = {
    _count: ResourcesCountAggregateOutputType | null
    _avg: ResourcesAvgAggregateOutputType | null
    _sum: ResourcesSumAggregateOutputType | null
    _min: ResourcesMinAggregateOutputType | null
    _max: ResourcesMaxAggregateOutputType | null
  }

  export type ResourcesAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    team_id: number | null
  }

  export type ResourcesSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    team_id: number | null
  }

  export type ResourcesMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: $Enums.resources_type | null
    user_id: number | null
    team_id: number | null
    availability: $Enums.resources_availability | null
  }

  export type ResourcesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: $Enums.resources_type | null
    user_id: number | null
    team_id: number | null
    availability: $Enums.resources_availability | null
  }

  export type ResourcesCountAggregateOutputType = {
    id: number
    name: number
    type: number
    user_id: number
    team_id: number
    availability: number
    _all: number
  }


  export type ResourcesAvgAggregateInputType = {
    id?: true
    user_id?: true
    team_id?: true
  }

  export type ResourcesSumAggregateInputType = {
    id?: true
    user_id?: true
    team_id?: true
  }

  export type ResourcesMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    user_id?: true
    team_id?: true
    availability?: true
  }

  export type ResourcesMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    user_id?: true
    team_id?: true
    availability?: true
  }

  export type ResourcesCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    user_id?: true
    team_id?: true
    availability?: true
    _all?: true
  }

  export type ResourcesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which resources to aggregate.
     */
    where?: resourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of resources to fetch.
     */
    orderBy?: resourcesOrderByWithRelationInput | resourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: resourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` resources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned resources
    **/
    _count?: true | ResourcesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResourcesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResourcesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResourcesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResourcesMaxAggregateInputType
  }

  export type GetResourcesAggregateType<T extends ResourcesAggregateArgs> = {
        [P in keyof T & keyof AggregateResources]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResources[P]>
      : GetScalarType<T[P], AggregateResources[P]>
  }




  export type resourcesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: resourcesWhereInput
    orderBy?: resourcesOrderByWithAggregationInput | resourcesOrderByWithAggregationInput[]
    by: ResourcesScalarFieldEnum[] | ResourcesScalarFieldEnum
    having?: resourcesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResourcesCountAggregateInputType | true
    _avg?: ResourcesAvgAggregateInputType
    _sum?: ResourcesSumAggregateInputType
    _min?: ResourcesMinAggregateInputType
    _max?: ResourcesMaxAggregateInputType
  }

  export type ResourcesGroupByOutputType = {
    id: number
    name: string
    type: $Enums.resources_type | null
    user_id: number | null
    team_id: number | null
    availability: $Enums.resources_availability | null
    _count: ResourcesCountAggregateOutputType | null
    _avg: ResourcesAvgAggregateOutputType | null
    _sum: ResourcesSumAggregateOutputType | null
    _min: ResourcesMinAggregateOutputType | null
    _max: ResourcesMaxAggregateOutputType | null
  }

  type GetResourcesGroupByPayload<T extends resourcesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResourcesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResourcesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResourcesGroupByOutputType[P]>
            : GetScalarType<T[P], ResourcesGroupByOutputType[P]>
        }
      >
    >


  export type resourcesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    user_id?: boolean
    team_id?: boolean
    availability?: boolean
    project_resources?: boolean | resources$project_resourcesArgs<ExtArgs>
    users?: boolean | resources$usersArgs<ExtArgs>
    teams?: boolean | resources$teamsArgs<ExtArgs>
    _count?: boolean | ResourcesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resources"]>



  export type resourcesSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    user_id?: boolean
    team_id?: boolean
    availability?: boolean
  }

  export type resourcesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "user_id" | "team_id" | "availability", ExtArgs["result"]["resources"]>
  export type resourcesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project_resources?: boolean | resources$project_resourcesArgs<ExtArgs>
    users?: boolean | resources$usersArgs<ExtArgs>
    teams?: boolean | resources$teamsArgs<ExtArgs>
    _count?: boolean | ResourcesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $resourcesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "resources"
    objects: {
      project_resources: Prisma.$project_resourcesPayload<ExtArgs>[]
      users: Prisma.$usersPayload<ExtArgs> | null
      teams: Prisma.$teamsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: $Enums.resources_type | null
      user_id: number | null
      team_id: number | null
      availability: $Enums.resources_availability | null
    }, ExtArgs["result"]["resources"]>
    composites: {}
  }

  type resourcesGetPayload<S extends boolean | null | undefined | resourcesDefaultArgs> = $Result.GetResult<Prisma.$resourcesPayload, S>

  type resourcesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<resourcesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResourcesCountAggregateInputType | true
    }

  export interface resourcesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['resources'], meta: { name: 'resources' } }
    /**
     * Find zero or one Resources that matches the filter.
     * @param {resourcesFindUniqueArgs} args - Arguments to find a Resources
     * @example
     * // Get one Resources
     * const resources = await prisma.resources.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends resourcesFindUniqueArgs>(args: SelectSubset<T, resourcesFindUniqueArgs<ExtArgs>>): Prisma__resourcesClient<$Result.GetResult<Prisma.$resourcesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Resources that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {resourcesFindUniqueOrThrowArgs} args - Arguments to find a Resources
     * @example
     * // Get one Resources
     * const resources = await prisma.resources.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends resourcesFindUniqueOrThrowArgs>(args: SelectSubset<T, resourcesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__resourcesClient<$Result.GetResult<Prisma.$resourcesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Resources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resourcesFindFirstArgs} args - Arguments to find a Resources
     * @example
     * // Get one Resources
     * const resources = await prisma.resources.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends resourcesFindFirstArgs>(args?: SelectSubset<T, resourcesFindFirstArgs<ExtArgs>>): Prisma__resourcesClient<$Result.GetResult<Prisma.$resourcesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Resources that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resourcesFindFirstOrThrowArgs} args - Arguments to find a Resources
     * @example
     * // Get one Resources
     * const resources = await prisma.resources.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends resourcesFindFirstOrThrowArgs>(args?: SelectSubset<T, resourcesFindFirstOrThrowArgs<ExtArgs>>): Prisma__resourcesClient<$Result.GetResult<Prisma.$resourcesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Resources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resourcesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Resources
     * const resources = await prisma.resources.findMany()
     * 
     * // Get first 10 Resources
     * const resources = await prisma.resources.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resourcesWithIdOnly = await prisma.resources.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends resourcesFindManyArgs>(args?: SelectSubset<T, resourcesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$resourcesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Resources.
     * @param {resourcesCreateArgs} args - Arguments to create a Resources.
     * @example
     * // Create one Resources
     * const Resources = await prisma.resources.create({
     *   data: {
     *     // ... data to create a Resources
     *   }
     * })
     * 
     */
    create<T extends resourcesCreateArgs>(args: SelectSubset<T, resourcesCreateArgs<ExtArgs>>): Prisma__resourcesClient<$Result.GetResult<Prisma.$resourcesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Resources.
     * @param {resourcesCreateManyArgs} args - Arguments to create many Resources.
     * @example
     * // Create many Resources
     * const resources = await prisma.resources.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends resourcesCreateManyArgs>(args?: SelectSubset<T, resourcesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Resources.
     * @param {resourcesDeleteArgs} args - Arguments to delete one Resources.
     * @example
     * // Delete one Resources
     * const Resources = await prisma.resources.delete({
     *   where: {
     *     // ... filter to delete one Resources
     *   }
     * })
     * 
     */
    delete<T extends resourcesDeleteArgs>(args: SelectSubset<T, resourcesDeleteArgs<ExtArgs>>): Prisma__resourcesClient<$Result.GetResult<Prisma.$resourcesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Resources.
     * @param {resourcesUpdateArgs} args - Arguments to update one Resources.
     * @example
     * // Update one Resources
     * const resources = await prisma.resources.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends resourcesUpdateArgs>(args: SelectSubset<T, resourcesUpdateArgs<ExtArgs>>): Prisma__resourcesClient<$Result.GetResult<Prisma.$resourcesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Resources.
     * @param {resourcesDeleteManyArgs} args - Arguments to filter Resources to delete.
     * @example
     * // Delete a few Resources
     * const { count } = await prisma.resources.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends resourcesDeleteManyArgs>(args?: SelectSubset<T, resourcesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resourcesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Resources
     * const resources = await prisma.resources.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends resourcesUpdateManyArgs>(args: SelectSubset<T, resourcesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Resources.
     * @param {resourcesUpsertArgs} args - Arguments to update or create a Resources.
     * @example
     * // Update or create a Resources
     * const resources = await prisma.resources.upsert({
     *   create: {
     *     // ... data to create a Resources
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Resources we want to update
     *   }
     * })
     */
    upsert<T extends resourcesUpsertArgs>(args: SelectSubset<T, resourcesUpsertArgs<ExtArgs>>): Prisma__resourcesClient<$Result.GetResult<Prisma.$resourcesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resourcesCountArgs} args - Arguments to filter Resources to count.
     * @example
     * // Count the number of Resources
     * const count = await prisma.resources.count({
     *   where: {
     *     // ... the filter for the Resources we want to count
     *   }
     * })
    **/
    count<T extends resourcesCountArgs>(
      args?: Subset<T, resourcesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResourcesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourcesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResourcesAggregateArgs>(args: Subset<T, ResourcesAggregateArgs>): Prisma.PrismaPromise<GetResourcesAggregateType<T>>

    /**
     * Group by Resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resourcesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends resourcesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: resourcesGroupByArgs['orderBy'] }
        : { orderBy?: resourcesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, resourcesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResourcesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the resources model
   */
  readonly fields: resourcesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for resources.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__resourcesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project_resources<T extends resources$project_resourcesArgs<ExtArgs> = {}>(args?: Subset<T, resources$project_resourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$project_resourcesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends resources$usersArgs<ExtArgs> = {}>(args?: Subset<T, resources$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    teams<T extends resources$teamsArgs<ExtArgs> = {}>(args?: Subset<T, resources$teamsArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the resources model
   */
  interface resourcesFieldRefs {
    readonly id: FieldRef<"resources", 'Int'>
    readonly name: FieldRef<"resources", 'String'>
    readonly type: FieldRef<"resources", 'resources_type'>
    readonly user_id: FieldRef<"resources", 'Int'>
    readonly team_id: FieldRef<"resources", 'Int'>
    readonly availability: FieldRef<"resources", 'resources_availability'>
  }
    

  // Custom InputTypes
  /**
   * resources findUnique
   */
  export type resourcesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resources
     */
    select?: resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the resources
     */
    omit?: resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resourcesInclude<ExtArgs> | null
    /**
     * Filter, which resources to fetch.
     */
    where: resourcesWhereUniqueInput
  }

  /**
   * resources findUniqueOrThrow
   */
  export type resourcesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resources
     */
    select?: resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the resources
     */
    omit?: resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resourcesInclude<ExtArgs> | null
    /**
     * Filter, which resources to fetch.
     */
    where: resourcesWhereUniqueInput
  }

  /**
   * resources findFirst
   */
  export type resourcesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resources
     */
    select?: resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the resources
     */
    omit?: resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resourcesInclude<ExtArgs> | null
    /**
     * Filter, which resources to fetch.
     */
    where?: resourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of resources to fetch.
     */
    orderBy?: resourcesOrderByWithRelationInput | resourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for resources.
     */
    cursor?: resourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` resources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of resources.
     */
    distinct?: ResourcesScalarFieldEnum | ResourcesScalarFieldEnum[]
  }

  /**
   * resources findFirstOrThrow
   */
  export type resourcesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resources
     */
    select?: resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the resources
     */
    omit?: resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resourcesInclude<ExtArgs> | null
    /**
     * Filter, which resources to fetch.
     */
    where?: resourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of resources to fetch.
     */
    orderBy?: resourcesOrderByWithRelationInput | resourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for resources.
     */
    cursor?: resourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` resources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of resources.
     */
    distinct?: ResourcesScalarFieldEnum | ResourcesScalarFieldEnum[]
  }

  /**
   * resources findMany
   */
  export type resourcesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resources
     */
    select?: resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the resources
     */
    omit?: resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resourcesInclude<ExtArgs> | null
    /**
     * Filter, which resources to fetch.
     */
    where?: resourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of resources to fetch.
     */
    orderBy?: resourcesOrderByWithRelationInput | resourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing resources.
     */
    cursor?: resourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` resources.
     */
    skip?: number
    distinct?: ResourcesScalarFieldEnum | ResourcesScalarFieldEnum[]
  }

  /**
   * resources create
   */
  export type resourcesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resources
     */
    select?: resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the resources
     */
    omit?: resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resourcesInclude<ExtArgs> | null
    /**
     * The data needed to create a resources.
     */
    data: XOR<resourcesCreateInput, resourcesUncheckedCreateInput>
  }

  /**
   * resources createMany
   */
  export type resourcesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many resources.
     */
    data: resourcesCreateManyInput | resourcesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * resources update
   */
  export type resourcesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resources
     */
    select?: resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the resources
     */
    omit?: resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resourcesInclude<ExtArgs> | null
    /**
     * The data needed to update a resources.
     */
    data: XOR<resourcesUpdateInput, resourcesUncheckedUpdateInput>
    /**
     * Choose, which resources to update.
     */
    where: resourcesWhereUniqueInput
  }

  /**
   * resources updateMany
   */
  export type resourcesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update resources.
     */
    data: XOR<resourcesUpdateManyMutationInput, resourcesUncheckedUpdateManyInput>
    /**
     * Filter which resources to update
     */
    where?: resourcesWhereInput
    /**
     * Limit how many resources to update.
     */
    limit?: number
  }

  /**
   * resources upsert
   */
  export type resourcesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resources
     */
    select?: resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the resources
     */
    omit?: resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resourcesInclude<ExtArgs> | null
    /**
     * The filter to search for the resources to update in case it exists.
     */
    where: resourcesWhereUniqueInput
    /**
     * In case the resources found by the `where` argument doesn't exist, create a new resources with this data.
     */
    create: XOR<resourcesCreateInput, resourcesUncheckedCreateInput>
    /**
     * In case the resources was found with the provided `where` argument, update it with this data.
     */
    update: XOR<resourcesUpdateInput, resourcesUncheckedUpdateInput>
  }

  /**
   * resources delete
   */
  export type resourcesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resources
     */
    select?: resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the resources
     */
    omit?: resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resourcesInclude<ExtArgs> | null
    /**
     * Filter which resources to delete.
     */
    where: resourcesWhereUniqueInput
  }

  /**
   * resources deleteMany
   */
  export type resourcesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which resources to delete
     */
    where?: resourcesWhereInput
    /**
     * Limit how many resources to delete.
     */
    limit?: number
  }

  /**
   * resources.project_resources
   */
  export type resources$project_resourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project_resources
     */
    select?: project_resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project_resources
     */
    omit?: project_resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: project_resourcesInclude<ExtArgs> | null
    where?: project_resourcesWhereInput
    orderBy?: project_resourcesOrderByWithRelationInput | project_resourcesOrderByWithRelationInput[]
    cursor?: project_resourcesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Project_resourcesScalarFieldEnum | Project_resourcesScalarFieldEnum[]
  }

  /**
   * resources.users
   */
  export type resources$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * resources.teams
   */
  export type resources$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    where?: teamsWhereInput
  }

  /**
   * resources without action
   */
  export type resourcesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resources
     */
    select?: resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the resources
     */
    omit?: resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resourcesInclude<ExtArgs> | null
  }


  /**
   * Model sprint_tasks
   */

  export type AggregateSprint_tasks = {
    _count: Sprint_tasksCountAggregateOutputType | null
    _avg: Sprint_tasksAvgAggregateOutputType | null
    _sum: Sprint_tasksSumAggregateOutputType | null
    _min: Sprint_tasksMinAggregateOutputType | null
    _max: Sprint_tasksMaxAggregateOutputType | null
  }

  export type Sprint_tasksAvgAggregateOutputType = {
    id: number | null
    sprint_id: number | null
    task_id: number | null
  }

  export type Sprint_tasksSumAggregateOutputType = {
    id: number | null
    sprint_id: number | null
    task_id: number | null
  }

  export type Sprint_tasksMinAggregateOutputType = {
    id: number | null
    sprint_id: number | null
    task_id: number | null
  }

  export type Sprint_tasksMaxAggregateOutputType = {
    id: number | null
    sprint_id: number | null
    task_id: number | null
  }

  export type Sprint_tasksCountAggregateOutputType = {
    id: number
    sprint_id: number
    task_id: number
    _all: number
  }


  export type Sprint_tasksAvgAggregateInputType = {
    id?: true
    sprint_id?: true
    task_id?: true
  }

  export type Sprint_tasksSumAggregateInputType = {
    id?: true
    sprint_id?: true
    task_id?: true
  }

  export type Sprint_tasksMinAggregateInputType = {
    id?: true
    sprint_id?: true
    task_id?: true
  }

  export type Sprint_tasksMaxAggregateInputType = {
    id?: true
    sprint_id?: true
    task_id?: true
  }

  export type Sprint_tasksCountAggregateInputType = {
    id?: true
    sprint_id?: true
    task_id?: true
    _all?: true
  }

  export type Sprint_tasksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sprint_tasks to aggregate.
     */
    where?: sprint_tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sprint_tasks to fetch.
     */
    orderBy?: sprint_tasksOrderByWithRelationInput | sprint_tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sprint_tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sprint_tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sprint_tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sprint_tasks
    **/
    _count?: true | Sprint_tasksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Sprint_tasksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Sprint_tasksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Sprint_tasksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Sprint_tasksMaxAggregateInputType
  }

  export type GetSprint_tasksAggregateType<T extends Sprint_tasksAggregateArgs> = {
        [P in keyof T & keyof AggregateSprint_tasks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSprint_tasks[P]>
      : GetScalarType<T[P], AggregateSprint_tasks[P]>
  }




  export type sprint_tasksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sprint_tasksWhereInput
    orderBy?: sprint_tasksOrderByWithAggregationInput | sprint_tasksOrderByWithAggregationInput[]
    by: Sprint_tasksScalarFieldEnum[] | Sprint_tasksScalarFieldEnum
    having?: sprint_tasksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Sprint_tasksCountAggregateInputType | true
    _avg?: Sprint_tasksAvgAggregateInputType
    _sum?: Sprint_tasksSumAggregateInputType
    _min?: Sprint_tasksMinAggregateInputType
    _max?: Sprint_tasksMaxAggregateInputType
  }

  export type Sprint_tasksGroupByOutputType = {
    id: number
    sprint_id: number
    task_id: number
    _count: Sprint_tasksCountAggregateOutputType | null
    _avg: Sprint_tasksAvgAggregateOutputType | null
    _sum: Sprint_tasksSumAggregateOutputType | null
    _min: Sprint_tasksMinAggregateOutputType | null
    _max: Sprint_tasksMaxAggregateOutputType | null
  }

  type GetSprint_tasksGroupByPayload<T extends sprint_tasksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Sprint_tasksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Sprint_tasksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Sprint_tasksGroupByOutputType[P]>
            : GetScalarType<T[P], Sprint_tasksGroupByOutputType[P]>
        }
      >
    >


  export type sprint_tasksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sprint_id?: boolean
    task_id?: boolean
    sprints?: boolean | sprintsDefaultArgs<ExtArgs>
    tasks?: boolean | tasksDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sprint_tasks"]>



  export type sprint_tasksSelectScalar = {
    id?: boolean
    sprint_id?: boolean
    task_id?: boolean
  }

  export type sprint_tasksOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sprint_id" | "task_id", ExtArgs["result"]["sprint_tasks"]>
  export type sprint_tasksInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sprints?: boolean | sprintsDefaultArgs<ExtArgs>
    tasks?: boolean | tasksDefaultArgs<ExtArgs>
  }

  export type $sprint_tasksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "sprint_tasks"
    objects: {
      sprints: Prisma.$sprintsPayload<ExtArgs>
      tasks: Prisma.$tasksPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sprint_id: number
      task_id: number
    }, ExtArgs["result"]["sprint_tasks"]>
    composites: {}
  }

  type sprint_tasksGetPayload<S extends boolean | null | undefined | sprint_tasksDefaultArgs> = $Result.GetResult<Prisma.$sprint_tasksPayload, S>

  type sprint_tasksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<sprint_tasksFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Sprint_tasksCountAggregateInputType | true
    }

  export interface sprint_tasksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sprint_tasks'], meta: { name: 'sprint_tasks' } }
    /**
     * Find zero or one Sprint_tasks that matches the filter.
     * @param {sprint_tasksFindUniqueArgs} args - Arguments to find a Sprint_tasks
     * @example
     * // Get one Sprint_tasks
     * const sprint_tasks = await prisma.sprint_tasks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends sprint_tasksFindUniqueArgs>(args: SelectSubset<T, sprint_tasksFindUniqueArgs<ExtArgs>>): Prisma__sprint_tasksClient<$Result.GetResult<Prisma.$sprint_tasksPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sprint_tasks that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {sprint_tasksFindUniqueOrThrowArgs} args - Arguments to find a Sprint_tasks
     * @example
     * // Get one Sprint_tasks
     * const sprint_tasks = await prisma.sprint_tasks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends sprint_tasksFindUniqueOrThrowArgs>(args: SelectSubset<T, sprint_tasksFindUniqueOrThrowArgs<ExtArgs>>): Prisma__sprint_tasksClient<$Result.GetResult<Prisma.$sprint_tasksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sprint_tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sprint_tasksFindFirstArgs} args - Arguments to find a Sprint_tasks
     * @example
     * // Get one Sprint_tasks
     * const sprint_tasks = await prisma.sprint_tasks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends sprint_tasksFindFirstArgs>(args?: SelectSubset<T, sprint_tasksFindFirstArgs<ExtArgs>>): Prisma__sprint_tasksClient<$Result.GetResult<Prisma.$sprint_tasksPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sprint_tasks that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sprint_tasksFindFirstOrThrowArgs} args - Arguments to find a Sprint_tasks
     * @example
     * // Get one Sprint_tasks
     * const sprint_tasks = await prisma.sprint_tasks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends sprint_tasksFindFirstOrThrowArgs>(args?: SelectSubset<T, sprint_tasksFindFirstOrThrowArgs<ExtArgs>>): Prisma__sprint_tasksClient<$Result.GetResult<Prisma.$sprint_tasksPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sprint_tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sprint_tasksFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sprint_tasks
     * const sprint_tasks = await prisma.sprint_tasks.findMany()
     * 
     * // Get first 10 Sprint_tasks
     * const sprint_tasks = await prisma.sprint_tasks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sprint_tasksWithIdOnly = await prisma.sprint_tasks.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends sprint_tasksFindManyArgs>(args?: SelectSubset<T, sprint_tasksFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sprint_tasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sprint_tasks.
     * @param {sprint_tasksCreateArgs} args - Arguments to create a Sprint_tasks.
     * @example
     * // Create one Sprint_tasks
     * const Sprint_tasks = await prisma.sprint_tasks.create({
     *   data: {
     *     // ... data to create a Sprint_tasks
     *   }
     * })
     * 
     */
    create<T extends sprint_tasksCreateArgs>(args: SelectSubset<T, sprint_tasksCreateArgs<ExtArgs>>): Prisma__sprint_tasksClient<$Result.GetResult<Prisma.$sprint_tasksPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sprint_tasks.
     * @param {sprint_tasksCreateManyArgs} args - Arguments to create many Sprint_tasks.
     * @example
     * // Create many Sprint_tasks
     * const sprint_tasks = await prisma.sprint_tasks.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends sprint_tasksCreateManyArgs>(args?: SelectSubset<T, sprint_tasksCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sprint_tasks.
     * @param {sprint_tasksDeleteArgs} args - Arguments to delete one Sprint_tasks.
     * @example
     * // Delete one Sprint_tasks
     * const Sprint_tasks = await prisma.sprint_tasks.delete({
     *   where: {
     *     // ... filter to delete one Sprint_tasks
     *   }
     * })
     * 
     */
    delete<T extends sprint_tasksDeleteArgs>(args: SelectSubset<T, sprint_tasksDeleteArgs<ExtArgs>>): Prisma__sprint_tasksClient<$Result.GetResult<Prisma.$sprint_tasksPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sprint_tasks.
     * @param {sprint_tasksUpdateArgs} args - Arguments to update one Sprint_tasks.
     * @example
     * // Update one Sprint_tasks
     * const sprint_tasks = await prisma.sprint_tasks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends sprint_tasksUpdateArgs>(args: SelectSubset<T, sprint_tasksUpdateArgs<ExtArgs>>): Prisma__sprint_tasksClient<$Result.GetResult<Prisma.$sprint_tasksPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sprint_tasks.
     * @param {sprint_tasksDeleteManyArgs} args - Arguments to filter Sprint_tasks to delete.
     * @example
     * // Delete a few Sprint_tasks
     * const { count } = await prisma.sprint_tasks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends sprint_tasksDeleteManyArgs>(args?: SelectSubset<T, sprint_tasksDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sprint_tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sprint_tasksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sprint_tasks
     * const sprint_tasks = await prisma.sprint_tasks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends sprint_tasksUpdateManyArgs>(args: SelectSubset<T, sprint_tasksUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sprint_tasks.
     * @param {sprint_tasksUpsertArgs} args - Arguments to update or create a Sprint_tasks.
     * @example
     * // Update or create a Sprint_tasks
     * const sprint_tasks = await prisma.sprint_tasks.upsert({
     *   create: {
     *     // ... data to create a Sprint_tasks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sprint_tasks we want to update
     *   }
     * })
     */
    upsert<T extends sprint_tasksUpsertArgs>(args: SelectSubset<T, sprint_tasksUpsertArgs<ExtArgs>>): Prisma__sprint_tasksClient<$Result.GetResult<Prisma.$sprint_tasksPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sprint_tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sprint_tasksCountArgs} args - Arguments to filter Sprint_tasks to count.
     * @example
     * // Count the number of Sprint_tasks
     * const count = await prisma.sprint_tasks.count({
     *   where: {
     *     // ... the filter for the Sprint_tasks we want to count
     *   }
     * })
    **/
    count<T extends sprint_tasksCountArgs>(
      args?: Subset<T, sprint_tasksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Sprint_tasksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sprint_tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Sprint_tasksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Sprint_tasksAggregateArgs>(args: Subset<T, Sprint_tasksAggregateArgs>): Prisma.PrismaPromise<GetSprint_tasksAggregateType<T>>

    /**
     * Group by Sprint_tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sprint_tasksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sprint_tasksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sprint_tasksGroupByArgs['orderBy'] }
        : { orderBy?: sprint_tasksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sprint_tasksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSprint_tasksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sprint_tasks model
   */
  readonly fields: sprint_tasksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sprint_tasks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sprint_tasksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sprints<T extends sprintsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, sprintsDefaultArgs<ExtArgs>>): Prisma__sprintsClient<$Result.GetResult<Prisma.$sprintsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tasks<T extends tasksDefaultArgs<ExtArgs> = {}>(args?: Subset<T, tasksDefaultArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the sprint_tasks model
   */
  interface sprint_tasksFieldRefs {
    readonly id: FieldRef<"sprint_tasks", 'Int'>
    readonly sprint_id: FieldRef<"sprint_tasks", 'Int'>
    readonly task_id: FieldRef<"sprint_tasks", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * sprint_tasks findUnique
   */
  export type sprint_tasksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprint_tasks
     */
    select?: sprint_tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprint_tasks
     */
    omit?: sprint_tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprint_tasksInclude<ExtArgs> | null
    /**
     * Filter, which sprint_tasks to fetch.
     */
    where: sprint_tasksWhereUniqueInput
  }

  /**
   * sprint_tasks findUniqueOrThrow
   */
  export type sprint_tasksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprint_tasks
     */
    select?: sprint_tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprint_tasks
     */
    omit?: sprint_tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprint_tasksInclude<ExtArgs> | null
    /**
     * Filter, which sprint_tasks to fetch.
     */
    where: sprint_tasksWhereUniqueInput
  }

  /**
   * sprint_tasks findFirst
   */
  export type sprint_tasksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprint_tasks
     */
    select?: sprint_tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprint_tasks
     */
    omit?: sprint_tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprint_tasksInclude<ExtArgs> | null
    /**
     * Filter, which sprint_tasks to fetch.
     */
    where?: sprint_tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sprint_tasks to fetch.
     */
    orderBy?: sprint_tasksOrderByWithRelationInput | sprint_tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sprint_tasks.
     */
    cursor?: sprint_tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sprint_tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sprint_tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sprint_tasks.
     */
    distinct?: Sprint_tasksScalarFieldEnum | Sprint_tasksScalarFieldEnum[]
  }

  /**
   * sprint_tasks findFirstOrThrow
   */
  export type sprint_tasksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprint_tasks
     */
    select?: sprint_tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprint_tasks
     */
    omit?: sprint_tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprint_tasksInclude<ExtArgs> | null
    /**
     * Filter, which sprint_tasks to fetch.
     */
    where?: sprint_tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sprint_tasks to fetch.
     */
    orderBy?: sprint_tasksOrderByWithRelationInput | sprint_tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sprint_tasks.
     */
    cursor?: sprint_tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sprint_tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sprint_tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sprint_tasks.
     */
    distinct?: Sprint_tasksScalarFieldEnum | Sprint_tasksScalarFieldEnum[]
  }

  /**
   * sprint_tasks findMany
   */
  export type sprint_tasksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprint_tasks
     */
    select?: sprint_tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprint_tasks
     */
    omit?: sprint_tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprint_tasksInclude<ExtArgs> | null
    /**
     * Filter, which sprint_tasks to fetch.
     */
    where?: sprint_tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sprint_tasks to fetch.
     */
    orderBy?: sprint_tasksOrderByWithRelationInput | sprint_tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sprint_tasks.
     */
    cursor?: sprint_tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sprint_tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sprint_tasks.
     */
    skip?: number
    distinct?: Sprint_tasksScalarFieldEnum | Sprint_tasksScalarFieldEnum[]
  }

  /**
   * sprint_tasks create
   */
  export type sprint_tasksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprint_tasks
     */
    select?: sprint_tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprint_tasks
     */
    omit?: sprint_tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprint_tasksInclude<ExtArgs> | null
    /**
     * The data needed to create a sprint_tasks.
     */
    data: XOR<sprint_tasksCreateInput, sprint_tasksUncheckedCreateInput>
  }

  /**
   * sprint_tasks createMany
   */
  export type sprint_tasksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sprint_tasks.
     */
    data: sprint_tasksCreateManyInput | sprint_tasksCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * sprint_tasks update
   */
  export type sprint_tasksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprint_tasks
     */
    select?: sprint_tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprint_tasks
     */
    omit?: sprint_tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprint_tasksInclude<ExtArgs> | null
    /**
     * The data needed to update a sprint_tasks.
     */
    data: XOR<sprint_tasksUpdateInput, sprint_tasksUncheckedUpdateInput>
    /**
     * Choose, which sprint_tasks to update.
     */
    where: sprint_tasksWhereUniqueInput
  }

  /**
   * sprint_tasks updateMany
   */
  export type sprint_tasksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sprint_tasks.
     */
    data: XOR<sprint_tasksUpdateManyMutationInput, sprint_tasksUncheckedUpdateManyInput>
    /**
     * Filter which sprint_tasks to update
     */
    where?: sprint_tasksWhereInput
    /**
     * Limit how many sprint_tasks to update.
     */
    limit?: number
  }

  /**
   * sprint_tasks upsert
   */
  export type sprint_tasksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprint_tasks
     */
    select?: sprint_tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprint_tasks
     */
    omit?: sprint_tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprint_tasksInclude<ExtArgs> | null
    /**
     * The filter to search for the sprint_tasks to update in case it exists.
     */
    where: sprint_tasksWhereUniqueInput
    /**
     * In case the sprint_tasks found by the `where` argument doesn't exist, create a new sprint_tasks with this data.
     */
    create: XOR<sprint_tasksCreateInput, sprint_tasksUncheckedCreateInput>
    /**
     * In case the sprint_tasks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sprint_tasksUpdateInput, sprint_tasksUncheckedUpdateInput>
  }

  /**
   * sprint_tasks delete
   */
  export type sprint_tasksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprint_tasks
     */
    select?: sprint_tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprint_tasks
     */
    omit?: sprint_tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprint_tasksInclude<ExtArgs> | null
    /**
     * Filter which sprint_tasks to delete.
     */
    where: sprint_tasksWhereUniqueInput
  }

  /**
   * sprint_tasks deleteMany
   */
  export type sprint_tasksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sprint_tasks to delete
     */
    where?: sprint_tasksWhereInput
    /**
     * Limit how many sprint_tasks to delete.
     */
    limit?: number
  }

  /**
   * sprint_tasks without action
   */
  export type sprint_tasksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprint_tasks
     */
    select?: sprint_tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprint_tasks
     */
    omit?: sprint_tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprint_tasksInclude<ExtArgs> | null
  }


  /**
   * Model sprints
   */

  export type AggregateSprints = {
    _count: SprintsCountAggregateOutputType | null
    _avg: SprintsAvgAggregateOutputType | null
    _sum: SprintsSumAggregateOutputType | null
    _min: SprintsMinAggregateOutputType | null
    _max: SprintsMaxAggregateOutputType | null
  }

  export type SprintsAvgAggregateOutputType = {
    id: number | null
    project_id: number | null
  }

  export type SprintsSumAggregateOutputType = {
    id: number | null
    project_id: number | null
  }

  export type SprintsMinAggregateOutputType = {
    id: number | null
    project_id: number | null
    name: string | null
    start_date: Date | null
    end_date: Date | null
    goal: string | null
    status: $Enums.sprints_status | null
  }

  export type SprintsMaxAggregateOutputType = {
    id: number | null
    project_id: number | null
    name: string | null
    start_date: Date | null
    end_date: Date | null
    goal: string | null
    status: $Enums.sprints_status | null
  }

  export type SprintsCountAggregateOutputType = {
    id: number
    project_id: number
    name: number
    start_date: number
    end_date: number
    goal: number
    status: number
    _all: number
  }


  export type SprintsAvgAggregateInputType = {
    id?: true
    project_id?: true
  }

  export type SprintsSumAggregateInputType = {
    id?: true
    project_id?: true
  }

  export type SprintsMinAggregateInputType = {
    id?: true
    project_id?: true
    name?: true
    start_date?: true
    end_date?: true
    goal?: true
    status?: true
  }

  export type SprintsMaxAggregateInputType = {
    id?: true
    project_id?: true
    name?: true
    start_date?: true
    end_date?: true
    goal?: true
    status?: true
  }

  export type SprintsCountAggregateInputType = {
    id?: true
    project_id?: true
    name?: true
    start_date?: true
    end_date?: true
    goal?: true
    status?: true
    _all?: true
  }

  export type SprintsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sprints to aggregate.
     */
    where?: sprintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sprints to fetch.
     */
    orderBy?: sprintsOrderByWithRelationInput | sprintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sprintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sprints
    **/
    _count?: true | SprintsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SprintsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SprintsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SprintsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SprintsMaxAggregateInputType
  }

  export type GetSprintsAggregateType<T extends SprintsAggregateArgs> = {
        [P in keyof T & keyof AggregateSprints]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSprints[P]>
      : GetScalarType<T[P], AggregateSprints[P]>
  }




  export type sprintsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sprintsWhereInput
    orderBy?: sprintsOrderByWithAggregationInput | sprintsOrderByWithAggregationInput[]
    by: SprintsScalarFieldEnum[] | SprintsScalarFieldEnum
    having?: sprintsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SprintsCountAggregateInputType | true
    _avg?: SprintsAvgAggregateInputType
    _sum?: SprintsSumAggregateInputType
    _min?: SprintsMinAggregateInputType
    _max?: SprintsMaxAggregateInputType
  }

  export type SprintsGroupByOutputType = {
    id: number
    project_id: number
    name: string
    start_date: Date | null
    end_date: Date | null
    goal: string | null
    status: $Enums.sprints_status | null
    _count: SprintsCountAggregateOutputType | null
    _avg: SprintsAvgAggregateOutputType | null
    _sum: SprintsSumAggregateOutputType | null
    _min: SprintsMinAggregateOutputType | null
    _max: SprintsMaxAggregateOutputType | null
  }

  type GetSprintsGroupByPayload<T extends sprintsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SprintsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SprintsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SprintsGroupByOutputType[P]>
            : GetScalarType<T[P], SprintsGroupByOutputType[P]>
        }
      >
    >


  export type sprintsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    project_id?: boolean
    name?: boolean
    start_date?: boolean
    end_date?: boolean
    goal?: boolean
    status?: boolean
    sprint_tasks?: boolean | sprints$sprint_tasksArgs<ExtArgs>
    projects?: boolean | projectsDefaultArgs<ExtArgs>
    _count?: boolean | SprintsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sprints"]>



  export type sprintsSelectScalar = {
    id?: boolean
    project_id?: boolean
    name?: boolean
    start_date?: boolean
    end_date?: boolean
    goal?: boolean
    status?: boolean
  }

  export type sprintsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "project_id" | "name" | "start_date" | "end_date" | "goal" | "status", ExtArgs["result"]["sprints"]>
  export type sprintsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sprint_tasks?: boolean | sprints$sprint_tasksArgs<ExtArgs>
    projects?: boolean | projectsDefaultArgs<ExtArgs>
    _count?: boolean | SprintsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $sprintsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "sprints"
    objects: {
      sprint_tasks: Prisma.$sprint_tasksPayload<ExtArgs>[]
      projects: Prisma.$projectsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      project_id: number
      name: string
      start_date: Date | null
      end_date: Date | null
      goal: string | null
      status: $Enums.sprints_status | null
    }, ExtArgs["result"]["sprints"]>
    composites: {}
  }

  type sprintsGetPayload<S extends boolean | null | undefined | sprintsDefaultArgs> = $Result.GetResult<Prisma.$sprintsPayload, S>

  type sprintsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<sprintsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SprintsCountAggregateInputType | true
    }

  export interface sprintsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sprints'], meta: { name: 'sprints' } }
    /**
     * Find zero or one Sprints that matches the filter.
     * @param {sprintsFindUniqueArgs} args - Arguments to find a Sprints
     * @example
     * // Get one Sprints
     * const sprints = await prisma.sprints.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends sprintsFindUniqueArgs>(args: SelectSubset<T, sprintsFindUniqueArgs<ExtArgs>>): Prisma__sprintsClient<$Result.GetResult<Prisma.$sprintsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sprints that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {sprintsFindUniqueOrThrowArgs} args - Arguments to find a Sprints
     * @example
     * // Get one Sprints
     * const sprints = await prisma.sprints.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends sprintsFindUniqueOrThrowArgs>(args: SelectSubset<T, sprintsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__sprintsClient<$Result.GetResult<Prisma.$sprintsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sprints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sprintsFindFirstArgs} args - Arguments to find a Sprints
     * @example
     * // Get one Sprints
     * const sprints = await prisma.sprints.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends sprintsFindFirstArgs>(args?: SelectSubset<T, sprintsFindFirstArgs<ExtArgs>>): Prisma__sprintsClient<$Result.GetResult<Prisma.$sprintsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sprints that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sprintsFindFirstOrThrowArgs} args - Arguments to find a Sprints
     * @example
     * // Get one Sprints
     * const sprints = await prisma.sprints.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends sprintsFindFirstOrThrowArgs>(args?: SelectSubset<T, sprintsFindFirstOrThrowArgs<ExtArgs>>): Prisma__sprintsClient<$Result.GetResult<Prisma.$sprintsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sprints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sprintsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sprints
     * const sprints = await prisma.sprints.findMany()
     * 
     * // Get first 10 Sprints
     * const sprints = await prisma.sprints.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sprintsWithIdOnly = await prisma.sprints.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends sprintsFindManyArgs>(args?: SelectSubset<T, sprintsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sprintsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sprints.
     * @param {sprintsCreateArgs} args - Arguments to create a Sprints.
     * @example
     * // Create one Sprints
     * const Sprints = await prisma.sprints.create({
     *   data: {
     *     // ... data to create a Sprints
     *   }
     * })
     * 
     */
    create<T extends sprintsCreateArgs>(args: SelectSubset<T, sprintsCreateArgs<ExtArgs>>): Prisma__sprintsClient<$Result.GetResult<Prisma.$sprintsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sprints.
     * @param {sprintsCreateManyArgs} args - Arguments to create many Sprints.
     * @example
     * // Create many Sprints
     * const sprints = await prisma.sprints.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends sprintsCreateManyArgs>(args?: SelectSubset<T, sprintsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sprints.
     * @param {sprintsDeleteArgs} args - Arguments to delete one Sprints.
     * @example
     * // Delete one Sprints
     * const Sprints = await prisma.sprints.delete({
     *   where: {
     *     // ... filter to delete one Sprints
     *   }
     * })
     * 
     */
    delete<T extends sprintsDeleteArgs>(args: SelectSubset<T, sprintsDeleteArgs<ExtArgs>>): Prisma__sprintsClient<$Result.GetResult<Prisma.$sprintsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sprints.
     * @param {sprintsUpdateArgs} args - Arguments to update one Sprints.
     * @example
     * // Update one Sprints
     * const sprints = await prisma.sprints.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends sprintsUpdateArgs>(args: SelectSubset<T, sprintsUpdateArgs<ExtArgs>>): Prisma__sprintsClient<$Result.GetResult<Prisma.$sprintsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sprints.
     * @param {sprintsDeleteManyArgs} args - Arguments to filter Sprints to delete.
     * @example
     * // Delete a few Sprints
     * const { count } = await prisma.sprints.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends sprintsDeleteManyArgs>(args?: SelectSubset<T, sprintsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sprintsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sprints
     * const sprints = await prisma.sprints.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends sprintsUpdateManyArgs>(args: SelectSubset<T, sprintsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sprints.
     * @param {sprintsUpsertArgs} args - Arguments to update or create a Sprints.
     * @example
     * // Update or create a Sprints
     * const sprints = await prisma.sprints.upsert({
     *   create: {
     *     // ... data to create a Sprints
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sprints we want to update
     *   }
     * })
     */
    upsert<T extends sprintsUpsertArgs>(args: SelectSubset<T, sprintsUpsertArgs<ExtArgs>>): Prisma__sprintsClient<$Result.GetResult<Prisma.$sprintsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sprintsCountArgs} args - Arguments to filter Sprints to count.
     * @example
     * // Count the number of Sprints
     * const count = await prisma.sprints.count({
     *   where: {
     *     // ... the filter for the Sprints we want to count
     *   }
     * })
    **/
    count<T extends sprintsCountArgs>(
      args?: Subset<T, sprintsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SprintsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SprintsAggregateArgs>(args: Subset<T, SprintsAggregateArgs>): Prisma.PrismaPromise<GetSprintsAggregateType<T>>

    /**
     * Group by Sprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sprintsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sprintsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sprintsGroupByArgs['orderBy'] }
        : { orderBy?: sprintsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sprintsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSprintsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sprints model
   */
  readonly fields: sprintsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sprints.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sprintsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sprint_tasks<T extends sprints$sprint_tasksArgs<ExtArgs> = {}>(args?: Subset<T, sprints$sprint_tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sprint_tasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projects<T extends projectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, projectsDefaultArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the sprints model
   */
  interface sprintsFieldRefs {
    readonly id: FieldRef<"sprints", 'Int'>
    readonly project_id: FieldRef<"sprints", 'Int'>
    readonly name: FieldRef<"sprints", 'String'>
    readonly start_date: FieldRef<"sprints", 'DateTime'>
    readonly end_date: FieldRef<"sprints", 'DateTime'>
    readonly goal: FieldRef<"sprints", 'String'>
    readonly status: FieldRef<"sprints", 'sprints_status'>
  }
    

  // Custom InputTypes
  /**
   * sprints findUnique
   */
  export type sprintsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprints
     */
    select?: sprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprints
     */
    omit?: sprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprintsInclude<ExtArgs> | null
    /**
     * Filter, which sprints to fetch.
     */
    where: sprintsWhereUniqueInput
  }

  /**
   * sprints findUniqueOrThrow
   */
  export type sprintsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprints
     */
    select?: sprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprints
     */
    omit?: sprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprintsInclude<ExtArgs> | null
    /**
     * Filter, which sprints to fetch.
     */
    where: sprintsWhereUniqueInput
  }

  /**
   * sprints findFirst
   */
  export type sprintsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprints
     */
    select?: sprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprints
     */
    omit?: sprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprintsInclude<ExtArgs> | null
    /**
     * Filter, which sprints to fetch.
     */
    where?: sprintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sprints to fetch.
     */
    orderBy?: sprintsOrderByWithRelationInput | sprintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sprints.
     */
    cursor?: sprintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sprints.
     */
    distinct?: SprintsScalarFieldEnum | SprintsScalarFieldEnum[]
  }

  /**
   * sprints findFirstOrThrow
   */
  export type sprintsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprints
     */
    select?: sprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprints
     */
    omit?: sprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprintsInclude<ExtArgs> | null
    /**
     * Filter, which sprints to fetch.
     */
    where?: sprintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sprints to fetch.
     */
    orderBy?: sprintsOrderByWithRelationInput | sprintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sprints.
     */
    cursor?: sprintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sprints.
     */
    distinct?: SprintsScalarFieldEnum | SprintsScalarFieldEnum[]
  }

  /**
   * sprints findMany
   */
  export type sprintsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprints
     */
    select?: sprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprints
     */
    omit?: sprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprintsInclude<ExtArgs> | null
    /**
     * Filter, which sprints to fetch.
     */
    where?: sprintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sprints to fetch.
     */
    orderBy?: sprintsOrderByWithRelationInput | sprintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sprints.
     */
    cursor?: sprintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sprints.
     */
    skip?: number
    distinct?: SprintsScalarFieldEnum | SprintsScalarFieldEnum[]
  }

  /**
   * sprints create
   */
  export type sprintsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprints
     */
    select?: sprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprints
     */
    omit?: sprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprintsInclude<ExtArgs> | null
    /**
     * The data needed to create a sprints.
     */
    data: XOR<sprintsCreateInput, sprintsUncheckedCreateInput>
  }

  /**
   * sprints createMany
   */
  export type sprintsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sprints.
     */
    data: sprintsCreateManyInput | sprintsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * sprints update
   */
  export type sprintsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprints
     */
    select?: sprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprints
     */
    omit?: sprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprintsInclude<ExtArgs> | null
    /**
     * The data needed to update a sprints.
     */
    data: XOR<sprintsUpdateInput, sprintsUncheckedUpdateInput>
    /**
     * Choose, which sprints to update.
     */
    where: sprintsWhereUniqueInput
  }

  /**
   * sprints updateMany
   */
  export type sprintsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sprints.
     */
    data: XOR<sprintsUpdateManyMutationInput, sprintsUncheckedUpdateManyInput>
    /**
     * Filter which sprints to update
     */
    where?: sprintsWhereInput
    /**
     * Limit how many sprints to update.
     */
    limit?: number
  }

  /**
   * sprints upsert
   */
  export type sprintsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprints
     */
    select?: sprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprints
     */
    omit?: sprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprintsInclude<ExtArgs> | null
    /**
     * The filter to search for the sprints to update in case it exists.
     */
    where: sprintsWhereUniqueInput
    /**
     * In case the sprints found by the `where` argument doesn't exist, create a new sprints with this data.
     */
    create: XOR<sprintsCreateInput, sprintsUncheckedCreateInput>
    /**
     * In case the sprints was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sprintsUpdateInput, sprintsUncheckedUpdateInput>
  }

  /**
   * sprints delete
   */
  export type sprintsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprints
     */
    select?: sprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprints
     */
    omit?: sprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprintsInclude<ExtArgs> | null
    /**
     * Filter which sprints to delete.
     */
    where: sprintsWhereUniqueInput
  }

  /**
   * sprints deleteMany
   */
  export type sprintsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sprints to delete
     */
    where?: sprintsWhereInput
    /**
     * Limit how many sprints to delete.
     */
    limit?: number
  }

  /**
   * sprints.sprint_tasks
   */
  export type sprints$sprint_tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprint_tasks
     */
    select?: sprint_tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprint_tasks
     */
    omit?: sprint_tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprint_tasksInclude<ExtArgs> | null
    where?: sprint_tasksWhereInput
    orderBy?: sprint_tasksOrderByWithRelationInput | sprint_tasksOrderByWithRelationInput[]
    cursor?: sprint_tasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Sprint_tasksScalarFieldEnum | Sprint_tasksScalarFieldEnum[]
  }

  /**
   * sprints without action
   */
  export type sprintsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprints
     */
    select?: sprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprints
     */
    omit?: sprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprintsInclude<ExtArgs> | null
  }


  /**
   * Model suppliers
   */

  export type AggregateSuppliers = {
    _count: SuppliersCountAggregateOutputType | null
    _avg: SuppliersAvgAggregateOutputType | null
    _sum: SuppliersSumAggregateOutputType | null
    _min: SuppliersMinAggregateOutputType | null
    _max: SuppliersMaxAggregateOutputType | null
  }

  export type SuppliersAvgAggregateOutputType = {
    id: number | null
  }

  export type SuppliersSumAggregateOutputType = {
    id: number | null
  }

  export type SuppliersMinAggregateOutputType = {
    id: number | null
    name: string | null
    contact_info: string | null
  }

  export type SuppliersMaxAggregateOutputType = {
    id: number | null
    name: string | null
    contact_info: string | null
  }

  export type SuppliersCountAggregateOutputType = {
    id: number
    name: number
    contact_info: number
    _all: number
  }


  export type SuppliersAvgAggregateInputType = {
    id?: true
  }

  export type SuppliersSumAggregateInputType = {
    id?: true
  }

  export type SuppliersMinAggregateInputType = {
    id?: true
    name?: true
    contact_info?: true
  }

  export type SuppliersMaxAggregateInputType = {
    id?: true
    name?: true
    contact_info?: true
  }

  export type SuppliersCountAggregateInputType = {
    id?: true
    name?: true
    contact_info?: true
    _all?: true
  }

  export type SuppliersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which suppliers to aggregate.
     */
    where?: suppliersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suppliers to fetch.
     */
    orderBy?: suppliersOrderByWithRelationInput | suppliersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: suppliersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned suppliers
    **/
    _count?: true | SuppliersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SuppliersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SuppliersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuppliersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuppliersMaxAggregateInputType
  }

  export type GetSuppliersAggregateType<T extends SuppliersAggregateArgs> = {
        [P in keyof T & keyof AggregateSuppliers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuppliers[P]>
      : GetScalarType<T[P], AggregateSuppliers[P]>
  }




  export type suppliersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: suppliersWhereInput
    orderBy?: suppliersOrderByWithAggregationInput | suppliersOrderByWithAggregationInput[]
    by: SuppliersScalarFieldEnum[] | SuppliersScalarFieldEnum
    having?: suppliersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuppliersCountAggregateInputType | true
    _avg?: SuppliersAvgAggregateInputType
    _sum?: SuppliersSumAggregateInputType
    _min?: SuppliersMinAggregateInputType
    _max?: SuppliersMaxAggregateInputType
  }

  export type SuppliersGroupByOutputType = {
    id: number
    name: string
    contact_info: string | null
    _count: SuppliersCountAggregateOutputType | null
    _avg: SuppliersAvgAggregateOutputType | null
    _sum: SuppliersSumAggregateOutputType | null
    _min: SuppliersMinAggregateOutputType | null
    _max: SuppliersMaxAggregateOutputType | null
  }

  type GetSuppliersGroupByPayload<T extends suppliersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SuppliersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuppliersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuppliersGroupByOutputType[P]>
            : GetScalarType<T[P], SuppliersGroupByOutputType[P]>
        }
      >
    >


  export type suppliersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contact_info?: boolean
    contracts?: boolean | suppliers$contractsArgs<ExtArgs>
    _count?: boolean | SuppliersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["suppliers"]>



  export type suppliersSelectScalar = {
    id?: boolean
    name?: boolean
    contact_info?: boolean
  }

  export type suppliersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "contact_info", ExtArgs["result"]["suppliers"]>
  export type suppliersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | suppliers$contractsArgs<ExtArgs>
    _count?: boolean | SuppliersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $suppliersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "suppliers"
    objects: {
      contracts: Prisma.$contractsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      contact_info: string | null
    }, ExtArgs["result"]["suppliers"]>
    composites: {}
  }

  type suppliersGetPayload<S extends boolean | null | undefined | suppliersDefaultArgs> = $Result.GetResult<Prisma.$suppliersPayload, S>

  type suppliersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<suppliersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SuppliersCountAggregateInputType | true
    }

  export interface suppliersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['suppliers'], meta: { name: 'suppliers' } }
    /**
     * Find zero or one Suppliers that matches the filter.
     * @param {suppliersFindUniqueArgs} args - Arguments to find a Suppliers
     * @example
     * // Get one Suppliers
     * const suppliers = await prisma.suppliers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends suppliersFindUniqueArgs>(args: SelectSubset<T, suppliersFindUniqueArgs<ExtArgs>>): Prisma__suppliersClient<$Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Suppliers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {suppliersFindUniqueOrThrowArgs} args - Arguments to find a Suppliers
     * @example
     * // Get one Suppliers
     * const suppliers = await prisma.suppliers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends suppliersFindUniqueOrThrowArgs>(args: SelectSubset<T, suppliersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__suppliersClient<$Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Suppliers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suppliersFindFirstArgs} args - Arguments to find a Suppliers
     * @example
     * // Get one Suppliers
     * const suppliers = await prisma.suppliers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends suppliersFindFirstArgs>(args?: SelectSubset<T, suppliersFindFirstArgs<ExtArgs>>): Prisma__suppliersClient<$Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Suppliers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suppliersFindFirstOrThrowArgs} args - Arguments to find a Suppliers
     * @example
     * // Get one Suppliers
     * const suppliers = await prisma.suppliers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends suppliersFindFirstOrThrowArgs>(args?: SelectSubset<T, suppliersFindFirstOrThrowArgs<ExtArgs>>): Prisma__suppliersClient<$Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Suppliers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suppliersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Suppliers
     * const suppliers = await prisma.suppliers.findMany()
     * 
     * // Get first 10 Suppliers
     * const suppliers = await prisma.suppliers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const suppliersWithIdOnly = await prisma.suppliers.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends suppliersFindManyArgs>(args?: SelectSubset<T, suppliersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Suppliers.
     * @param {suppliersCreateArgs} args - Arguments to create a Suppliers.
     * @example
     * // Create one Suppliers
     * const Suppliers = await prisma.suppliers.create({
     *   data: {
     *     // ... data to create a Suppliers
     *   }
     * })
     * 
     */
    create<T extends suppliersCreateArgs>(args: SelectSubset<T, suppliersCreateArgs<ExtArgs>>): Prisma__suppliersClient<$Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Suppliers.
     * @param {suppliersCreateManyArgs} args - Arguments to create many Suppliers.
     * @example
     * // Create many Suppliers
     * const suppliers = await prisma.suppliers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends suppliersCreateManyArgs>(args?: SelectSubset<T, suppliersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Suppliers.
     * @param {suppliersDeleteArgs} args - Arguments to delete one Suppliers.
     * @example
     * // Delete one Suppliers
     * const Suppliers = await prisma.suppliers.delete({
     *   where: {
     *     // ... filter to delete one Suppliers
     *   }
     * })
     * 
     */
    delete<T extends suppliersDeleteArgs>(args: SelectSubset<T, suppliersDeleteArgs<ExtArgs>>): Prisma__suppliersClient<$Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Suppliers.
     * @param {suppliersUpdateArgs} args - Arguments to update one Suppliers.
     * @example
     * // Update one Suppliers
     * const suppliers = await prisma.suppliers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends suppliersUpdateArgs>(args: SelectSubset<T, suppliersUpdateArgs<ExtArgs>>): Prisma__suppliersClient<$Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Suppliers.
     * @param {suppliersDeleteManyArgs} args - Arguments to filter Suppliers to delete.
     * @example
     * // Delete a few Suppliers
     * const { count } = await prisma.suppliers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends suppliersDeleteManyArgs>(args?: SelectSubset<T, suppliersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suppliersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Suppliers
     * const suppliers = await prisma.suppliers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends suppliersUpdateManyArgs>(args: SelectSubset<T, suppliersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Suppliers.
     * @param {suppliersUpsertArgs} args - Arguments to update or create a Suppliers.
     * @example
     * // Update or create a Suppliers
     * const suppliers = await prisma.suppliers.upsert({
     *   create: {
     *     // ... data to create a Suppliers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Suppliers we want to update
     *   }
     * })
     */
    upsert<T extends suppliersUpsertArgs>(args: SelectSubset<T, suppliersUpsertArgs<ExtArgs>>): Prisma__suppliersClient<$Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suppliersCountArgs} args - Arguments to filter Suppliers to count.
     * @example
     * // Count the number of Suppliers
     * const count = await prisma.suppliers.count({
     *   where: {
     *     // ... the filter for the Suppliers we want to count
     *   }
     * })
    **/
    count<T extends suppliersCountArgs>(
      args?: Subset<T, suppliersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuppliersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuppliersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuppliersAggregateArgs>(args: Subset<T, SuppliersAggregateArgs>): Prisma.PrismaPromise<GetSuppliersAggregateType<T>>

    /**
     * Group by Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suppliersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends suppliersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: suppliersGroupByArgs['orderBy'] }
        : { orderBy?: suppliersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, suppliersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuppliersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the suppliers model
   */
  readonly fields: suppliersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for suppliers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__suppliersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contracts<T extends suppliers$contractsArgs<ExtArgs> = {}>(args?: Subset<T, suppliers$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contractsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the suppliers model
   */
  interface suppliersFieldRefs {
    readonly id: FieldRef<"suppliers", 'Int'>
    readonly name: FieldRef<"suppliers", 'String'>
    readonly contact_info: FieldRef<"suppliers", 'String'>
  }
    

  // Custom InputTypes
  /**
   * suppliers findUnique
   */
  export type suppliersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suppliers
     */
    select?: suppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the suppliers
     */
    omit?: suppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: suppliersInclude<ExtArgs> | null
    /**
     * Filter, which suppliers to fetch.
     */
    where: suppliersWhereUniqueInput
  }

  /**
   * suppliers findUniqueOrThrow
   */
  export type suppliersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suppliers
     */
    select?: suppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the suppliers
     */
    omit?: suppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: suppliersInclude<ExtArgs> | null
    /**
     * Filter, which suppliers to fetch.
     */
    where: suppliersWhereUniqueInput
  }

  /**
   * suppliers findFirst
   */
  export type suppliersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suppliers
     */
    select?: suppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the suppliers
     */
    omit?: suppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: suppliersInclude<ExtArgs> | null
    /**
     * Filter, which suppliers to fetch.
     */
    where?: suppliersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suppliers to fetch.
     */
    orderBy?: suppliersOrderByWithRelationInput | suppliersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for suppliers.
     */
    cursor?: suppliersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of suppliers.
     */
    distinct?: SuppliersScalarFieldEnum | SuppliersScalarFieldEnum[]
  }

  /**
   * suppliers findFirstOrThrow
   */
  export type suppliersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suppliers
     */
    select?: suppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the suppliers
     */
    omit?: suppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: suppliersInclude<ExtArgs> | null
    /**
     * Filter, which suppliers to fetch.
     */
    where?: suppliersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suppliers to fetch.
     */
    orderBy?: suppliersOrderByWithRelationInput | suppliersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for suppliers.
     */
    cursor?: suppliersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of suppliers.
     */
    distinct?: SuppliersScalarFieldEnum | SuppliersScalarFieldEnum[]
  }

  /**
   * suppliers findMany
   */
  export type suppliersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suppliers
     */
    select?: suppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the suppliers
     */
    omit?: suppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: suppliersInclude<ExtArgs> | null
    /**
     * Filter, which suppliers to fetch.
     */
    where?: suppliersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suppliers to fetch.
     */
    orderBy?: suppliersOrderByWithRelationInput | suppliersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing suppliers.
     */
    cursor?: suppliersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suppliers.
     */
    skip?: number
    distinct?: SuppliersScalarFieldEnum | SuppliersScalarFieldEnum[]
  }

  /**
   * suppliers create
   */
  export type suppliersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suppliers
     */
    select?: suppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the suppliers
     */
    omit?: suppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: suppliersInclude<ExtArgs> | null
    /**
     * The data needed to create a suppliers.
     */
    data: XOR<suppliersCreateInput, suppliersUncheckedCreateInput>
  }

  /**
   * suppliers createMany
   */
  export type suppliersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many suppliers.
     */
    data: suppliersCreateManyInput | suppliersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * suppliers update
   */
  export type suppliersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suppliers
     */
    select?: suppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the suppliers
     */
    omit?: suppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: suppliersInclude<ExtArgs> | null
    /**
     * The data needed to update a suppliers.
     */
    data: XOR<suppliersUpdateInput, suppliersUncheckedUpdateInput>
    /**
     * Choose, which suppliers to update.
     */
    where: suppliersWhereUniqueInput
  }

  /**
   * suppliers updateMany
   */
  export type suppliersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update suppliers.
     */
    data: XOR<suppliersUpdateManyMutationInput, suppliersUncheckedUpdateManyInput>
    /**
     * Filter which suppliers to update
     */
    where?: suppliersWhereInput
    /**
     * Limit how many suppliers to update.
     */
    limit?: number
  }

  /**
   * suppliers upsert
   */
  export type suppliersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suppliers
     */
    select?: suppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the suppliers
     */
    omit?: suppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: suppliersInclude<ExtArgs> | null
    /**
     * The filter to search for the suppliers to update in case it exists.
     */
    where: suppliersWhereUniqueInput
    /**
     * In case the suppliers found by the `where` argument doesn't exist, create a new suppliers with this data.
     */
    create: XOR<suppliersCreateInput, suppliersUncheckedCreateInput>
    /**
     * In case the suppliers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<suppliersUpdateInput, suppliersUncheckedUpdateInput>
  }

  /**
   * suppliers delete
   */
  export type suppliersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suppliers
     */
    select?: suppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the suppliers
     */
    omit?: suppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: suppliersInclude<ExtArgs> | null
    /**
     * Filter which suppliers to delete.
     */
    where: suppliersWhereUniqueInput
  }

  /**
   * suppliers deleteMany
   */
  export type suppliersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which suppliers to delete
     */
    where?: suppliersWhereInput
    /**
     * Limit how many suppliers to delete.
     */
    limit?: number
  }

  /**
   * suppliers.contracts
   */
  export type suppliers$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contracts
     */
    select?: contractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contracts
     */
    omit?: contractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contractsInclude<ExtArgs> | null
    where?: contractsWhereInput
    orderBy?: contractsOrderByWithRelationInput | contractsOrderByWithRelationInput[]
    cursor?: contractsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractsScalarFieldEnum | ContractsScalarFieldEnum[]
  }

  /**
   * suppliers without action
   */
  export type suppliersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suppliers
     */
    select?: suppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the suppliers
     */
    omit?: suppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: suppliersInclude<ExtArgs> | null
  }


  /**
   * Model task_assignees
   */

  export type AggregateTask_assignees = {
    _count: Task_assigneesCountAggregateOutputType | null
    _avg: Task_assigneesAvgAggregateOutputType | null
    _sum: Task_assigneesSumAggregateOutputType | null
    _min: Task_assigneesMinAggregateOutputType | null
    _max: Task_assigneesMaxAggregateOutputType | null
  }

  export type Task_assigneesAvgAggregateOutputType = {
    id: number | null
    task_id: number | null
    user_id: number | null
  }

  export type Task_assigneesSumAggregateOutputType = {
    id: number | null
    task_id: number | null
    user_id: number | null
  }

  export type Task_assigneesMinAggregateOutputType = {
    id: number | null
    task_id: number | null
    user_id: number | null
  }

  export type Task_assigneesMaxAggregateOutputType = {
    id: number | null
    task_id: number | null
    user_id: number | null
  }

  export type Task_assigneesCountAggregateOutputType = {
    id: number
    task_id: number
    user_id: number
    _all: number
  }


  export type Task_assigneesAvgAggregateInputType = {
    id?: true
    task_id?: true
    user_id?: true
  }

  export type Task_assigneesSumAggregateInputType = {
    id?: true
    task_id?: true
    user_id?: true
  }

  export type Task_assigneesMinAggregateInputType = {
    id?: true
    task_id?: true
    user_id?: true
  }

  export type Task_assigneesMaxAggregateInputType = {
    id?: true
    task_id?: true
    user_id?: true
  }

  export type Task_assigneesCountAggregateInputType = {
    id?: true
    task_id?: true
    user_id?: true
    _all?: true
  }

  export type Task_assigneesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which task_assignees to aggregate.
     */
    where?: task_assigneesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of task_assignees to fetch.
     */
    orderBy?: task_assigneesOrderByWithRelationInput | task_assigneesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: task_assigneesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` task_assignees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` task_assignees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned task_assignees
    **/
    _count?: true | Task_assigneesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Task_assigneesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Task_assigneesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Task_assigneesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Task_assigneesMaxAggregateInputType
  }

  export type GetTask_assigneesAggregateType<T extends Task_assigneesAggregateArgs> = {
        [P in keyof T & keyof AggregateTask_assignees]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask_assignees[P]>
      : GetScalarType<T[P], AggregateTask_assignees[P]>
  }




  export type task_assigneesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: task_assigneesWhereInput
    orderBy?: task_assigneesOrderByWithAggregationInput | task_assigneesOrderByWithAggregationInput[]
    by: Task_assigneesScalarFieldEnum[] | Task_assigneesScalarFieldEnum
    having?: task_assigneesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Task_assigneesCountAggregateInputType | true
    _avg?: Task_assigneesAvgAggregateInputType
    _sum?: Task_assigneesSumAggregateInputType
    _min?: Task_assigneesMinAggregateInputType
    _max?: Task_assigneesMaxAggregateInputType
  }

  export type Task_assigneesGroupByOutputType = {
    id: number
    task_id: number
    user_id: number
    _count: Task_assigneesCountAggregateOutputType | null
    _avg: Task_assigneesAvgAggregateOutputType | null
    _sum: Task_assigneesSumAggregateOutputType | null
    _min: Task_assigneesMinAggregateOutputType | null
    _max: Task_assigneesMaxAggregateOutputType | null
  }

  type GetTask_assigneesGroupByPayload<T extends task_assigneesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Task_assigneesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Task_assigneesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Task_assigneesGroupByOutputType[P]>
            : GetScalarType<T[P], Task_assigneesGroupByOutputType[P]>
        }
      >
    >


  export type task_assigneesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    task_id?: boolean
    user_id?: boolean
    tasks?: boolean | tasksDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task_assignees"]>



  export type task_assigneesSelectScalar = {
    id?: boolean
    task_id?: boolean
    user_id?: boolean
  }

  export type task_assigneesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "task_id" | "user_id", ExtArgs["result"]["task_assignees"]>
  export type task_assigneesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | tasksDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $task_assigneesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "task_assignees"
    objects: {
      tasks: Prisma.$tasksPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      task_id: number
      user_id: number
    }, ExtArgs["result"]["task_assignees"]>
    composites: {}
  }

  type task_assigneesGetPayload<S extends boolean | null | undefined | task_assigneesDefaultArgs> = $Result.GetResult<Prisma.$task_assigneesPayload, S>

  type task_assigneesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<task_assigneesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Task_assigneesCountAggregateInputType | true
    }

  export interface task_assigneesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['task_assignees'], meta: { name: 'task_assignees' } }
    /**
     * Find zero or one Task_assignees that matches the filter.
     * @param {task_assigneesFindUniqueArgs} args - Arguments to find a Task_assignees
     * @example
     * // Get one Task_assignees
     * const task_assignees = await prisma.task_assignees.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends task_assigneesFindUniqueArgs>(args: SelectSubset<T, task_assigneesFindUniqueArgs<ExtArgs>>): Prisma__task_assigneesClient<$Result.GetResult<Prisma.$task_assigneesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Task_assignees that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {task_assigneesFindUniqueOrThrowArgs} args - Arguments to find a Task_assignees
     * @example
     * // Get one Task_assignees
     * const task_assignees = await prisma.task_assignees.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends task_assigneesFindUniqueOrThrowArgs>(args: SelectSubset<T, task_assigneesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__task_assigneesClient<$Result.GetResult<Prisma.$task_assigneesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task_assignees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_assigneesFindFirstArgs} args - Arguments to find a Task_assignees
     * @example
     * // Get one Task_assignees
     * const task_assignees = await prisma.task_assignees.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends task_assigneesFindFirstArgs>(args?: SelectSubset<T, task_assigneesFindFirstArgs<ExtArgs>>): Prisma__task_assigneesClient<$Result.GetResult<Prisma.$task_assigneesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task_assignees that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_assigneesFindFirstOrThrowArgs} args - Arguments to find a Task_assignees
     * @example
     * // Get one Task_assignees
     * const task_assignees = await prisma.task_assignees.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends task_assigneesFindFirstOrThrowArgs>(args?: SelectSubset<T, task_assigneesFindFirstOrThrowArgs<ExtArgs>>): Prisma__task_assigneesClient<$Result.GetResult<Prisma.$task_assigneesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Task_assignees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_assigneesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Task_assignees
     * const task_assignees = await prisma.task_assignees.findMany()
     * 
     * // Get first 10 Task_assignees
     * const task_assignees = await prisma.task_assignees.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const task_assigneesWithIdOnly = await prisma.task_assignees.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends task_assigneesFindManyArgs>(args?: SelectSubset<T, task_assigneesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$task_assigneesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Task_assignees.
     * @param {task_assigneesCreateArgs} args - Arguments to create a Task_assignees.
     * @example
     * // Create one Task_assignees
     * const Task_assignees = await prisma.task_assignees.create({
     *   data: {
     *     // ... data to create a Task_assignees
     *   }
     * })
     * 
     */
    create<T extends task_assigneesCreateArgs>(args: SelectSubset<T, task_assigneesCreateArgs<ExtArgs>>): Prisma__task_assigneesClient<$Result.GetResult<Prisma.$task_assigneesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Task_assignees.
     * @param {task_assigneesCreateManyArgs} args - Arguments to create many Task_assignees.
     * @example
     * // Create many Task_assignees
     * const task_assignees = await prisma.task_assignees.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends task_assigneesCreateManyArgs>(args?: SelectSubset<T, task_assigneesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Task_assignees.
     * @param {task_assigneesDeleteArgs} args - Arguments to delete one Task_assignees.
     * @example
     * // Delete one Task_assignees
     * const Task_assignees = await prisma.task_assignees.delete({
     *   where: {
     *     // ... filter to delete one Task_assignees
     *   }
     * })
     * 
     */
    delete<T extends task_assigneesDeleteArgs>(args: SelectSubset<T, task_assigneesDeleteArgs<ExtArgs>>): Prisma__task_assigneesClient<$Result.GetResult<Prisma.$task_assigneesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Task_assignees.
     * @param {task_assigneesUpdateArgs} args - Arguments to update one Task_assignees.
     * @example
     * // Update one Task_assignees
     * const task_assignees = await prisma.task_assignees.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends task_assigneesUpdateArgs>(args: SelectSubset<T, task_assigneesUpdateArgs<ExtArgs>>): Prisma__task_assigneesClient<$Result.GetResult<Prisma.$task_assigneesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Task_assignees.
     * @param {task_assigneesDeleteManyArgs} args - Arguments to filter Task_assignees to delete.
     * @example
     * // Delete a few Task_assignees
     * const { count } = await prisma.task_assignees.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends task_assigneesDeleteManyArgs>(args?: SelectSubset<T, task_assigneesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Task_assignees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_assigneesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Task_assignees
     * const task_assignees = await prisma.task_assignees.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends task_assigneesUpdateManyArgs>(args: SelectSubset<T, task_assigneesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task_assignees.
     * @param {task_assigneesUpsertArgs} args - Arguments to update or create a Task_assignees.
     * @example
     * // Update or create a Task_assignees
     * const task_assignees = await prisma.task_assignees.upsert({
     *   create: {
     *     // ... data to create a Task_assignees
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task_assignees we want to update
     *   }
     * })
     */
    upsert<T extends task_assigneesUpsertArgs>(args: SelectSubset<T, task_assigneesUpsertArgs<ExtArgs>>): Prisma__task_assigneesClient<$Result.GetResult<Prisma.$task_assigneesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Task_assignees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_assigneesCountArgs} args - Arguments to filter Task_assignees to count.
     * @example
     * // Count the number of Task_assignees
     * const count = await prisma.task_assignees.count({
     *   where: {
     *     // ... the filter for the Task_assignees we want to count
     *   }
     * })
    **/
    count<T extends task_assigneesCountArgs>(
      args?: Subset<T, task_assigneesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Task_assigneesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task_assignees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Task_assigneesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Task_assigneesAggregateArgs>(args: Subset<T, Task_assigneesAggregateArgs>): Prisma.PrismaPromise<GetTask_assigneesAggregateType<T>>

    /**
     * Group by Task_assignees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_assigneesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends task_assigneesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: task_assigneesGroupByArgs['orderBy'] }
        : { orderBy?: task_assigneesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, task_assigneesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTask_assigneesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the task_assignees model
   */
  readonly fields: task_assigneesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for task_assignees.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__task_assigneesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tasks<T extends tasksDefaultArgs<ExtArgs> = {}>(args?: Subset<T, tasksDefaultArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the task_assignees model
   */
  interface task_assigneesFieldRefs {
    readonly id: FieldRef<"task_assignees", 'Int'>
    readonly task_id: FieldRef<"task_assignees", 'Int'>
    readonly user_id: FieldRef<"task_assignees", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * task_assignees findUnique
   */
  export type task_assigneesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_assignees
     */
    select?: task_assigneesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_assignees
     */
    omit?: task_assigneesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_assigneesInclude<ExtArgs> | null
    /**
     * Filter, which task_assignees to fetch.
     */
    where: task_assigneesWhereUniqueInput
  }

  /**
   * task_assignees findUniqueOrThrow
   */
  export type task_assigneesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_assignees
     */
    select?: task_assigneesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_assignees
     */
    omit?: task_assigneesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_assigneesInclude<ExtArgs> | null
    /**
     * Filter, which task_assignees to fetch.
     */
    where: task_assigneesWhereUniqueInput
  }

  /**
   * task_assignees findFirst
   */
  export type task_assigneesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_assignees
     */
    select?: task_assigneesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_assignees
     */
    omit?: task_assigneesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_assigneesInclude<ExtArgs> | null
    /**
     * Filter, which task_assignees to fetch.
     */
    where?: task_assigneesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of task_assignees to fetch.
     */
    orderBy?: task_assigneesOrderByWithRelationInput | task_assigneesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for task_assignees.
     */
    cursor?: task_assigneesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` task_assignees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` task_assignees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of task_assignees.
     */
    distinct?: Task_assigneesScalarFieldEnum | Task_assigneesScalarFieldEnum[]
  }

  /**
   * task_assignees findFirstOrThrow
   */
  export type task_assigneesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_assignees
     */
    select?: task_assigneesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_assignees
     */
    omit?: task_assigneesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_assigneesInclude<ExtArgs> | null
    /**
     * Filter, which task_assignees to fetch.
     */
    where?: task_assigneesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of task_assignees to fetch.
     */
    orderBy?: task_assigneesOrderByWithRelationInput | task_assigneesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for task_assignees.
     */
    cursor?: task_assigneesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` task_assignees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` task_assignees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of task_assignees.
     */
    distinct?: Task_assigneesScalarFieldEnum | Task_assigneesScalarFieldEnum[]
  }

  /**
   * task_assignees findMany
   */
  export type task_assigneesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_assignees
     */
    select?: task_assigneesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_assignees
     */
    omit?: task_assigneesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_assigneesInclude<ExtArgs> | null
    /**
     * Filter, which task_assignees to fetch.
     */
    where?: task_assigneesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of task_assignees to fetch.
     */
    orderBy?: task_assigneesOrderByWithRelationInput | task_assigneesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing task_assignees.
     */
    cursor?: task_assigneesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` task_assignees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` task_assignees.
     */
    skip?: number
    distinct?: Task_assigneesScalarFieldEnum | Task_assigneesScalarFieldEnum[]
  }

  /**
   * task_assignees create
   */
  export type task_assigneesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_assignees
     */
    select?: task_assigneesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_assignees
     */
    omit?: task_assigneesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_assigneesInclude<ExtArgs> | null
    /**
     * The data needed to create a task_assignees.
     */
    data: XOR<task_assigneesCreateInput, task_assigneesUncheckedCreateInput>
  }

  /**
   * task_assignees createMany
   */
  export type task_assigneesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many task_assignees.
     */
    data: task_assigneesCreateManyInput | task_assigneesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * task_assignees update
   */
  export type task_assigneesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_assignees
     */
    select?: task_assigneesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_assignees
     */
    omit?: task_assigneesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_assigneesInclude<ExtArgs> | null
    /**
     * The data needed to update a task_assignees.
     */
    data: XOR<task_assigneesUpdateInput, task_assigneesUncheckedUpdateInput>
    /**
     * Choose, which task_assignees to update.
     */
    where: task_assigneesWhereUniqueInput
  }

  /**
   * task_assignees updateMany
   */
  export type task_assigneesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update task_assignees.
     */
    data: XOR<task_assigneesUpdateManyMutationInput, task_assigneesUncheckedUpdateManyInput>
    /**
     * Filter which task_assignees to update
     */
    where?: task_assigneesWhereInput
    /**
     * Limit how many task_assignees to update.
     */
    limit?: number
  }

  /**
   * task_assignees upsert
   */
  export type task_assigneesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_assignees
     */
    select?: task_assigneesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_assignees
     */
    omit?: task_assigneesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_assigneesInclude<ExtArgs> | null
    /**
     * The filter to search for the task_assignees to update in case it exists.
     */
    where: task_assigneesWhereUniqueInput
    /**
     * In case the task_assignees found by the `where` argument doesn't exist, create a new task_assignees with this data.
     */
    create: XOR<task_assigneesCreateInput, task_assigneesUncheckedCreateInput>
    /**
     * In case the task_assignees was found with the provided `where` argument, update it with this data.
     */
    update: XOR<task_assigneesUpdateInput, task_assigneesUncheckedUpdateInput>
  }

  /**
   * task_assignees delete
   */
  export type task_assigneesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_assignees
     */
    select?: task_assigneesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_assignees
     */
    omit?: task_assigneesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_assigneesInclude<ExtArgs> | null
    /**
     * Filter which task_assignees to delete.
     */
    where: task_assigneesWhereUniqueInput
  }

  /**
   * task_assignees deleteMany
   */
  export type task_assigneesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which task_assignees to delete
     */
    where?: task_assigneesWhereInput
    /**
     * Limit how many task_assignees to delete.
     */
    limit?: number
  }

  /**
   * task_assignees without action
   */
  export type task_assigneesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_assignees
     */
    select?: task_assigneesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_assignees
     */
    omit?: task_assigneesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_assigneesInclude<ExtArgs> | null
  }


  /**
   * Model task_label_links
   */

  export type AggregateTask_label_links = {
    _count: Task_label_linksCountAggregateOutputType | null
    _avg: Task_label_linksAvgAggregateOutputType | null
    _sum: Task_label_linksSumAggregateOutputType | null
    _min: Task_label_linksMinAggregateOutputType | null
    _max: Task_label_linksMaxAggregateOutputType | null
  }

  export type Task_label_linksAvgAggregateOutputType = {
    id: number | null
    task_id: number | null
    label_id: number | null
  }

  export type Task_label_linksSumAggregateOutputType = {
    id: number | null
    task_id: number | null
    label_id: number | null
  }

  export type Task_label_linksMinAggregateOutputType = {
    id: number | null
    task_id: number | null
    label_id: number | null
  }

  export type Task_label_linksMaxAggregateOutputType = {
    id: number | null
    task_id: number | null
    label_id: number | null
  }

  export type Task_label_linksCountAggregateOutputType = {
    id: number
    task_id: number
    label_id: number
    _all: number
  }


  export type Task_label_linksAvgAggregateInputType = {
    id?: true
    task_id?: true
    label_id?: true
  }

  export type Task_label_linksSumAggregateInputType = {
    id?: true
    task_id?: true
    label_id?: true
  }

  export type Task_label_linksMinAggregateInputType = {
    id?: true
    task_id?: true
    label_id?: true
  }

  export type Task_label_linksMaxAggregateInputType = {
    id?: true
    task_id?: true
    label_id?: true
  }

  export type Task_label_linksCountAggregateInputType = {
    id?: true
    task_id?: true
    label_id?: true
    _all?: true
  }

  export type Task_label_linksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which task_label_links to aggregate.
     */
    where?: task_label_linksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of task_label_links to fetch.
     */
    orderBy?: task_label_linksOrderByWithRelationInput | task_label_linksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: task_label_linksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` task_label_links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` task_label_links.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned task_label_links
    **/
    _count?: true | Task_label_linksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Task_label_linksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Task_label_linksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Task_label_linksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Task_label_linksMaxAggregateInputType
  }

  export type GetTask_label_linksAggregateType<T extends Task_label_linksAggregateArgs> = {
        [P in keyof T & keyof AggregateTask_label_links]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask_label_links[P]>
      : GetScalarType<T[P], AggregateTask_label_links[P]>
  }




  export type task_label_linksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: task_label_linksWhereInput
    orderBy?: task_label_linksOrderByWithAggregationInput | task_label_linksOrderByWithAggregationInput[]
    by: Task_label_linksScalarFieldEnum[] | Task_label_linksScalarFieldEnum
    having?: task_label_linksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Task_label_linksCountAggregateInputType | true
    _avg?: Task_label_linksAvgAggregateInputType
    _sum?: Task_label_linksSumAggregateInputType
    _min?: Task_label_linksMinAggregateInputType
    _max?: Task_label_linksMaxAggregateInputType
  }

  export type Task_label_linksGroupByOutputType = {
    id: number
    task_id: number
    label_id: number
    _count: Task_label_linksCountAggregateOutputType | null
    _avg: Task_label_linksAvgAggregateOutputType | null
    _sum: Task_label_linksSumAggregateOutputType | null
    _min: Task_label_linksMinAggregateOutputType | null
    _max: Task_label_linksMaxAggregateOutputType | null
  }

  type GetTask_label_linksGroupByPayload<T extends task_label_linksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Task_label_linksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Task_label_linksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Task_label_linksGroupByOutputType[P]>
            : GetScalarType<T[P], Task_label_linksGroupByOutputType[P]>
        }
      >
    >


  export type task_label_linksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    task_id?: boolean
    label_id?: boolean
    tasks?: boolean | tasksDefaultArgs<ExtArgs>
    task_labels?: boolean | task_labelsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task_label_links"]>



  export type task_label_linksSelectScalar = {
    id?: boolean
    task_id?: boolean
    label_id?: boolean
  }

  export type task_label_linksOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "task_id" | "label_id", ExtArgs["result"]["task_label_links"]>
  export type task_label_linksInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | tasksDefaultArgs<ExtArgs>
    task_labels?: boolean | task_labelsDefaultArgs<ExtArgs>
  }

  export type $task_label_linksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "task_label_links"
    objects: {
      tasks: Prisma.$tasksPayload<ExtArgs>
      task_labels: Prisma.$task_labelsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      task_id: number
      label_id: number
    }, ExtArgs["result"]["task_label_links"]>
    composites: {}
  }

  type task_label_linksGetPayload<S extends boolean | null | undefined | task_label_linksDefaultArgs> = $Result.GetResult<Prisma.$task_label_linksPayload, S>

  type task_label_linksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<task_label_linksFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Task_label_linksCountAggregateInputType | true
    }

  export interface task_label_linksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['task_label_links'], meta: { name: 'task_label_links' } }
    /**
     * Find zero or one Task_label_links that matches the filter.
     * @param {task_label_linksFindUniqueArgs} args - Arguments to find a Task_label_links
     * @example
     * // Get one Task_label_links
     * const task_label_links = await prisma.task_label_links.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends task_label_linksFindUniqueArgs>(args: SelectSubset<T, task_label_linksFindUniqueArgs<ExtArgs>>): Prisma__task_label_linksClient<$Result.GetResult<Prisma.$task_label_linksPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Task_label_links that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {task_label_linksFindUniqueOrThrowArgs} args - Arguments to find a Task_label_links
     * @example
     * // Get one Task_label_links
     * const task_label_links = await prisma.task_label_links.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends task_label_linksFindUniqueOrThrowArgs>(args: SelectSubset<T, task_label_linksFindUniqueOrThrowArgs<ExtArgs>>): Prisma__task_label_linksClient<$Result.GetResult<Prisma.$task_label_linksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task_label_links that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_label_linksFindFirstArgs} args - Arguments to find a Task_label_links
     * @example
     * // Get one Task_label_links
     * const task_label_links = await prisma.task_label_links.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends task_label_linksFindFirstArgs>(args?: SelectSubset<T, task_label_linksFindFirstArgs<ExtArgs>>): Prisma__task_label_linksClient<$Result.GetResult<Prisma.$task_label_linksPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task_label_links that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_label_linksFindFirstOrThrowArgs} args - Arguments to find a Task_label_links
     * @example
     * // Get one Task_label_links
     * const task_label_links = await prisma.task_label_links.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends task_label_linksFindFirstOrThrowArgs>(args?: SelectSubset<T, task_label_linksFindFirstOrThrowArgs<ExtArgs>>): Prisma__task_label_linksClient<$Result.GetResult<Prisma.$task_label_linksPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Task_label_links that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_label_linksFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Task_label_links
     * const task_label_links = await prisma.task_label_links.findMany()
     * 
     * // Get first 10 Task_label_links
     * const task_label_links = await prisma.task_label_links.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const task_label_linksWithIdOnly = await prisma.task_label_links.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends task_label_linksFindManyArgs>(args?: SelectSubset<T, task_label_linksFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$task_label_linksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Task_label_links.
     * @param {task_label_linksCreateArgs} args - Arguments to create a Task_label_links.
     * @example
     * // Create one Task_label_links
     * const Task_label_links = await prisma.task_label_links.create({
     *   data: {
     *     // ... data to create a Task_label_links
     *   }
     * })
     * 
     */
    create<T extends task_label_linksCreateArgs>(args: SelectSubset<T, task_label_linksCreateArgs<ExtArgs>>): Prisma__task_label_linksClient<$Result.GetResult<Prisma.$task_label_linksPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Task_label_links.
     * @param {task_label_linksCreateManyArgs} args - Arguments to create many Task_label_links.
     * @example
     * // Create many Task_label_links
     * const task_label_links = await prisma.task_label_links.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends task_label_linksCreateManyArgs>(args?: SelectSubset<T, task_label_linksCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Task_label_links.
     * @param {task_label_linksDeleteArgs} args - Arguments to delete one Task_label_links.
     * @example
     * // Delete one Task_label_links
     * const Task_label_links = await prisma.task_label_links.delete({
     *   where: {
     *     // ... filter to delete one Task_label_links
     *   }
     * })
     * 
     */
    delete<T extends task_label_linksDeleteArgs>(args: SelectSubset<T, task_label_linksDeleteArgs<ExtArgs>>): Prisma__task_label_linksClient<$Result.GetResult<Prisma.$task_label_linksPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Task_label_links.
     * @param {task_label_linksUpdateArgs} args - Arguments to update one Task_label_links.
     * @example
     * // Update one Task_label_links
     * const task_label_links = await prisma.task_label_links.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends task_label_linksUpdateArgs>(args: SelectSubset<T, task_label_linksUpdateArgs<ExtArgs>>): Prisma__task_label_linksClient<$Result.GetResult<Prisma.$task_label_linksPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Task_label_links.
     * @param {task_label_linksDeleteManyArgs} args - Arguments to filter Task_label_links to delete.
     * @example
     * // Delete a few Task_label_links
     * const { count } = await prisma.task_label_links.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends task_label_linksDeleteManyArgs>(args?: SelectSubset<T, task_label_linksDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Task_label_links.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_label_linksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Task_label_links
     * const task_label_links = await prisma.task_label_links.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends task_label_linksUpdateManyArgs>(args: SelectSubset<T, task_label_linksUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task_label_links.
     * @param {task_label_linksUpsertArgs} args - Arguments to update or create a Task_label_links.
     * @example
     * // Update or create a Task_label_links
     * const task_label_links = await prisma.task_label_links.upsert({
     *   create: {
     *     // ... data to create a Task_label_links
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task_label_links we want to update
     *   }
     * })
     */
    upsert<T extends task_label_linksUpsertArgs>(args: SelectSubset<T, task_label_linksUpsertArgs<ExtArgs>>): Prisma__task_label_linksClient<$Result.GetResult<Prisma.$task_label_linksPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Task_label_links.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_label_linksCountArgs} args - Arguments to filter Task_label_links to count.
     * @example
     * // Count the number of Task_label_links
     * const count = await prisma.task_label_links.count({
     *   where: {
     *     // ... the filter for the Task_label_links we want to count
     *   }
     * })
    **/
    count<T extends task_label_linksCountArgs>(
      args?: Subset<T, task_label_linksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Task_label_linksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task_label_links.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Task_label_linksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Task_label_linksAggregateArgs>(args: Subset<T, Task_label_linksAggregateArgs>): Prisma.PrismaPromise<GetTask_label_linksAggregateType<T>>

    /**
     * Group by Task_label_links.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_label_linksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends task_label_linksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: task_label_linksGroupByArgs['orderBy'] }
        : { orderBy?: task_label_linksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, task_label_linksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTask_label_linksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the task_label_links model
   */
  readonly fields: task_label_linksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for task_label_links.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__task_label_linksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tasks<T extends tasksDefaultArgs<ExtArgs> = {}>(args?: Subset<T, tasksDefaultArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    task_labels<T extends task_labelsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, task_labelsDefaultArgs<ExtArgs>>): Prisma__task_labelsClient<$Result.GetResult<Prisma.$task_labelsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the task_label_links model
   */
  interface task_label_linksFieldRefs {
    readonly id: FieldRef<"task_label_links", 'Int'>
    readonly task_id: FieldRef<"task_label_links", 'Int'>
    readonly label_id: FieldRef<"task_label_links", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * task_label_links findUnique
   */
  export type task_label_linksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_label_links
     */
    select?: task_label_linksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_label_links
     */
    omit?: task_label_linksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_label_linksInclude<ExtArgs> | null
    /**
     * Filter, which task_label_links to fetch.
     */
    where: task_label_linksWhereUniqueInput
  }

  /**
   * task_label_links findUniqueOrThrow
   */
  export type task_label_linksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_label_links
     */
    select?: task_label_linksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_label_links
     */
    omit?: task_label_linksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_label_linksInclude<ExtArgs> | null
    /**
     * Filter, which task_label_links to fetch.
     */
    where: task_label_linksWhereUniqueInput
  }

  /**
   * task_label_links findFirst
   */
  export type task_label_linksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_label_links
     */
    select?: task_label_linksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_label_links
     */
    omit?: task_label_linksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_label_linksInclude<ExtArgs> | null
    /**
     * Filter, which task_label_links to fetch.
     */
    where?: task_label_linksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of task_label_links to fetch.
     */
    orderBy?: task_label_linksOrderByWithRelationInput | task_label_linksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for task_label_links.
     */
    cursor?: task_label_linksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` task_label_links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` task_label_links.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of task_label_links.
     */
    distinct?: Task_label_linksScalarFieldEnum | Task_label_linksScalarFieldEnum[]
  }

  /**
   * task_label_links findFirstOrThrow
   */
  export type task_label_linksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_label_links
     */
    select?: task_label_linksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_label_links
     */
    omit?: task_label_linksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_label_linksInclude<ExtArgs> | null
    /**
     * Filter, which task_label_links to fetch.
     */
    where?: task_label_linksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of task_label_links to fetch.
     */
    orderBy?: task_label_linksOrderByWithRelationInput | task_label_linksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for task_label_links.
     */
    cursor?: task_label_linksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` task_label_links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` task_label_links.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of task_label_links.
     */
    distinct?: Task_label_linksScalarFieldEnum | Task_label_linksScalarFieldEnum[]
  }

  /**
   * task_label_links findMany
   */
  export type task_label_linksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_label_links
     */
    select?: task_label_linksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_label_links
     */
    omit?: task_label_linksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_label_linksInclude<ExtArgs> | null
    /**
     * Filter, which task_label_links to fetch.
     */
    where?: task_label_linksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of task_label_links to fetch.
     */
    orderBy?: task_label_linksOrderByWithRelationInput | task_label_linksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing task_label_links.
     */
    cursor?: task_label_linksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` task_label_links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` task_label_links.
     */
    skip?: number
    distinct?: Task_label_linksScalarFieldEnum | Task_label_linksScalarFieldEnum[]
  }

  /**
   * task_label_links create
   */
  export type task_label_linksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_label_links
     */
    select?: task_label_linksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_label_links
     */
    omit?: task_label_linksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_label_linksInclude<ExtArgs> | null
    /**
     * The data needed to create a task_label_links.
     */
    data: XOR<task_label_linksCreateInput, task_label_linksUncheckedCreateInput>
  }

  /**
   * task_label_links createMany
   */
  export type task_label_linksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many task_label_links.
     */
    data: task_label_linksCreateManyInput | task_label_linksCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * task_label_links update
   */
  export type task_label_linksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_label_links
     */
    select?: task_label_linksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_label_links
     */
    omit?: task_label_linksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_label_linksInclude<ExtArgs> | null
    /**
     * The data needed to update a task_label_links.
     */
    data: XOR<task_label_linksUpdateInput, task_label_linksUncheckedUpdateInput>
    /**
     * Choose, which task_label_links to update.
     */
    where: task_label_linksWhereUniqueInput
  }

  /**
   * task_label_links updateMany
   */
  export type task_label_linksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update task_label_links.
     */
    data: XOR<task_label_linksUpdateManyMutationInput, task_label_linksUncheckedUpdateManyInput>
    /**
     * Filter which task_label_links to update
     */
    where?: task_label_linksWhereInput
    /**
     * Limit how many task_label_links to update.
     */
    limit?: number
  }

  /**
   * task_label_links upsert
   */
  export type task_label_linksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_label_links
     */
    select?: task_label_linksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_label_links
     */
    omit?: task_label_linksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_label_linksInclude<ExtArgs> | null
    /**
     * The filter to search for the task_label_links to update in case it exists.
     */
    where: task_label_linksWhereUniqueInput
    /**
     * In case the task_label_links found by the `where` argument doesn't exist, create a new task_label_links with this data.
     */
    create: XOR<task_label_linksCreateInput, task_label_linksUncheckedCreateInput>
    /**
     * In case the task_label_links was found with the provided `where` argument, update it with this data.
     */
    update: XOR<task_label_linksUpdateInput, task_label_linksUncheckedUpdateInput>
  }

  /**
   * task_label_links delete
   */
  export type task_label_linksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_label_links
     */
    select?: task_label_linksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_label_links
     */
    omit?: task_label_linksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_label_linksInclude<ExtArgs> | null
    /**
     * Filter which task_label_links to delete.
     */
    where: task_label_linksWhereUniqueInput
  }

  /**
   * task_label_links deleteMany
   */
  export type task_label_linksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which task_label_links to delete
     */
    where?: task_label_linksWhereInput
    /**
     * Limit how many task_label_links to delete.
     */
    limit?: number
  }

  /**
   * task_label_links without action
   */
  export type task_label_linksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_label_links
     */
    select?: task_label_linksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_label_links
     */
    omit?: task_label_linksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_label_linksInclude<ExtArgs> | null
  }


  /**
   * Model task_labels
   */

  export type AggregateTask_labels = {
    _count: Task_labelsCountAggregateOutputType | null
    _avg: Task_labelsAvgAggregateOutputType | null
    _sum: Task_labelsSumAggregateOutputType | null
    _min: Task_labelsMinAggregateOutputType | null
    _max: Task_labelsMaxAggregateOutputType | null
  }

  export type Task_labelsAvgAggregateOutputType = {
    id: number | null
  }

  export type Task_labelsSumAggregateOutputType = {
    id: number | null
  }

  export type Task_labelsMinAggregateOutputType = {
    id: number | null
    name: string | null
    color: string | null
  }

  export type Task_labelsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    color: string | null
  }

  export type Task_labelsCountAggregateOutputType = {
    id: number
    name: number
    color: number
    _all: number
  }


  export type Task_labelsAvgAggregateInputType = {
    id?: true
  }

  export type Task_labelsSumAggregateInputType = {
    id?: true
  }

  export type Task_labelsMinAggregateInputType = {
    id?: true
    name?: true
    color?: true
  }

  export type Task_labelsMaxAggregateInputType = {
    id?: true
    name?: true
    color?: true
  }

  export type Task_labelsCountAggregateInputType = {
    id?: true
    name?: true
    color?: true
    _all?: true
  }

  export type Task_labelsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which task_labels to aggregate.
     */
    where?: task_labelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of task_labels to fetch.
     */
    orderBy?: task_labelsOrderByWithRelationInput | task_labelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: task_labelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` task_labels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` task_labels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned task_labels
    **/
    _count?: true | Task_labelsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Task_labelsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Task_labelsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Task_labelsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Task_labelsMaxAggregateInputType
  }

  export type GetTask_labelsAggregateType<T extends Task_labelsAggregateArgs> = {
        [P in keyof T & keyof AggregateTask_labels]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask_labels[P]>
      : GetScalarType<T[P], AggregateTask_labels[P]>
  }




  export type task_labelsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: task_labelsWhereInput
    orderBy?: task_labelsOrderByWithAggregationInput | task_labelsOrderByWithAggregationInput[]
    by: Task_labelsScalarFieldEnum[] | Task_labelsScalarFieldEnum
    having?: task_labelsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Task_labelsCountAggregateInputType | true
    _avg?: Task_labelsAvgAggregateInputType
    _sum?: Task_labelsSumAggregateInputType
    _min?: Task_labelsMinAggregateInputType
    _max?: Task_labelsMaxAggregateInputType
  }

  export type Task_labelsGroupByOutputType = {
    id: number
    name: string
    color: string | null
    _count: Task_labelsCountAggregateOutputType | null
    _avg: Task_labelsAvgAggregateOutputType | null
    _sum: Task_labelsSumAggregateOutputType | null
    _min: Task_labelsMinAggregateOutputType | null
    _max: Task_labelsMaxAggregateOutputType | null
  }

  type GetTask_labelsGroupByPayload<T extends task_labelsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Task_labelsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Task_labelsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Task_labelsGroupByOutputType[P]>
            : GetScalarType<T[P], Task_labelsGroupByOutputType[P]>
        }
      >
    >


  export type task_labelsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    color?: boolean
    task_label_links?: boolean | task_labels$task_label_linksArgs<ExtArgs>
    _count?: boolean | Task_labelsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task_labels"]>



  export type task_labelsSelectScalar = {
    id?: boolean
    name?: boolean
    color?: boolean
  }

  export type task_labelsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "color", ExtArgs["result"]["task_labels"]>
  export type task_labelsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task_label_links?: boolean | task_labels$task_label_linksArgs<ExtArgs>
    _count?: boolean | Task_labelsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $task_labelsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "task_labels"
    objects: {
      task_label_links: Prisma.$task_label_linksPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      color: string | null
    }, ExtArgs["result"]["task_labels"]>
    composites: {}
  }

  type task_labelsGetPayload<S extends boolean | null | undefined | task_labelsDefaultArgs> = $Result.GetResult<Prisma.$task_labelsPayload, S>

  type task_labelsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<task_labelsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Task_labelsCountAggregateInputType | true
    }

  export interface task_labelsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['task_labels'], meta: { name: 'task_labels' } }
    /**
     * Find zero or one Task_labels that matches the filter.
     * @param {task_labelsFindUniqueArgs} args - Arguments to find a Task_labels
     * @example
     * // Get one Task_labels
     * const task_labels = await prisma.task_labels.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends task_labelsFindUniqueArgs>(args: SelectSubset<T, task_labelsFindUniqueArgs<ExtArgs>>): Prisma__task_labelsClient<$Result.GetResult<Prisma.$task_labelsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Task_labels that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {task_labelsFindUniqueOrThrowArgs} args - Arguments to find a Task_labels
     * @example
     * // Get one Task_labels
     * const task_labels = await prisma.task_labels.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends task_labelsFindUniqueOrThrowArgs>(args: SelectSubset<T, task_labelsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__task_labelsClient<$Result.GetResult<Prisma.$task_labelsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task_labels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_labelsFindFirstArgs} args - Arguments to find a Task_labels
     * @example
     * // Get one Task_labels
     * const task_labels = await prisma.task_labels.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends task_labelsFindFirstArgs>(args?: SelectSubset<T, task_labelsFindFirstArgs<ExtArgs>>): Prisma__task_labelsClient<$Result.GetResult<Prisma.$task_labelsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task_labels that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_labelsFindFirstOrThrowArgs} args - Arguments to find a Task_labels
     * @example
     * // Get one Task_labels
     * const task_labels = await prisma.task_labels.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends task_labelsFindFirstOrThrowArgs>(args?: SelectSubset<T, task_labelsFindFirstOrThrowArgs<ExtArgs>>): Prisma__task_labelsClient<$Result.GetResult<Prisma.$task_labelsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Task_labels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_labelsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Task_labels
     * const task_labels = await prisma.task_labels.findMany()
     * 
     * // Get first 10 Task_labels
     * const task_labels = await prisma.task_labels.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const task_labelsWithIdOnly = await prisma.task_labels.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends task_labelsFindManyArgs>(args?: SelectSubset<T, task_labelsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$task_labelsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Task_labels.
     * @param {task_labelsCreateArgs} args - Arguments to create a Task_labels.
     * @example
     * // Create one Task_labels
     * const Task_labels = await prisma.task_labels.create({
     *   data: {
     *     // ... data to create a Task_labels
     *   }
     * })
     * 
     */
    create<T extends task_labelsCreateArgs>(args: SelectSubset<T, task_labelsCreateArgs<ExtArgs>>): Prisma__task_labelsClient<$Result.GetResult<Prisma.$task_labelsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Task_labels.
     * @param {task_labelsCreateManyArgs} args - Arguments to create many Task_labels.
     * @example
     * // Create many Task_labels
     * const task_labels = await prisma.task_labels.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends task_labelsCreateManyArgs>(args?: SelectSubset<T, task_labelsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Task_labels.
     * @param {task_labelsDeleteArgs} args - Arguments to delete one Task_labels.
     * @example
     * // Delete one Task_labels
     * const Task_labels = await prisma.task_labels.delete({
     *   where: {
     *     // ... filter to delete one Task_labels
     *   }
     * })
     * 
     */
    delete<T extends task_labelsDeleteArgs>(args: SelectSubset<T, task_labelsDeleteArgs<ExtArgs>>): Prisma__task_labelsClient<$Result.GetResult<Prisma.$task_labelsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Task_labels.
     * @param {task_labelsUpdateArgs} args - Arguments to update one Task_labels.
     * @example
     * // Update one Task_labels
     * const task_labels = await prisma.task_labels.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends task_labelsUpdateArgs>(args: SelectSubset<T, task_labelsUpdateArgs<ExtArgs>>): Prisma__task_labelsClient<$Result.GetResult<Prisma.$task_labelsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Task_labels.
     * @param {task_labelsDeleteManyArgs} args - Arguments to filter Task_labels to delete.
     * @example
     * // Delete a few Task_labels
     * const { count } = await prisma.task_labels.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends task_labelsDeleteManyArgs>(args?: SelectSubset<T, task_labelsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Task_labels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_labelsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Task_labels
     * const task_labels = await prisma.task_labels.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends task_labelsUpdateManyArgs>(args: SelectSubset<T, task_labelsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task_labels.
     * @param {task_labelsUpsertArgs} args - Arguments to update or create a Task_labels.
     * @example
     * // Update or create a Task_labels
     * const task_labels = await prisma.task_labels.upsert({
     *   create: {
     *     // ... data to create a Task_labels
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task_labels we want to update
     *   }
     * })
     */
    upsert<T extends task_labelsUpsertArgs>(args: SelectSubset<T, task_labelsUpsertArgs<ExtArgs>>): Prisma__task_labelsClient<$Result.GetResult<Prisma.$task_labelsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Task_labels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_labelsCountArgs} args - Arguments to filter Task_labels to count.
     * @example
     * // Count the number of Task_labels
     * const count = await prisma.task_labels.count({
     *   where: {
     *     // ... the filter for the Task_labels we want to count
     *   }
     * })
    **/
    count<T extends task_labelsCountArgs>(
      args?: Subset<T, task_labelsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Task_labelsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task_labels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Task_labelsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Task_labelsAggregateArgs>(args: Subset<T, Task_labelsAggregateArgs>): Prisma.PrismaPromise<GetTask_labelsAggregateType<T>>

    /**
     * Group by Task_labels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {task_labelsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends task_labelsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: task_labelsGroupByArgs['orderBy'] }
        : { orderBy?: task_labelsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, task_labelsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTask_labelsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the task_labels model
   */
  readonly fields: task_labelsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for task_labels.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__task_labelsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    task_label_links<T extends task_labels$task_label_linksArgs<ExtArgs> = {}>(args?: Subset<T, task_labels$task_label_linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$task_label_linksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the task_labels model
   */
  interface task_labelsFieldRefs {
    readonly id: FieldRef<"task_labels", 'Int'>
    readonly name: FieldRef<"task_labels", 'String'>
    readonly color: FieldRef<"task_labels", 'String'>
  }
    

  // Custom InputTypes
  /**
   * task_labels findUnique
   */
  export type task_labelsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_labels
     */
    select?: task_labelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_labels
     */
    omit?: task_labelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_labelsInclude<ExtArgs> | null
    /**
     * Filter, which task_labels to fetch.
     */
    where: task_labelsWhereUniqueInput
  }

  /**
   * task_labels findUniqueOrThrow
   */
  export type task_labelsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_labels
     */
    select?: task_labelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_labels
     */
    omit?: task_labelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_labelsInclude<ExtArgs> | null
    /**
     * Filter, which task_labels to fetch.
     */
    where: task_labelsWhereUniqueInput
  }

  /**
   * task_labels findFirst
   */
  export type task_labelsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_labels
     */
    select?: task_labelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_labels
     */
    omit?: task_labelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_labelsInclude<ExtArgs> | null
    /**
     * Filter, which task_labels to fetch.
     */
    where?: task_labelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of task_labels to fetch.
     */
    orderBy?: task_labelsOrderByWithRelationInput | task_labelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for task_labels.
     */
    cursor?: task_labelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` task_labels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` task_labels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of task_labels.
     */
    distinct?: Task_labelsScalarFieldEnum | Task_labelsScalarFieldEnum[]
  }

  /**
   * task_labels findFirstOrThrow
   */
  export type task_labelsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_labels
     */
    select?: task_labelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_labels
     */
    omit?: task_labelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_labelsInclude<ExtArgs> | null
    /**
     * Filter, which task_labels to fetch.
     */
    where?: task_labelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of task_labels to fetch.
     */
    orderBy?: task_labelsOrderByWithRelationInput | task_labelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for task_labels.
     */
    cursor?: task_labelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` task_labels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` task_labels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of task_labels.
     */
    distinct?: Task_labelsScalarFieldEnum | Task_labelsScalarFieldEnum[]
  }

  /**
   * task_labels findMany
   */
  export type task_labelsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_labels
     */
    select?: task_labelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_labels
     */
    omit?: task_labelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_labelsInclude<ExtArgs> | null
    /**
     * Filter, which task_labels to fetch.
     */
    where?: task_labelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of task_labels to fetch.
     */
    orderBy?: task_labelsOrderByWithRelationInput | task_labelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing task_labels.
     */
    cursor?: task_labelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` task_labels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` task_labels.
     */
    skip?: number
    distinct?: Task_labelsScalarFieldEnum | Task_labelsScalarFieldEnum[]
  }

  /**
   * task_labels create
   */
  export type task_labelsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_labels
     */
    select?: task_labelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_labels
     */
    omit?: task_labelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_labelsInclude<ExtArgs> | null
    /**
     * The data needed to create a task_labels.
     */
    data: XOR<task_labelsCreateInput, task_labelsUncheckedCreateInput>
  }

  /**
   * task_labels createMany
   */
  export type task_labelsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many task_labels.
     */
    data: task_labelsCreateManyInput | task_labelsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * task_labels update
   */
  export type task_labelsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_labels
     */
    select?: task_labelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_labels
     */
    omit?: task_labelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_labelsInclude<ExtArgs> | null
    /**
     * The data needed to update a task_labels.
     */
    data: XOR<task_labelsUpdateInput, task_labelsUncheckedUpdateInput>
    /**
     * Choose, which task_labels to update.
     */
    where: task_labelsWhereUniqueInput
  }

  /**
   * task_labels updateMany
   */
  export type task_labelsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update task_labels.
     */
    data: XOR<task_labelsUpdateManyMutationInput, task_labelsUncheckedUpdateManyInput>
    /**
     * Filter which task_labels to update
     */
    where?: task_labelsWhereInput
    /**
     * Limit how many task_labels to update.
     */
    limit?: number
  }

  /**
   * task_labels upsert
   */
  export type task_labelsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_labels
     */
    select?: task_labelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_labels
     */
    omit?: task_labelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_labelsInclude<ExtArgs> | null
    /**
     * The filter to search for the task_labels to update in case it exists.
     */
    where: task_labelsWhereUniqueInput
    /**
     * In case the task_labels found by the `where` argument doesn't exist, create a new task_labels with this data.
     */
    create: XOR<task_labelsCreateInput, task_labelsUncheckedCreateInput>
    /**
     * In case the task_labels was found with the provided `where` argument, update it with this data.
     */
    update: XOR<task_labelsUpdateInput, task_labelsUncheckedUpdateInput>
  }

  /**
   * task_labels delete
   */
  export type task_labelsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_labels
     */
    select?: task_labelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_labels
     */
    omit?: task_labelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_labelsInclude<ExtArgs> | null
    /**
     * Filter which task_labels to delete.
     */
    where: task_labelsWhereUniqueInput
  }

  /**
   * task_labels deleteMany
   */
  export type task_labelsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which task_labels to delete
     */
    where?: task_labelsWhereInput
    /**
     * Limit how many task_labels to delete.
     */
    limit?: number
  }

  /**
   * task_labels.task_label_links
   */
  export type task_labels$task_label_linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_label_links
     */
    select?: task_label_linksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_label_links
     */
    omit?: task_label_linksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_label_linksInclude<ExtArgs> | null
    where?: task_label_linksWhereInput
    orderBy?: task_label_linksOrderByWithRelationInput | task_label_linksOrderByWithRelationInput[]
    cursor?: task_label_linksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Task_label_linksScalarFieldEnum | Task_label_linksScalarFieldEnum[]
  }

  /**
   * task_labels without action
   */
  export type task_labelsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_labels
     */
    select?: task_labelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_labels
     */
    omit?: task_labelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_labelsInclude<ExtArgs> | null
  }


  /**
   * Model tasks
   */

  export type AggregateTasks = {
    _count: TasksCountAggregateOutputType | null
    _avg: TasksAvgAggregateOutputType | null
    _sum: TasksSumAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  export type TasksAvgAggregateOutputType = {
    id: number | null
    project_id: number | null
    parent_task_id: number | null
    wip_limit: number | null
    created_by: number | null
  }

  export type TasksSumAggregateOutputType = {
    id: number | null
    project_id: number | null
    parent_task_id: number | null
    wip_limit: number | null
    created_by: number | null
  }

  export type TasksMinAggregateOutputType = {
    id: number | null
    project_id: number | null
    parent_task_id: number | null
    name: string | null
    description: string | null
    status: $Enums.tasks_status | null
    priority: $Enums.tasks_priority | null
    due_date: Date | null
    wip_limit: number | null
    swimlane: string | null
    created_by: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TasksMaxAggregateOutputType = {
    id: number | null
    project_id: number | null
    parent_task_id: number | null
    name: string | null
    description: string | null
    status: $Enums.tasks_status | null
    priority: $Enums.tasks_priority | null
    due_date: Date | null
    wip_limit: number | null
    swimlane: string | null
    created_by: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TasksCountAggregateOutputType = {
    id: number
    project_id: number
    parent_task_id: number
    name: number
    description: number
    status: number
    priority: number
    due_date: number
    wip_limit: number
    swimlane: number
    created_by: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TasksAvgAggregateInputType = {
    id?: true
    project_id?: true
    parent_task_id?: true
    wip_limit?: true
    created_by?: true
  }

  export type TasksSumAggregateInputType = {
    id?: true
    project_id?: true
    parent_task_id?: true
    wip_limit?: true
    created_by?: true
  }

  export type TasksMinAggregateInputType = {
    id?: true
    project_id?: true
    parent_task_id?: true
    name?: true
    description?: true
    status?: true
    priority?: true
    due_date?: true
    wip_limit?: true
    swimlane?: true
    created_by?: true
    created_at?: true
    updated_at?: true
  }

  export type TasksMaxAggregateInputType = {
    id?: true
    project_id?: true
    parent_task_id?: true
    name?: true
    description?: true
    status?: true
    priority?: true
    due_date?: true
    wip_limit?: true
    swimlane?: true
    created_by?: true
    created_at?: true
    updated_at?: true
  }

  export type TasksCountAggregateInputType = {
    id?: true
    project_id?: true
    parent_task_id?: true
    name?: true
    description?: true
    status?: true
    priority?: true
    due_date?: true
    wip_limit?: true
    swimlane?: true
    created_by?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TasksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tasks to aggregate.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tasks
    **/
    _count?: true | TasksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TasksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TasksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TasksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TasksMaxAggregateInputType
  }

  export type GetTasksAggregateType<T extends TasksAggregateArgs> = {
        [P in keyof T & keyof AggregateTasks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTasks[P]>
      : GetScalarType<T[P], AggregateTasks[P]>
  }




  export type tasksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tasksWhereInput
    orderBy?: tasksOrderByWithAggregationInput | tasksOrderByWithAggregationInput[]
    by: TasksScalarFieldEnum[] | TasksScalarFieldEnum
    having?: tasksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TasksCountAggregateInputType | true
    _avg?: TasksAvgAggregateInputType
    _sum?: TasksSumAggregateInputType
    _min?: TasksMinAggregateInputType
    _max?: TasksMaxAggregateInputType
  }

  export type TasksGroupByOutputType = {
    id: number
    project_id: number
    parent_task_id: number | null
    name: string
    description: string | null
    status: $Enums.tasks_status | null
    priority: $Enums.tasks_priority | null
    due_date: Date | null
    wip_limit: number | null
    swimlane: string | null
    created_by: number | null
    created_at: Date | null
    updated_at: Date | null
    _count: TasksCountAggregateOutputType | null
    _avg: TasksAvgAggregateOutputType | null
    _sum: TasksSumAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  type GetTasksGroupByPayload<T extends tasksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TasksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TasksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TasksGroupByOutputType[P]>
            : GetScalarType<T[P], TasksGroupByOutputType[P]>
        }
      >
    >


  export type tasksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    project_id?: boolean
    parent_task_id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    due_date?: boolean
    wip_limit?: boolean
    swimlane?: boolean
    created_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    sprint_tasks?: boolean | tasks$sprint_tasksArgs<ExtArgs>
    task_assignees?: boolean | tasks$task_assigneesArgs<ExtArgs>
    task_label_links?: boolean | tasks$task_label_linksArgs<ExtArgs>
    projects?: boolean | projectsDefaultArgs<ExtArgs>
    tasks?: boolean | tasks$tasksArgs<ExtArgs>
    other_tasks?: boolean | tasks$other_tasksArgs<ExtArgs>
    users?: boolean | tasks$usersArgs<ExtArgs>
    _count?: boolean | TasksCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tasks"]>



  export type tasksSelectScalar = {
    id?: boolean
    project_id?: boolean
    parent_task_id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    due_date?: boolean
    wip_limit?: boolean
    swimlane?: boolean
    created_by?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type tasksOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "project_id" | "parent_task_id" | "name" | "description" | "status" | "priority" | "due_date" | "wip_limit" | "swimlane" | "created_by" | "created_at" | "updated_at", ExtArgs["result"]["tasks"]>
  export type tasksInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sprint_tasks?: boolean | tasks$sprint_tasksArgs<ExtArgs>
    task_assignees?: boolean | tasks$task_assigneesArgs<ExtArgs>
    task_label_links?: boolean | tasks$task_label_linksArgs<ExtArgs>
    projects?: boolean | projectsDefaultArgs<ExtArgs>
    tasks?: boolean | tasks$tasksArgs<ExtArgs>
    other_tasks?: boolean | tasks$other_tasksArgs<ExtArgs>
    users?: boolean | tasks$usersArgs<ExtArgs>
    _count?: boolean | TasksCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $tasksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tasks"
    objects: {
      sprint_tasks: Prisma.$sprint_tasksPayload<ExtArgs>[]
      task_assignees: Prisma.$task_assigneesPayload<ExtArgs>[]
      task_label_links: Prisma.$task_label_linksPayload<ExtArgs>[]
      projects: Prisma.$projectsPayload<ExtArgs>
      tasks: Prisma.$tasksPayload<ExtArgs> | null
      other_tasks: Prisma.$tasksPayload<ExtArgs>[]
      users: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      project_id: number
      parent_task_id: number | null
      name: string
      description: string | null
      status: $Enums.tasks_status | null
      priority: $Enums.tasks_priority | null
      due_date: Date | null
      wip_limit: number | null
      swimlane: string | null
      created_by: number | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["tasks"]>
    composites: {}
  }

  type tasksGetPayload<S extends boolean | null | undefined | tasksDefaultArgs> = $Result.GetResult<Prisma.$tasksPayload, S>

  type tasksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tasksFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TasksCountAggregateInputType | true
    }

  export interface tasksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tasks'], meta: { name: 'tasks' } }
    /**
     * Find zero or one Tasks that matches the filter.
     * @param {tasksFindUniqueArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tasksFindUniqueArgs>(args: SelectSubset<T, tasksFindUniqueArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tasks that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tasksFindUniqueOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tasksFindUniqueOrThrowArgs>(args: SelectSubset<T, tasksFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksFindFirstArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tasksFindFirstArgs>(args?: SelectSubset<T, tasksFindFirstArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tasks that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksFindFirstOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tasksFindFirstOrThrowArgs>(args?: SelectSubset<T, tasksFindFirstOrThrowArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.tasks.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.tasks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tasksWithIdOnly = await prisma.tasks.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends tasksFindManyArgs>(args?: SelectSubset<T, tasksFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tasks.
     * @param {tasksCreateArgs} args - Arguments to create a Tasks.
     * @example
     * // Create one Tasks
     * const Tasks = await prisma.tasks.create({
     *   data: {
     *     // ... data to create a Tasks
     *   }
     * })
     * 
     */
    create<T extends tasksCreateArgs>(args: SelectSubset<T, tasksCreateArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tasks.
     * @param {tasksCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const tasks = await prisma.tasks.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tasksCreateManyArgs>(args?: SelectSubset<T, tasksCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tasks.
     * @param {tasksDeleteArgs} args - Arguments to delete one Tasks.
     * @example
     * // Delete one Tasks
     * const Tasks = await prisma.tasks.delete({
     *   where: {
     *     // ... filter to delete one Tasks
     *   }
     * })
     * 
     */
    delete<T extends tasksDeleteArgs>(args: SelectSubset<T, tasksDeleteArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tasks.
     * @param {tasksUpdateArgs} args - Arguments to update one Tasks.
     * @example
     * // Update one Tasks
     * const tasks = await prisma.tasks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tasksUpdateArgs>(args: SelectSubset<T, tasksUpdateArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tasks.
     * @param {tasksDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.tasks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tasksDeleteManyArgs>(args?: SelectSubset<T, tasksDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const tasks = await prisma.tasks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tasksUpdateManyArgs>(args: SelectSubset<T, tasksUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tasks.
     * @param {tasksUpsertArgs} args - Arguments to update or create a Tasks.
     * @example
     * // Update or create a Tasks
     * const tasks = await prisma.tasks.upsert({
     *   create: {
     *     // ... data to create a Tasks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tasks we want to update
     *   }
     * })
     */
    upsert<T extends tasksUpsertArgs>(args: SelectSubset<T, tasksUpsertArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.tasks.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends tasksCountArgs>(
      args?: Subset<T, tasksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TasksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TasksAggregateArgs>(args: Subset<T, TasksAggregateArgs>): Prisma.PrismaPromise<GetTasksAggregateType<T>>

    /**
     * Group by Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tasksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tasksGroupByArgs['orderBy'] }
        : { orderBy?: tasksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tasksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTasksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tasks model
   */
  readonly fields: tasksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tasks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tasksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sprint_tasks<T extends tasks$sprint_tasksArgs<ExtArgs> = {}>(args?: Subset<T, tasks$sprint_tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sprint_tasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    task_assignees<T extends tasks$task_assigneesArgs<ExtArgs> = {}>(args?: Subset<T, tasks$task_assigneesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$task_assigneesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    task_label_links<T extends tasks$task_label_linksArgs<ExtArgs> = {}>(args?: Subset<T, tasks$task_label_linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$task_label_linksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projects<T extends projectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, projectsDefaultArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tasks<T extends tasks$tasksArgs<ExtArgs> = {}>(args?: Subset<T, tasks$tasksArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    other_tasks<T extends tasks$other_tasksArgs<ExtArgs> = {}>(args?: Subset<T, tasks$other_tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends tasks$usersArgs<ExtArgs> = {}>(args?: Subset<T, tasks$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tasks model
   */
  interface tasksFieldRefs {
    readonly id: FieldRef<"tasks", 'Int'>
    readonly project_id: FieldRef<"tasks", 'Int'>
    readonly parent_task_id: FieldRef<"tasks", 'Int'>
    readonly name: FieldRef<"tasks", 'String'>
    readonly description: FieldRef<"tasks", 'String'>
    readonly status: FieldRef<"tasks", 'tasks_status'>
    readonly priority: FieldRef<"tasks", 'tasks_priority'>
    readonly due_date: FieldRef<"tasks", 'DateTime'>
    readonly wip_limit: FieldRef<"tasks", 'Int'>
    readonly swimlane: FieldRef<"tasks", 'String'>
    readonly created_by: FieldRef<"tasks", 'Int'>
    readonly created_at: FieldRef<"tasks", 'DateTime'>
    readonly updated_at: FieldRef<"tasks", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * tasks findUnique
   */
  export type tasksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks findUniqueOrThrow
   */
  export type tasksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks findFirst
   */
  export type tasksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tasks.
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tasks.
     */
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * tasks findFirstOrThrow
   */
  export type tasksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tasks.
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tasks.
     */
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * tasks findMany
   */
  export type tasksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tasks.
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * tasks create
   */
  export type tasksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * The data needed to create a tasks.
     */
    data: XOR<tasksCreateInput, tasksUncheckedCreateInput>
  }

  /**
   * tasks createMany
   */
  export type tasksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tasks.
     */
    data: tasksCreateManyInput | tasksCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tasks update
   */
  export type tasksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * The data needed to update a tasks.
     */
    data: XOR<tasksUpdateInput, tasksUncheckedUpdateInput>
    /**
     * Choose, which tasks to update.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks updateMany
   */
  export type tasksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tasks.
     */
    data: XOR<tasksUpdateManyMutationInput, tasksUncheckedUpdateManyInput>
    /**
     * Filter which tasks to update
     */
    where?: tasksWhereInput
    /**
     * Limit how many tasks to update.
     */
    limit?: number
  }

  /**
   * tasks upsert
   */
  export type tasksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * The filter to search for the tasks to update in case it exists.
     */
    where: tasksWhereUniqueInput
    /**
     * In case the tasks found by the `where` argument doesn't exist, create a new tasks with this data.
     */
    create: XOR<tasksCreateInput, tasksUncheckedCreateInput>
    /**
     * In case the tasks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tasksUpdateInput, tasksUncheckedUpdateInput>
  }

  /**
   * tasks delete
   */
  export type tasksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter which tasks to delete.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks deleteMany
   */
  export type tasksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tasks to delete
     */
    where?: tasksWhereInput
    /**
     * Limit how many tasks to delete.
     */
    limit?: number
  }

  /**
   * tasks.sprint_tasks
   */
  export type tasks$sprint_tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sprint_tasks
     */
    select?: sprint_tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sprint_tasks
     */
    omit?: sprint_tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sprint_tasksInclude<ExtArgs> | null
    where?: sprint_tasksWhereInput
    orderBy?: sprint_tasksOrderByWithRelationInput | sprint_tasksOrderByWithRelationInput[]
    cursor?: sprint_tasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Sprint_tasksScalarFieldEnum | Sprint_tasksScalarFieldEnum[]
  }

  /**
   * tasks.task_assignees
   */
  export type tasks$task_assigneesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_assignees
     */
    select?: task_assigneesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_assignees
     */
    omit?: task_assigneesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_assigneesInclude<ExtArgs> | null
    where?: task_assigneesWhereInput
    orderBy?: task_assigneesOrderByWithRelationInput | task_assigneesOrderByWithRelationInput[]
    cursor?: task_assigneesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Task_assigneesScalarFieldEnum | Task_assigneesScalarFieldEnum[]
  }

  /**
   * tasks.task_label_links
   */
  export type tasks$task_label_linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_label_links
     */
    select?: task_label_linksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_label_links
     */
    omit?: task_label_linksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_label_linksInclude<ExtArgs> | null
    where?: task_label_linksWhereInput
    orderBy?: task_label_linksOrderByWithRelationInput | task_label_linksOrderByWithRelationInput[]
    cursor?: task_label_linksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Task_label_linksScalarFieldEnum | Task_label_linksScalarFieldEnum[]
  }

  /**
   * tasks.tasks
   */
  export type tasks$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    where?: tasksWhereInput
  }

  /**
   * tasks.other_tasks
   */
  export type tasks$other_tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    where?: tasksWhereInput
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    cursor?: tasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * tasks.users
   */
  export type tasks$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * tasks without action
   */
  export type tasksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
  }


  /**
   * Model team_members
   */

  export type AggregateTeam_members = {
    _count: Team_membersCountAggregateOutputType | null
    _avg: Team_membersAvgAggregateOutputType | null
    _sum: Team_membersSumAggregateOutputType | null
    _min: Team_membersMinAggregateOutputType | null
    _max: Team_membersMaxAggregateOutputType | null
  }

  export type Team_membersAvgAggregateOutputType = {
    id: number | null
    team_id: number | null
    user_id: number | null
  }

  export type Team_membersSumAggregateOutputType = {
    id: number | null
    team_id: number | null
    user_id: number | null
  }

  export type Team_membersMinAggregateOutputType = {
    id: number | null
    team_id: number | null
    user_id: number | null
    role: $Enums.team_members_role | null
  }

  export type Team_membersMaxAggregateOutputType = {
    id: number | null
    team_id: number | null
    user_id: number | null
    role: $Enums.team_members_role | null
  }

  export type Team_membersCountAggregateOutputType = {
    id: number
    team_id: number
    user_id: number
    role: number
    _all: number
  }


  export type Team_membersAvgAggregateInputType = {
    id?: true
    team_id?: true
    user_id?: true
  }

  export type Team_membersSumAggregateInputType = {
    id?: true
    team_id?: true
    user_id?: true
  }

  export type Team_membersMinAggregateInputType = {
    id?: true
    team_id?: true
    user_id?: true
    role?: true
  }

  export type Team_membersMaxAggregateInputType = {
    id?: true
    team_id?: true
    user_id?: true
    role?: true
  }

  export type Team_membersCountAggregateInputType = {
    id?: true
    team_id?: true
    user_id?: true
    role?: true
    _all?: true
  }

  export type Team_membersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which team_members to aggregate.
     */
    where?: team_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of team_members to fetch.
     */
    orderBy?: team_membersOrderByWithRelationInput | team_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: team_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` team_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` team_members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned team_members
    **/
    _count?: true | Team_membersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Team_membersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Team_membersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Team_membersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Team_membersMaxAggregateInputType
  }

  export type GetTeam_membersAggregateType<T extends Team_membersAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam_members]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam_members[P]>
      : GetScalarType<T[P], AggregateTeam_members[P]>
  }




  export type team_membersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: team_membersWhereInput
    orderBy?: team_membersOrderByWithAggregationInput | team_membersOrderByWithAggregationInput[]
    by: Team_membersScalarFieldEnum[] | Team_membersScalarFieldEnum
    having?: team_membersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Team_membersCountAggregateInputType | true
    _avg?: Team_membersAvgAggregateInputType
    _sum?: Team_membersSumAggregateInputType
    _min?: Team_membersMinAggregateInputType
    _max?: Team_membersMaxAggregateInputType
  }

  export type Team_membersGroupByOutputType = {
    id: number
    team_id: number
    user_id: number
    role: $Enums.team_members_role | null
    _count: Team_membersCountAggregateOutputType | null
    _avg: Team_membersAvgAggregateOutputType | null
    _sum: Team_membersSumAggregateOutputType | null
    _min: Team_membersMinAggregateOutputType | null
    _max: Team_membersMaxAggregateOutputType | null
  }

  type GetTeam_membersGroupByPayload<T extends team_membersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Team_membersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Team_membersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Team_membersGroupByOutputType[P]>
            : GetScalarType<T[P], Team_membersGroupByOutputType[P]>
        }
      >
    >


  export type team_membersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_id?: boolean
    user_id?: boolean
    role?: boolean
    teams?: boolean | teamsDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team_members"]>



  export type team_membersSelectScalar = {
    id?: boolean
    team_id?: boolean
    user_id?: boolean
    role?: boolean
  }

  export type team_membersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "team_id" | "user_id" | "role", ExtArgs["result"]["team_members"]>
  export type team_membersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | teamsDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $team_membersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "team_members"
    objects: {
      teams: Prisma.$teamsPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      team_id: number
      user_id: number
      role: $Enums.team_members_role | null
    }, ExtArgs["result"]["team_members"]>
    composites: {}
  }

  type team_membersGetPayload<S extends boolean | null | undefined | team_membersDefaultArgs> = $Result.GetResult<Prisma.$team_membersPayload, S>

  type team_membersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<team_membersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Team_membersCountAggregateInputType | true
    }

  export interface team_membersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['team_members'], meta: { name: 'team_members' } }
    /**
     * Find zero or one Team_members that matches the filter.
     * @param {team_membersFindUniqueArgs} args - Arguments to find a Team_members
     * @example
     * // Get one Team_members
     * const team_members = await prisma.team_members.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends team_membersFindUniqueArgs>(args: SelectSubset<T, team_membersFindUniqueArgs<ExtArgs>>): Prisma__team_membersClient<$Result.GetResult<Prisma.$team_membersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Team_members that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {team_membersFindUniqueOrThrowArgs} args - Arguments to find a Team_members
     * @example
     * // Get one Team_members
     * const team_members = await prisma.team_members.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends team_membersFindUniqueOrThrowArgs>(args: SelectSubset<T, team_membersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__team_membersClient<$Result.GetResult<Prisma.$team_membersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team_members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {team_membersFindFirstArgs} args - Arguments to find a Team_members
     * @example
     * // Get one Team_members
     * const team_members = await prisma.team_members.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends team_membersFindFirstArgs>(args?: SelectSubset<T, team_membersFindFirstArgs<ExtArgs>>): Prisma__team_membersClient<$Result.GetResult<Prisma.$team_membersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team_members that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {team_membersFindFirstOrThrowArgs} args - Arguments to find a Team_members
     * @example
     * // Get one Team_members
     * const team_members = await prisma.team_members.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends team_membersFindFirstOrThrowArgs>(args?: SelectSubset<T, team_membersFindFirstOrThrowArgs<ExtArgs>>): Prisma__team_membersClient<$Result.GetResult<Prisma.$team_membersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Team_members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {team_membersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Team_members
     * const team_members = await prisma.team_members.findMany()
     * 
     * // Get first 10 Team_members
     * const team_members = await prisma.team_members.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const team_membersWithIdOnly = await prisma.team_members.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends team_membersFindManyArgs>(args?: SelectSubset<T, team_membersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$team_membersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Team_members.
     * @param {team_membersCreateArgs} args - Arguments to create a Team_members.
     * @example
     * // Create one Team_members
     * const Team_members = await prisma.team_members.create({
     *   data: {
     *     // ... data to create a Team_members
     *   }
     * })
     * 
     */
    create<T extends team_membersCreateArgs>(args: SelectSubset<T, team_membersCreateArgs<ExtArgs>>): Prisma__team_membersClient<$Result.GetResult<Prisma.$team_membersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Team_members.
     * @param {team_membersCreateManyArgs} args - Arguments to create many Team_members.
     * @example
     * // Create many Team_members
     * const team_members = await prisma.team_members.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends team_membersCreateManyArgs>(args?: SelectSubset<T, team_membersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Team_members.
     * @param {team_membersDeleteArgs} args - Arguments to delete one Team_members.
     * @example
     * // Delete one Team_members
     * const Team_members = await prisma.team_members.delete({
     *   where: {
     *     // ... filter to delete one Team_members
     *   }
     * })
     * 
     */
    delete<T extends team_membersDeleteArgs>(args: SelectSubset<T, team_membersDeleteArgs<ExtArgs>>): Prisma__team_membersClient<$Result.GetResult<Prisma.$team_membersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Team_members.
     * @param {team_membersUpdateArgs} args - Arguments to update one Team_members.
     * @example
     * // Update one Team_members
     * const team_members = await prisma.team_members.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends team_membersUpdateArgs>(args: SelectSubset<T, team_membersUpdateArgs<ExtArgs>>): Prisma__team_membersClient<$Result.GetResult<Prisma.$team_membersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Team_members.
     * @param {team_membersDeleteManyArgs} args - Arguments to filter Team_members to delete.
     * @example
     * // Delete a few Team_members
     * const { count } = await prisma.team_members.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends team_membersDeleteManyArgs>(args?: SelectSubset<T, team_membersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Team_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {team_membersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Team_members
     * const team_members = await prisma.team_members.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends team_membersUpdateManyArgs>(args: SelectSubset<T, team_membersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team_members.
     * @param {team_membersUpsertArgs} args - Arguments to update or create a Team_members.
     * @example
     * // Update or create a Team_members
     * const team_members = await prisma.team_members.upsert({
     *   create: {
     *     // ... data to create a Team_members
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team_members we want to update
     *   }
     * })
     */
    upsert<T extends team_membersUpsertArgs>(args: SelectSubset<T, team_membersUpsertArgs<ExtArgs>>): Prisma__team_membersClient<$Result.GetResult<Prisma.$team_membersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Team_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {team_membersCountArgs} args - Arguments to filter Team_members to count.
     * @example
     * // Count the number of Team_members
     * const count = await prisma.team_members.count({
     *   where: {
     *     // ... the filter for the Team_members we want to count
     *   }
     * })
    **/
    count<T extends team_membersCountArgs>(
      args?: Subset<T, team_membersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Team_membersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Team_membersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Team_membersAggregateArgs>(args: Subset<T, Team_membersAggregateArgs>): Prisma.PrismaPromise<GetTeam_membersAggregateType<T>>

    /**
     * Group by Team_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {team_membersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends team_membersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: team_membersGroupByArgs['orderBy'] }
        : { orderBy?: team_membersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, team_membersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeam_membersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the team_members model
   */
  readonly fields: team_membersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for team_members.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__team_membersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teams<T extends teamsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, teamsDefaultArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the team_members model
   */
  interface team_membersFieldRefs {
    readonly id: FieldRef<"team_members", 'Int'>
    readonly team_id: FieldRef<"team_members", 'Int'>
    readonly user_id: FieldRef<"team_members", 'Int'>
    readonly role: FieldRef<"team_members", 'team_members_role'>
  }
    

  // Custom InputTypes
  /**
   * team_members findUnique
   */
  export type team_membersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team_members
     */
    select?: team_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the team_members
     */
    omit?: team_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: team_membersInclude<ExtArgs> | null
    /**
     * Filter, which team_members to fetch.
     */
    where: team_membersWhereUniqueInput
  }

  /**
   * team_members findUniqueOrThrow
   */
  export type team_membersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team_members
     */
    select?: team_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the team_members
     */
    omit?: team_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: team_membersInclude<ExtArgs> | null
    /**
     * Filter, which team_members to fetch.
     */
    where: team_membersWhereUniqueInput
  }

  /**
   * team_members findFirst
   */
  export type team_membersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team_members
     */
    select?: team_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the team_members
     */
    omit?: team_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: team_membersInclude<ExtArgs> | null
    /**
     * Filter, which team_members to fetch.
     */
    where?: team_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of team_members to fetch.
     */
    orderBy?: team_membersOrderByWithRelationInput | team_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for team_members.
     */
    cursor?: team_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` team_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` team_members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of team_members.
     */
    distinct?: Team_membersScalarFieldEnum | Team_membersScalarFieldEnum[]
  }

  /**
   * team_members findFirstOrThrow
   */
  export type team_membersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team_members
     */
    select?: team_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the team_members
     */
    omit?: team_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: team_membersInclude<ExtArgs> | null
    /**
     * Filter, which team_members to fetch.
     */
    where?: team_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of team_members to fetch.
     */
    orderBy?: team_membersOrderByWithRelationInput | team_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for team_members.
     */
    cursor?: team_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` team_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` team_members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of team_members.
     */
    distinct?: Team_membersScalarFieldEnum | Team_membersScalarFieldEnum[]
  }

  /**
   * team_members findMany
   */
  export type team_membersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team_members
     */
    select?: team_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the team_members
     */
    omit?: team_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: team_membersInclude<ExtArgs> | null
    /**
     * Filter, which team_members to fetch.
     */
    where?: team_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of team_members to fetch.
     */
    orderBy?: team_membersOrderByWithRelationInput | team_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing team_members.
     */
    cursor?: team_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` team_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` team_members.
     */
    skip?: number
    distinct?: Team_membersScalarFieldEnum | Team_membersScalarFieldEnum[]
  }

  /**
   * team_members create
   */
  export type team_membersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team_members
     */
    select?: team_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the team_members
     */
    omit?: team_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: team_membersInclude<ExtArgs> | null
    /**
     * The data needed to create a team_members.
     */
    data: XOR<team_membersCreateInput, team_membersUncheckedCreateInput>
  }

  /**
   * team_members createMany
   */
  export type team_membersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many team_members.
     */
    data: team_membersCreateManyInput | team_membersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * team_members update
   */
  export type team_membersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team_members
     */
    select?: team_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the team_members
     */
    omit?: team_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: team_membersInclude<ExtArgs> | null
    /**
     * The data needed to update a team_members.
     */
    data: XOR<team_membersUpdateInput, team_membersUncheckedUpdateInput>
    /**
     * Choose, which team_members to update.
     */
    where: team_membersWhereUniqueInput
  }

  /**
   * team_members updateMany
   */
  export type team_membersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update team_members.
     */
    data: XOR<team_membersUpdateManyMutationInput, team_membersUncheckedUpdateManyInput>
    /**
     * Filter which team_members to update
     */
    where?: team_membersWhereInput
    /**
     * Limit how many team_members to update.
     */
    limit?: number
  }

  /**
   * team_members upsert
   */
  export type team_membersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team_members
     */
    select?: team_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the team_members
     */
    omit?: team_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: team_membersInclude<ExtArgs> | null
    /**
     * The filter to search for the team_members to update in case it exists.
     */
    where: team_membersWhereUniqueInput
    /**
     * In case the team_members found by the `where` argument doesn't exist, create a new team_members with this data.
     */
    create: XOR<team_membersCreateInput, team_membersUncheckedCreateInput>
    /**
     * In case the team_members was found with the provided `where` argument, update it with this data.
     */
    update: XOR<team_membersUpdateInput, team_membersUncheckedUpdateInput>
  }

  /**
   * team_members delete
   */
  export type team_membersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team_members
     */
    select?: team_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the team_members
     */
    omit?: team_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: team_membersInclude<ExtArgs> | null
    /**
     * Filter which team_members to delete.
     */
    where: team_membersWhereUniqueInput
  }

  /**
   * team_members deleteMany
   */
  export type team_membersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which team_members to delete
     */
    where?: team_membersWhereInput
    /**
     * Limit how many team_members to delete.
     */
    limit?: number
  }

  /**
   * team_members without action
   */
  export type team_membersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team_members
     */
    select?: team_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the team_members
     */
    omit?: team_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: team_membersInclude<ExtArgs> | null
  }


  /**
   * Model teams
   */

  export type AggregateTeams = {
    _count: TeamsCountAggregateOutputType | null
    _avg: TeamsAvgAggregateOutputType | null
    _sum: TeamsSumAggregateOutputType | null
    _min: TeamsMinAggregateOutputType | null
    _max: TeamsMaxAggregateOutputType | null
  }

  export type TeamsAvgAggregateOutputType = {
    id: number | null
  }

  export type TeamsSumAggregateOutputType = {
    id: number | null
  }

  export type TeamsMinAggregateOutputType = {
    id: number | null
    name: string | null
    logo: string | null
    plan: string | null
    created_at: Date | null
  }

  export type TeamsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    logo: string | null
    plan: string | null
    created_at: Date | null
  }

  export type TeamsCountAggregateOutputType = {
    id: number
    name: number
    logo: number
    plan: number
    created_at: number
    _all: number
  }


  export type TeamsAvgAggregateInputType = {
    id?: true
  }

  export type TeamsSumAggregateInputType = {
    id?: true
  }

  export type TeamsMinAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    plan?: true
    created_at?: true
  }

  export type TeamsMaxAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    plan?: true
    created_at?: true
  }

  export type TeamsCountAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    plan?: true
    created_at?: true
    _all?: true
  }

  export type TeamsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which teams to aggregate.
     */
    where?: teamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teams to fetch.
     */
    orderBy?: teamsOrderByWithRelationInput | teamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: teamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned teams
    **/
    _count?: true | TeamsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamsMaxAggregateInputType
  }

  export type GetTeamsAggregateType<T extends TeamsAggregateArgs> = {
        [P in keyof T & keyof AggregateTeams]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeams[P]>
      : GetScalarType<T[P], AggregateTeams[P]>
  }




  export type teamsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teamsWhereInput
    orderBy?: teamsOrderByWithAggregationInput | teamsOrderByWithAggregationInput[]
    by: TeamsScalarFieldEnum[] | TeamsScalarFieldEnum
    having?: teamsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamsCountAggregateInputType | true
    _avg?: TeamsAvgAggregateInputType
    _sum?: TeamsSumAggregateInputType
    _min?: TeamsMinAggregateInputType
    _max?: TeamsMaxAggregateInputType
  }

  export type TeamsGroupByOutputType = {
    id: number
    name: string
    logo: string | null
    plan: string | null
    created_at: Date | null
    _count: TeamsCountAggregateOutputType | null
    _avg: TeamsAvgAggregateOutputType | null
    _sum: TeamsSumAggregateOutputType | null
    _min: TeamsMinAggregateOutputType | null
    _max: TeamsMaxAggregateOutputType | null
  }

  type GetTeamsGroupByPayload<T extends teamsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamsGroupByOutputType[P]>
            : GetScalarType<T[P], TeamsGroupByOutputType[P]>
        }
      >
    >


  export type teamsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logo?: boolean
    plan?: boolean
    created_at?: boolean
    channels?: boolean | teams$channelsArgs<ExtArgs>
    projects?: boolean | teams$projectsArgs<ExtArgs>
    reports?: boolean | teams$reportsArgs<ExtArgs>
    resources?: boolean | teams$resourcesArgs<ExtArgs>
    team_members?: boolean | teams$team_membersArgs<ExtArgs>
    _count?: boolean | TeamsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teams"]>



  export type teamsSelectScalar = {
    id?: boolean
    name?: boolean
    logo?: boolean
    plan?: boolean
    created_at?: boolean
  }

  export type teamsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "logo" | "plan" | "created_at", ExtArgs["result"]["teams"]>
  export type teamsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    channels?: boolean | teams$channelsArgs<ExtArgs>
    projects?: boolean | teams$projectsArgs<ExtArgs>
    reports?: boolean | teams$reportsArgs<ExtArgs>
    resources?: boolean | teams$resourcesArgs<ExtArgs>
    team_members?: boolean | teams$team_membersArgs<ExtArgs>
    _count?: boolean | TeamsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $teamsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "teams"
    objects: {
      channels: Prisma.$channelsPayload<ExtArgs>[]
      projects: Prisma.$projectsPayload<ExtArgs>[]
      reports: Prisma.$reportsPayload<ExtArgs>[]
      resources: Prisma.$resourcesPayload<ExtArgs>[]
      team_members: Prisma.$team_membersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      logo: string | null
      plan: string | null
      created_at: Date | null
    }, ExtArgs["result"]["teams"]>
    composites: {}
  }

  type teamsGetPayload<S extends boolean | null | undefined | teamsDefaultArgs> = $Result.GetResult<Prisma.$teamsPayload, S>

  type teamsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<teamsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamsCountAggregateInputType | true
    }

  export interface teamsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['teams'], meta: { name: 'teams' } }
    /**
     * Find zero or one Teams that matches the filter.
     * @param {teamsFindUniqueArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends teamsFindUniqueArgs>(args: SelectSubset<T, teamsFindUniqueArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Teams that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {teamsFindUniqueOrThrowArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends teamsFindUniqueOrThrowArgs>(args: SelectSubset<T, teamsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamsFindFirstArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends teamsFindFirstArgs>(args?: SelectSubset<T, teamsFindFirstArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teams that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamsFindFirstOrThrowArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends teamsFindFirstOrThrowArgs>(args?: SelectSubset<T, teamsFindFirstOrThrowArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.teams.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.teams.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamsWithIdOnly = await prisma.teams.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends teamsFindManyArgs>(args?: SelectSubset<T, teamsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Teams.
     * @param {teamsCreateArgs} args - Arguments to create a Teams.
     * @example
     * // Create one Teams
     * const Teams = await prisma.teams.create({
     *   data: {
     *     // ... data to create a Teams
     *   }
     * })
     * 
     */
    create<T extends teamsCreateArgs>(args: SelectSubset<T, teamsCreateArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teams.
     * @param {teamsCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const teams = await prisma.teams.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends teamsCreateManyArgs>(args?: SelectSubset<T, teamsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Teams.
     * @param {teamsDeleteArgs} args - Arguments to delete one Teams.
     * @example
     * // Delete one Teams
     * const Teams = await prisma.teams.delete({
     *   where: {
     *     // ... filter to delete one Teams
     *   }
     * })
     * 
     */
    delete<T extends teamsDeleteArgs>(args: SelectSubset<T, teamsDeleteArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Teams.
     * @param {teamsUpdateArgs} args - Arguments to update one Teams.
     * @example
     * // Update one Teams
     * const teams = await prisma.teams.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends teamsUpdateArgs>(args: SelectSubset<T, teamsUpdateArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teams.
     * @param {teamsDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.teams.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends teamsDeleteManyArgs>(args?: SelectSubset<T, teamsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const teams = await prisma.teams.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends teamsUpdateManyArgs>(args: SelectSubset<T, teamsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Teams.
     * @param {teamsUpsertArgs} args - Arguments to update or create a Teams.
     * @example
     * // Update or create a Teams
     * const teams = await prisma.teams.upsert({
     *   create: {
     *     // ... data to create a Teams
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teams we want to update
     *   }
     * })
     */
    upsert<T extends teamsUpsertArgs>(args: SelectSubset<T, teamsUpsertArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamsCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.teams.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends teamsCountArgs>(
      args?: Subset<T, teamsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamsAggregateArgs>(args: Subset<T, TeamsAggregateArgs>): Prisma.PrismaPromise<GetTeamsAggregateType<T>>

    /**
     * Group by Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends teamsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: teamsGroupByArgs['orderBy'] }
        : { orderBy?: teamsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, teamsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the teams model
   */
  readonly fields: teamsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for teams.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__teamsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    channels<T extends teams$channelsArgs<ExtArgs> = {}>(args?: Subset<T, teams$channelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projects<T extends teams$projectsArgs<ExtArgs> = {}>(args?: Subset<T, teams$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends teams$reportsArgs<ExtArgs> = {}>(args?: Subset<T, teams$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resources<T extends teams$resourcesArgs<ExtArgs> = {}>(args?: Subset<T, teams$resourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$resourcesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    team_members<T extends teams$team_membersArgs<ExtArgs> = {}>(args?: Subset<T, teams$team_membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$team_membersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the teams model
   */
  interface teamsFieldRefs {
    readonly id: FieldRef<"teams", 'Int'>
    readonly name: FieldRef<"teams", 'String'>
    readonly logo: FieldRef<"teams", 'String'>
    readonly plan: FieldRef<"teams", 'String'>
    readonly created_at: FieldRef<"teams", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * teams findUnique
   */
  export type teamsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * Filter, which teams to fetch.
     */
    where: teamsWhereUniqueInput
  }

  /**
   * teams findUniqueOrThrow
   */
  export type teamsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * Filter, which teams to fetch.
     */
    where: teamsWhereUniqueInput
  }

  /**
   * teams findFirst
   */
  export type teamsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * Filter, which teams to fetch.
     */
    where?: teamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teams to fetch.
     */
    orderBy?: teamsOrderByWithRelationInput | teamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teams.
     */
    cursor?: teamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teams.
     */
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * teams findFirstOrThrow
   */
  export type teamsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * Filter, which teams to fetch.
     */
    where?: teamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teams to fetch.
     */
    orderBy?: teamsOrderByWithRelationInput | teamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teams.
     */
    cursor?: teamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teams.
     */
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * teams findMany
   */
  export type teamsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * Filter, which teams to fetch.
     */
    where?: teamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teams to fetch.
     */
    orderBy?: teamsOrderByWithRelationInput | teamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing teams.
     */
    cursor?: teamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teams.
     */
    skip?: number
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * teams create
   */
  export type teamsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * The data needed to create a teams.
     */
    data: XOR<teamsCreateInput, teamsUncheckedCreateInput>
  }

  /**
   * teams createMany
   */
  export type teamsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many teams.
     */
    data: teamsCreateManyInput | teamsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * teams update
   */
  export type teamsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * The data needed to update a teams.
     */
    data: XOR<teamsUpdateInput, teamsUncheckedUpdateInput>
    /**
     * Choose, which teams to update.
     */
    where: teamsWhereUniqueInput
  }

  /**
   * teams updateMany
   */
  export type teamsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update teams.
     */
    data: XOR<teamsUpdateManyMutationInput, teamsUncheckedUpdateManyInput>
    /**
     * Filter which teams to update
     */
    where?: teamsWhereInput
    /**
     * Limit how many teams to update.
     */
    limit?: number
  }

  /**
   * teams upsert
   */
  export type teamsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * The filter to search for the teams to update in case it exists.
     */
    where: teamsWhereUniqueInput
    /**
     * In case the teams found by the `where` argument doesn't exist, create a new teams with this data.
     */
    create: XOR<teamsCreateInput, teamsUncheckedCreateInput>
    /**
     * In case the teams was found with the provided `where` argument, update it with this data.
     */
    update: XOR<teamsUpdateInput, teamsUncheckedUpdateInput>
  }

  /**
   * teams delete
   */
  export type teamsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * Filter which teams to delete.
     */
    where: teamsWhereUniqueInput
  }

  /**
   * teams deleteMany
   */
  export type teamsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which teams to delete
     */
    where?: teamsWhereInput
    /**
     * Limit how many teams to delete.
     */
    limit?: number
  }

  /**
   * teams.channels
   */
  export type teams$channelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channels
     */
    omit?: channelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channelsInclude<ExtArgs> | null
    where?: channelsWhereInput
    orderBy?: channelsOrderByWithRelationInput | channelsOrderByWithRelationInput[]
    cursor?: channelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChannelsScalarFieldEnum | ChannelsScalarFieldEnum[]
  }

  /**
   * teams.projects
   */
  export type teams$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    where?: projectsWhereInput
    orderBy?: projectsOrderByWithRelationInput | projectsOrderByWithRelationInput[]
    cursor?: projectsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * teams.reports
   */
  export type teams$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reports
     */
    omit?: reportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    where?: reportsWhereInput
    orderBy?: reportsOrderByWithRelationInput | reportsOrderByWithRelationInput[]
    cursor?: reportsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * teams.resources
   */
  export type teams$resourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resources
     */
    select?: resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the resources
     */
    omit?: resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resourcesInclude<ExtArgs> | null
    where?: resourcesWhereInput
    orderBy?: resourcesOrderByWithRelationInput | resourcesOrderByWithRelationInput[]
    cursor?: resourcesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResourcesScalarFieldEnum | ResourcesScalarFieldEnum[]
  }

  /**
   * teams.team_members
   */
  export type teams$team_membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team_members
     */
    select?: team_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the team_members
     */
    omit?: team_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: team_membersInclude<ExtArgs> | null
    where?: team_membersWhereInput
    orderBy?: team_membersOrderByWithRelationInput | team_membersOrderByWithRelationInput[]
    cursor?: team_membersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Team_membersScalarFieldEnum | Team_membersScalarFieldEnum[]
  }

  /**
   * teams without action
   */
  export type teamsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
  }


  /**
   * Model ticket_comments
   */

  export type AggregateTicket_comments = {
    _count: Ticket_commentsCountAggregateOutputType | null
    _avg: Ticket_commentsAvgAggregateOutputType | null
    _sum: Ticket_commentsSumAggregateOutputType | null
    _min: Ticket_commentsMinAggregateOutputType | null
    _max: Ticket_commentsMaxAggregateOutputType | null
  }

  export type Ticket_commentsAvgAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    user_id: number | null
  }

  export type Ticket_commentsSumAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    user_id: number | null
  }

  export type Ticket_commentsMinAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    user_id: number | null
    comment: string | null
    created_at: Date | null
  }

  export type Ticket_commentsMaxAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    user_id: number | null
    comment: string | null
    created_at: Date | null
  }

  export type Ticket_commentsCountAggregateOutputType = {
    id: number
    ticket_id: number
    user_id: number
    comment: number
    created_at: number
    _all: number
  }


  export type Ticket_commentsAvgAggregateInputType = {
    id?: true
    ticket_id?: true
    user_id?: true
  }

  export type Ticket_commentsSumAggregateInputType = {
    id?: true
    ticket_id?: true
    user_id?: true
  }

  export type Ticket_commentsMinAggregateInputType = {
    id?: true
    ticket_id?: true
    user_id?: true
    comment?: true
    created_at?: true
  }

  export type Ticket_commentsMaxAggregateInputType = {
    id?: true
    ticket_id?: true
    user_id?: true
    comment?: true
    created_at?: true
  }

  export type Ticket_commentsCountAggregateInputType = {
    id?: true
    ticket_id?: true
    user_id?: true
    comment?: true
    created_at?: true
    _all?: true
  }

  export type Ticket_commentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticket_comments to aggregate.
     */
    where?: ticket_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_comments to fetch.
     */
    orderBy?: ticket_commentsOrderByWithRelationInput | ticket_commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ticket_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ticket_comments
    **/
    _count?: true | Ticket_commentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ticket_commentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ticket_commentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ticket_commentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ticket_commentsMaxAggregateInputType
  }

  export type GetTicket_commentsAggregateType<T extends Ticket_commentsAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket_comments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket_comments[P]>
      : GetScalarType<T[P], AggregateTicket_comments[P]>
  }




  export type ticket_commentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_commentsWhereInput
    orderBy?: ticket_commentsOrderByWithAggregationInput | ticket_commentsOrderByWithAggregationInput[]
    by: Ticket_commentsScalarFieldEnum[] | Ticket_commentsScalarFieldEnum
    having?: ticket_commentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ticket_commentsCountAggregateInputType | true
    _avg?: Ticket_commentsAvgAggregateInputType
    _sum?: Ticket_commentsSumAggregateInputType
    _min?: Ticket_commentsMinAggregateInputType
    _max?: Ticket_commentsMaxAggregateInputType
  }

  export type Ticket_commentsGroupByOutputType = {
    id: number
    ticket_id: number
    user_id: number
    comment: string
    created_at: Date | null
    _count: Ticket_commentsCountAggregateOutputType | null
    _avg: Ticket_commentsAvgAggregateOutputType | null
    _sum: Ticket_commentsSumAggregateOutputType | null
    _min: Ticket_commentsMinAggregateOutputType | null
    _max: Ticket_commentsMaxAggregateOutputType | null
  }

  type GetTicket_commentsGroupByPayload<T extends ticket_commentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Ticket_commentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ticket_commentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ticket_commentsGroupByOutputType[P]>
            : GetScalarType<T[P], Ticket_commentsGroupByOutputType[P]>
        }
      >
    >


  export type ticket_commentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ticket_id?: boolean
    user_id?: boolean
    comment?: boolean
    created_at?: boolean
    tickets?: boolean | ticketsDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket_comments"]>



  export type ticket_commentsSelectScalar = {
    id?: boolean
    ticket_id?: boolean
    user_id?: boolean
    comment?: boolean
    created_at?: boolean
  }

  export type ticket_commentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ticket_id" | "user_id" | "comment" | "created_at", ExtArgs["result"]["ticket_comments"]>
  export type ticket_commentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | ticketsDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $ticket_commentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ticket_comments"
    objects: {
      tickets: Prisma.$ticketsPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ticket_id: number
      user_id: number
      comment: string
      created_at: Date | null
    }, ExtArgs["result"]["ticket_comments"]>
    composites: {}
  }

  type ticket_commentsGetPayload<S extends boolean | null | undefined | ticket_commentsDefaultArgs> = $Result.GetResult<Prisma.$ticket_commentsPayload, S>

  type ticket_commentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ticket_commentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Ticket_commentsCountAggregateInputType | true
    }

  export interface ticket_commentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ticket_comments'], meta: { name: 'ticket_comments' } }
    /**
     * Find zero or one Ticket_comments that matches the filter.
     * @param {ticket_commentsFindUniqueArgs} args - Arguments to find a Ticket_comments
     * @example
     * // Get one Ticket_comments
     * const ticket_comments = await prisma.ticket_comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ticket_commentsFindUniqueArgs>(args: SelectSubset<T, ticket_commentsFindUniqueArgs<ExtArgs>>): Prisma__ticket_commentsClient<$Result.GetResult<Prisma.$ticket_commentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ticket_comments that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ticket_commentsFindUniqueOrThrowArgs} args - Arguments to find a Ticket_comments
     * @example
     * // Get one Ticket_comments
     * const ticket_comments = await prisma.ticket_comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ticket_commentsFindUniqueOrThrowArgs>(args: SelectSubset<T, ticket_commentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ticket_commentsClient<$Result.GetResult<Prisma.$ticket_commentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket_comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_commentsFindFirstArgs} args - Arguments to find a Ticket_comments
     * @example
     * // Get one Ticket_comments
     * const ticket_comments = await prisma.ticket_comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ticket_commentsFindFirstArgs>(args?: SelectSubset<T, ticket_commentsFindFirstArgs<ExtArgs>>): Prisma__ticket_commentsClient<$Result.GetResult<Prisma.$ticket_commentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket_comments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_commentsFindFirstOrThrowArgs} args - Arguments to find a Ticket_comments
     * @example
     * // Get one Ticket_comments
     * const ticket_comments = await prisma.ticket_comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ticket_commentsFindFirstOrThrowArgs>(args?: SelectSubset<T, ticket_commentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ticket_commentsClient<$Result.GetResult<Prisma.$ticket_commentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ticket_comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_commentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ticket_comments
     * const ticket_comments = await prisma.ticket_comments.findMany()
     * 
     * // Get first 10 Ticket_comments
     * const ticket_comments = await prisma.ticket_comments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticket_commentsWithIdOnly = await prisma.ticket_comments.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ticket_commentsFindManyArgs>(args?: SelectSubset<T, ticket_commentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_commentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ticket_comments.
     * @param {ticket_commentsCreateArgs} args - Arguments to create a Ticket_comments.
     * @example
     * // Create one Ticket_comments
     * const Ticket_comments = await prisma.ticket_comments.create({
     *   data: {
     *     // ... data to create a Ticket_comments
     *   }
     * })
     * 
     */
    create<T extends ticket_commentsCreateArgs>(args: SelectSubset<T, ticket_commentsCreateArgs<ExtArgs>>): Prisma__ticket_commentsClient<$Result.GetResult<Prisma.$ticket_commentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ticket_comments.
     * @param {ticket_commentsCreateManyArgs} args - Arguments to create many Ticket_comments.
     * @example
     * // Create many Ticket_comments
     * const ticket_comments = await prisma.ticket_comments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ticket_commentsCreateManyArgs>(args?: SelectSubset<T, ticket_commentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ticket_comments.
     * @param {ticket_commentsDeleteArgs} args - Arguments to delete one Ticket_comments.
     * @example
     * // Delete one Ticket_comments
     * const Ticket_comments = await prisma.ticket_comments.delete({
     *   where: {
     *     // ... filter to delete one Ticket_comments
     *   }
     * })
     * 
     */
    delete<T extends ticket_commentsDeleteArgs>(args: SelectSubset<T, ticket_commentsDeleteArgs<ExtArgs>>): Prisma__ticket_commentsClient<$Result.GetResult<Prisma.$ticket_commentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ticket_comments.
     * @param {ticket_commentsUpdateArgs} args - Arguments to update one Ticket_comments.
     * @example
     * // Update one Ticket_comments
     * const ticket_comments = await prisma.ticket_comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ticket_commentsUpdateArgs>(args: SelectSubset<T, ticket_commentsUpdateArgs<ExtArgs>>): Prisma__ticket_commentsClient<$Result.GetResult<Prisma.$ticket_commentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ticket_comments.
     * @param {ticket_commentsDeleteManyArgs} args - Arguments to filter Ticket_comments to delete.
     * @example
     * // Delete a few Ticket_comments
     * const { count } = await prisma.ticket_comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ticket_commentsDeleteManyArgs>(args?: SelectSubset<T, ticket_commentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ticket_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_commentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ticket_comments
     * const ticket_comments = await prisma.ticket_comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ticket_commentsUpdateManyArgs>(args: SelectSubset<T, ticket_commentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ticket_comments.
     * @param {ticket_commentsUpsertArgs} args - Arguments to update or create a Ticket_comments.
     * @example
     * // Update or create a Ticket_comments
     * const ticket_comments = await prisma.ticket_comments.upsert({
     *   create: {
     *     // ... data to create a Ticket_comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket_comments we want to update
     *   }
     * })
     */
    upsert<T extends ticket_commentsUpsertArgs>(args: SelectSubset<T, ticket_commentsUpsertArgs<ExtArgs>>): Prisma__ticket_commentsClient<$Result.GetResult<Prisma.$ticket_commentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ticket_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_commentsCountArgs} args - Arguments to filter Ticket_comments to count.
     * @example
     * // Count the number of Ticket_comments
     * const count = await prisma.ticket_comments.count({
     *   where: {
     *     // ... the filter for the Ticket_comments we want to count
     *   }
     * })
    **/
    count<T extends ticket_commentsCountArgs>(
      args?: Subset<T, ticket_commentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ticket_commentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_commentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ticket_commentsAggregateArgs>(args: Subset<T, Ticket_commentsAggregateArgs>): Prisma.PrismaPromise<GetTicket_commentsAggregateType<T>>

    /**
     * Group by Ticket_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_commentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ticket_commentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ticket_commentsGroupByArgs['orderBy'] }
        : { orderBy?: ticket_commentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ticket_commentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicket_commentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ticket_comments model
   */
  readonly fields: ticket_commentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ticket_comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ticket_commentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets<T extends ticketsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ticketsDefaultArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ticket_comments model
   */
  interface ticket_commentsFieldRefs {
    readonly id: FieldRef<"ticket_comments", 'Int'>
    readonly ticket_id: FieldRef<"ticket_comments", 'Int'>
    readonly user_id: FieldRef<"ticket_comments", 'Int'>
    readonly comment: FieldRef<"ticket_comments", 'String'>
    readonly created_at: FieldRef<"ticket_comments", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ticket_comments findUnique
   */
  export type ticket_commentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_comments
     */
    select?: ticket_commentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_comments
     */
    omit?: ticket_commentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_commentsInclude<ExtArgs> | null
    /**
     * Filter, which ticket_comments to fetch.
     */
    where: ticket_commentsWhereUniqueInput
  }

  /**
   * ticket_comments findUniqueOrThrow
   */
  export type ticket_commentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_comments
     */
    select?: ticket_commentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_comments
     */
    omit?: ticket_commentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_commentsInclude<ExtArgs> | null
    /**
     * Filter, which ticket_comments to fetch.
     */
    where: ticket_commentsWhereUniqueInput
  }

  /**
   * ticket_comments findFirst
   */
  export type ticket_commentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_comments
     */
    select?: ticket_commentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_comments
     */
    omit?: ticket_commentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_commentsInclude<ExtArgs> | null
    /**
     * Filter, which ticket_comments to fetch.
     */
    where?: ticket_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_comments to fetch.
     */
    orderBy?: ticket_commentsOrderByWithRelationInput | ticket_commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ticket_comments.
     */
    cursor?: ticket_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ticket_comments.
     */
    distinct?: Ticket_commentsScalarFieldEnum | Ticket_commentsScalarFieldEnum[]
  }

  /**
   * ticket_comments findFirstOrThrow
   */
  export type ticket_commentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_comments
     */
    select?: ticket_commentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_comments
     */
    omit?: ticket_commentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_commentsInclude<ExtArgs> | null
    /**
     * Filter, which ticket_comments to fetch.
     */
    where?: ticket_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_comments to fetch.
     */
    orderBy?: ticket_commentsOrderByWithRelationInput | ticket_commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ticket_comments.
     */
    cursor?: ticket_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ticket_comments.
     */
    distinct?: Ticket_commentsScalarFieldEnum | Ticket_commentsScalarFieldEnum[]
  }

  /**
   * ticket_comments findMany
   */
  export type ticket_commentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_comments
     */
    select?: ticket_commentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_comments
     */
    omit?: ticket_commentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_commentsInclude<ExtArgs> | null
    /**
     * Filter, which ticket_comments to fetch.
     */
    where?: ticket_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_comments to fetch.
     */
    orderBy?: ticket_commentsOrderByWithRelationInput | ticket_commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ticket_comments.
     */
    cursor?: ticket_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_comments.
     */
    skip?: number
    distinct?: Ticket_commentsScalarFieldEnum | Ticket_commentsScalarFieldEnum[]
  }

  /**
   * ticket_comments create
   */
  export type ticket_commentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_comments
     */
    select?: ticket_commentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_comments
     */
    omit?: ticket_commentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_commentsInclude<ExtArgs> | null
    /**
     * The data needed to create a ticket_comments.
     */
    data: XOR<ticket_commentsCreateInput, ticket_commentsUncheckedCreateInput>
  }

  /**
   * ticket_comments createMany
   */
  export type ticket_commentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ticket_comments.
     */
    data: ticket_commentsCreateManyInput | ticket_commentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ticket_comments update
   */
  export type ticket_commentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_comments
     */
    select?: ticket_commentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_comments
     */
    omit?: ticket_commentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_commentsInclude<ExtArgs> | null
    /**
     * The data needed to update a ticket_comments.
     */
    data: XOR<ticket_commentsUpdateInput, ticket_commentsUncheckedUpdateInput>
    /**
     * Choose, which ticket_comments to update.
     */
    where: ticket_commentsWhereUniqueInput
  }

  /**
   * ticket_comments updateMany
   */
  export type ticket_commentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ticket_comments.
     */
    data: XOR<ticket_commentsUpdateManyMutationInput, ticket_commentsUncheckedUpdateManyInput>
    /**
     * Filter which ticket_comments to update
     */
    where?: ticket_commentsWhereInput
    /**
     * Limit how many ticket_comments to update.
     */
    limit?: number
  }

  /**
   * ticket_comments upsert
   */
  export type ticket_commentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_comments
     */
    select?: ticket_commentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_comments
     */
    omit?: ticket_commentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_commentsInclude<ExtArgs> | null
    /**
     * The filter to search for the ticket_comments to update in case it exists.
     */
    where: ticket_commentsWhereUniqueInput
    /**
     * In case the ticket_comments found by the `where` argument doesn't exist, create a new ticket_comments with this data.
     */
    create: XOR<ticket_commentsCreateInput, ticket_commentsUncheckedCreateInput>
    /**
     * In case the ticket_comments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ticket_commentsUpdateInput, ticket_commentsUncheckedUpdateInput>
  }

  /**
   * ticket_comments delete
   */
  export type ticket_commentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_comments
     */
    select?: ticket_commentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_comments
     */
    omit?: ticket_commentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_commentsInclude<ExtArgs> | null
    /**
     * Filter which ticket_comments to delete.
     */
    where: ticket_commentsWhereUniqueInput
  }

  /**
   * ticket_comments deleteMany
   */
  export type ticket_commentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticket_comments to delete
     */
    where?: ticket_commentsWhereInput
    /**
     * Limit how many ticket_comments to delete.
     */
    limit?: number
  }

  /**
   * ticket_comments without action
   */
  export type ticket_commentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_comments
     */
    select?: ticket_commentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_comments
     */
    omit?: ticket_commentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_commentsInclude<ExtArgs> | null
  }


  /**
   * Model ticket_history
   */

  export type AggregateTicket_history = {
    _count: Ticket_historyCountAggregateOutputType | null
    _avg: Ticket_historyAvgAggregateOutputType | null
    _sum: Ticket_historySumAggregateOutputType | null
    _min: Ticket_historyMinAggregateOutputType | null
    _max: Ticket_historyMaxAggregateOutputType | null
  }

  export type Ticket_historyAvgAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    performed_by: number | null
  }

  export type Ticket_historySumAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    performed_by: number | null
  }

  export type Ticket_historyMinAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    action: string | null
    performed_by: number | null
    performed_at: Date | null
    details: string | null
  }

  export type Ticket_historyMaxAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    action: string | null
    performed_by: number | null
    performed_at: Date | null
    details: string | null
  }

  export type Ticket_historyCountAggregateOutputType = {
    id: number
    ticket_id: number
    action: number
    performed_by: number
    performed_at: number
    details: number
    _all: number
  }


  export type Ticket_historyAvgAggregateInputType = {
    id?: true
    ticket_id?: true
    performed_by?: true
  }

  export type Ticket_historySumAggregateInputType = {
    id?: true
    ticket_id?: true
    performed_by?: true
  }

  export type Ticket_historyMinAggregateInputType = {
    id?: true
    ticket_id?: true
    action?: true
    performed_by?: true
    performed_at?: true
    details?: true
  }

  export type Ticket_historyMaxAggregateInputType = {
    id?: true
    ticket_id?: true
    action?: true
    performed_by?: true
    performed_at?: true
    details?: true
  }

  export type Ticket_historyCountAggregateInputType = {
    id?: true
    ticket_id?: true
    action?: true
    performed_by?: true
    performed_at?: true
    details?: true
    _all?: true
  }

  export type Ticket_historyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticket_history to aggregate.
     */
    where?: ticket_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_histories to fetch.
     */
    orderBy?: ticket_historyOrderByWithRelationInput | ticket_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ticket_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ticket_histories
    **/
    _count?: true | Ticket_historyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ticket_historyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ticket_historySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ticket_historyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ticket_historyMaxAggregateInputType
  }

  export type GetTicket_historyAggregateType<T extends Ticket_historyAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket_history]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket_history[P]>
      : GetScalarType<T[P], AggregateTicket_history[P]>
  }




  export type ticket_historyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_historyWhereInput
    orderBy?: ticket_historyOrderByWithAggregationInput | ticket_historyOrderByWithAggregationInput[]
    by: Ticket_historyScalarFieldEnum[] | Ticket_historyScalarFieldEnum
    having?: ticket_historyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ticket_historyCountAggregateInputType | true
    _avg?: Ticket_historyAvgAggregateInputType
    _sum?: Ticket_historySumAggregateInputType
    _min?: Ticket_historyMinAggregateInputType
    _max?: Ticket_historyMaxAggregateInputType
  }

  export type Ticket_historyGroupByOutputType = {
    id: number
    ticket_id: number
    action: string
    performed_by: number | null
    performed_at: Date | null
    details: string | null
    _count: Ticket_historyCountAggregateOutputType | null
    _avg: Ticket_historyAvgAggregateOutputType | null
    _sum: Ticket_historySumAggregateOutputType | null
    _min: Ticket_historyMinAggregateOutputType | null
    _max: Ticket_historyMaxAggregateOutputType | null
  }

  type GetTicket_historyGroupByPayload<T extends ticket_historyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Ticket_historyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ticket_historyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ticket_historyGroupByOutputType[P]>
            : GetScalarType<T[P], Ticket_historyGroupByOutputType[P]>
        }
      >
    >


  export type ticket_historySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ticket_id?: boolean
    action?: boolean
    performed_by?: boolean
    performed_at?: boolean
    details?: boolean
    tickets?: boolean | ticketsDefaultArgs<ExtArgs>
    users?: boolean | ticket_history$usersArgs<ExtArgs>
  }, ExtArgs["result"]["ticket_history"]>



  export type ticket_historySelectScalar = {
    id?: boolean
    ticket_id?: boolean
    action?: boolean
    performed_by?: boolean
    performed_at?: boolean
    details?: boolean
  }

  export type ticket_historyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ticket_id" | "action" | "performed_by" | "performed_at" | "details", ExtArgs["result"]["ticket_history"]>
  export type ticket_historyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | ticketsDefaultArgs<ExtArgs>
    users?: boolean | ticket_history$usersArgs<ExtArgs>
  }

  export type $ticket_historyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ticket_history"
    objects: {
      tickets: Prisma.$ticketsPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ticket_id: number
      action: string
      performed_by: number | null
      performed_at: Date | null
      details: string | null
    }, ExtArgs["result"]["ticket_history"]>
    composites: {}
  }

  type ticket_historyGetPayload<S extends boolean | null | undefined | ticket_historyDefaultArgs> = $Result.GetResult<Prisma.$ticket_historyPayload, S>

  type ticket_historyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ticket_historyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Ticket_historyCountAggregateInputType | true
    }

  export interface ticket_historyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ticket_history'], meta: { name: 'ticket_history' } }
    /**
     * Find zero or one Ticket_history that matches the filter.
     * @param {ticket_historyFindUniqueArgs} args - Arguments to find a Ticket_history
     * @example
     * // Get one Ticket_history
     * const ticket_history = await prisma.ticket_history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ticket_historyFindUniqueArgs>(args: SelectSubset<T, ticket_historyFindUniqueArgs<ExtArgs>>): Prisma__ticket_historyClient<$Result.GetResult<Prisma.$ticket_historyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ticket_history that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ticket_historyFindUniqueOrThrowArgs} args - Arguments to find a Ticket_history
     * @example
     * // Get one Ticket_history
     * const ticket_history = await prisma.ticket_history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ticket_historyFindUniqueOrThrowArgs>(args: SelectSubset<T, ticket_historyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ticket_historyClient<$Result.GetResult<Prisma.$ticket_historyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket_history that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_historyFindFirstArgs} args - Arguments to find a Ticket_history
     * @example
     * // Get one Ticket_history
     * const ticket_history = await prisma.ticket_history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ticket_historyFindFirstArgs>(args?: SelectSubset<T, ticket_historyFindFirstArgs<ExtArgs>>): Prisma__ticket_historyClient<$Result.GetResult<Prisma.$ticket_historyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket_history that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_historyFindFirstOrThrowArgs} args - Arguments to find a Ticket_history
     * @example
     * // Get one Ticket_history
     * const ticket_history = await prisma.ticket_history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ticket_historyFindFirstOrThrowArgs>(args?: SelectSubset<T, ticket_historyFindFirstOrThrowArgs<ExtArgs>>): Prisma__ticket_historyClient<$Result.GetResult<Prisma.$ticket_historyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ticket_histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_historyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ticket_histories
     * const ticket_histories = await prisma.ticket_history.findMany()
     * 
     * // Get first 10 Ticket_histories
     * const ticket_histories = await prisma.ticket_history.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticket_historyWithIdOnly = await prisma.ticket_history.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ticket_historyFindManyArgs>(args?: SelectSubset<T, ticket_historyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_historyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ticket_history.
     * @param {ticket_historyCreateArgs} args - Arguments to create a Ticket_history.
     * @example
     * // Create one Ticket_history
     * const Ticket_history = await prisma.ticket_history.create({
     *   data: {
     *     // ... data to create a Ticket_history
     *   }
     * })
     * 
     */
    create<T extends ticket_historyCreateArgs>(args: SelectSubset<T, ticket_historyCreateArgs<ExtArgs>>): Prisma__ticket_historyClient<$Result.GetResult<Prisma.$ticket_historyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ticket_histories.
     * @param {ticket_historyCreateManyArgs} args - Arguments to create many Ticket_histories.
     * @example
     * // Create many Ticket_histories
     * const ticket_history = await prisma.ticket_history.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ticket_historyCreateManyArgs>(args?: SelectSubset<T, ticket_historyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ticket_history.
     * @param {ticket_historyDeleteArgs} args - Arguments to delete one Ticket_history.
     * @example
     * // Delete one Ticket_history
     * const Ticket_history = await prisma.ticket_history.delete({
     *   where: {
     *     // ... filter to delete one Ticket_history
     *   }
     * })
     * 
     */
    delete<T extends ticket_historyDeleteArgs>(args: SelectSubset<T, ticket_historyDeleteArgs<ExtArgs>>): Prisma__ticket_historyClient<$Result.GetResult<Prisma.$ticket_historyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ticket_history.
     * @param {ticket_historyUpdateArgs} args - Arguments to update one Ticket_history.
     * @example
     * // Update one Ticket_history
     * const ticket_history = await prisma.ticket_history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ticket_historyUpdateArgs>(args: SelectSubset<T, ticket_historyUpdateArgs<ExtArgs>>): Prisma__ticket_historyClient<$Result.GetResult<Prisma.$ticket_historyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ticket_histories.
     * @param {ticket_historyDeleteManyArgs} args - Arguments to filter Ticket_histories to delete.
     * @example
     * // Delete a few Ticket_histories
     * const { count } = await prisma.ticket_history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ticket_historyDeleteManyArgs>(args?: SelectSubset<T, ticket_historyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ticket_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_historyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ticket_histories
     * const ticket_history = await prisma.ticket_history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ticket_historyUpdateManyArgs>(args: SelectSubset<T, ticket_historyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ticket_history.
     * @param {ticket_historyUpsertArgs} args - Arguments to update or create a Ticket_history.
     * @example
     * // Update or create a Ticket_history
     * const ticket_history = await prisma.ticket_history.upsert({
     *   create: {
     *     // ... data to create a Ticket_history
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket_history we want to update
     *   }
     * })
     */
    upsert<T extends ticket_historyUpsertArgs>(args: SelectSubset<T, ticket_historyUpsertArgs<ExtArgs>>): Prisma__ticket_historyClient<$Result.GetResult<Prisma.$ticket_historyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ticket_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_historyCountArgs} args - Arguments to filter Ticket_histories to count.
     * @example
     * // Count the number of Ticket_histories
     * const count = await prisma.ticket_history.count({
     *   where: {
     *     // ... the filter for the Ticket_histories we want to count
     *   }
     * })
    **/
    count<T extends ticket_historyCountArgs>(
      args?: Subset<T, ticket_historyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ticket_historyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_historyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ticket_historyAggregateArgs>(args: Subset<T, Ticket_historyAggregateArgs>): Prisma.PrismaPromise<GetTicket_historyAggregateType<T>>

    /**
     * Group by Ticket_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_historyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ticket_historyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ticket_historyGroupByArgs['orderBy'] }
        : { orderBy?: ticket_historyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ticket_historyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicket_historyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ticket_history model
   */
  readonly fields: ticket_historyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ticket_history.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ticket_historyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets<T extends ticketsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ticketsDefaultArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends ticket_history$usersArgs<ExtArgs> = {}>(args?: Subset<T, ticket_history$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ticket_history model
   */
  interface ticket_historyFieldRefs {
    readonly id: FieldRef<"ticket_history", 'Int'>
    readonly ticket_id: FieldRef<"ticket_history", 'Int'>
    readonly action: FieldRef<"ticket_history", 'String'>
    readonly performed_by: FieldRef<"ticket_history", 'Int'>
    readonly performed_at: FieldRef<"ticket_history", 'DateTime'>
    readonly details: FieldRef<"ticket_history", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ticket_history findUnique
   */
  export type ticket_historyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_history
     */
    select?: ticket_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_history
     */
    omit?: ticket_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_historyInclude<ExtArgs> | null
    /**
     * Filter, which ticket_history to fetch.
     */
    where: ticket_historyWhereUniqueInput
  }

  /**
   * ticket_history findUniqueOrThrow
   */
  export type ticket_historyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_history
     */
    select?: ticket_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_history
     */
    omit?: ticket_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_historyInclude<ExtArgs> | null
    /**
     * Filter, which ticket_history to fetch.
     */
    where: ticket_historyWhereUniqueInput
  }

  /**
   * ticket_history findFirst
   */
  export type ticket_historyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_history
     */
    select?: ticket_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_history
     */
    omit?: ticket_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_historyInclude<ExtArgs> | null
    /**
     * Filter, which ticket_history to fetch.
     */
    where?: ticket_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_histories to fetch.
     */
    orderBy?: ticket_historyOrderByWithRelationInput | ticket_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ticket_histories.
     */
    cursor?: ticket_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ticket_histories.
     */
    distinct?: Ticket_historyScalarFieldEnum | Ticket_historyScalarFieldEnum[]
  }

  /**
   * ticket_history findFirstOrThrow
   */
  export type ticket_historyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_history
     */
    select?: ticket_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_history
     */
    omit?: ticket_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_historyInclude<ExtArgs> | null
    /**
     * Filter, which ticket_history to fetch.
     */
    where?: ticket_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_histories to fetch.
     */
    orderBy?: ticket_historyOrderByWithRelationInput | ticket_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ticket_histories.
     */
    cursor?: ticket_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ticket_histories.
     */
    distinct?: Ticket_historyScalarFieldEnum | Ticket_historyScalarFieldEnum[]
  }

  /**
   * ticket_history findMany
   */
  export type ticket_historyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_history
     */
    select?: ticket_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_history
     */
    omit?: ticket_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_historyInclude<ExtArgs> | null
    /**
     * Filter, which ticket_histories to fetch.
     */
    where?: ticket_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_histories to fetch.
     */
    orderBy?: ticket_historyOrderByWithRelationInput | ticket_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ticket_histories.
     */
    cursor?: ticket_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_histories.
     */
    skip?: number
    distinct?: Ticket_historyScalarFieldEnum | Ticket_historyScalarFieldEnum[]
  }

  /**
   * ticket_history create
   */
  export type ticket_historyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_history
     */
    select?: ticket_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_history
     */
    omit?: ticket_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_historyInclude<ExtArgs> | null
    /**
     * The data needed to create a ticket_history.
     */
    data: XOR<ticket_historyCreateInput, ticket_historyUncheckedCreateInput>
  }

  /**
   * ticket_history createMany
   */
  export type ticket_historyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ticket_histories.
     */
    data: ticket_historyCreateManyInput | ticket_historyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ticket_history update
   */
  export type ticket_historyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_history
     */
    select?: ticket_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_history
     */
    omit?: ticket_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_historyInclude<ExtArgs> | null
    /**
     * The data needed to update a ticket_history.
     */
    data: XOR<ticket_historyUpdateInput, ticket_historyUncheckedUpdateInput>
    /**
     * Choose, which ticket_history to update.
     */
    where: ticket_historyWhereUniqueInput
  }

  /**
   * ticket_history updateMany
   */
  export type ticket_historyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ticket_histories.
     */
    data: XOR<ticket_historyUpdateManyMutationInput, ticket_historyUncheckedUpdateManyInput>
    /**
     * Filter which ticket_histories to update
     */
    where?: ticket_historyWhereInput
    /**
     * Limit how many ticket_histories to update.
     */
    limit?: number
  }

  /**
   * ticket_history upsert
   */
  export type ticket_historyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_history
     */
    select?: ticket_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_history
     */
    omit?: ticket_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_historyInclude<ExtArgs> | null
    /**
     * The filter to search for the ticket_history to update in case it exists.
     */
    where: ticket_historyWhereUniqueInput
    /**
     * In case the ticket_history found by the `where` argument doesn't exist, create a new ticket_history with this data.
     */
    create: XOR<ticket_historyCreateInput, ticket_historyUncheckedCreateInput>
    /**
     * In case the ticket_history was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ticket_historyUpdateInput, ticket_historyUncheckedUpdateInput>
  }

  /**
   * ticket_history delete
   */
  export type ticket_historyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_history
     */
    select?: ticket_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_history
     */
    omit?: ticket_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_historyInclude<ExtArgs> | null
    /**
     * Filter which ticket_history to delete.
     */
    where: ticket_historyWhereUniqueInput
  }

  /**
   * ticket_history deleteMany
   */
  export type ticket_historyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticket_histories to delete
     */
    where?: ticket_historyWhereInput
    /**
     * Limit how many ticket_histories to delete.
     */
    limit?: number
  }

  /**
   * ticket_history.users
   */
  export type ticket_history$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * ticket_history without action
   */
  export type ticket_historyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_history
     */
    select?: ticket_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_history
     */
    omit?: ticket_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_historyInclude<ExtArgs> | null
  }


  /**
   * Model ticket_workflow
   */

  export type AggregateTicket_workflow = {
    _count: Ticket_workflowCountAggregateOutputType | null
    _avg: Ticket_workflowAvgAggregateOutputType | null
    _sum: Ticket_workflowSumAggregateOutputType | null
    _min: Ticket_workflowMinAggregateOutputType | null
    _max: Ticket_workflowMaxAggregateOutputType | null
  }

  export type Ticket_workflowAvgAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    workflow_id: number | null
    current_step: number | null
  }

  export type Ticket_workflowSumAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    workflow_id: number | null
    current_step: number | null
  }

  export type Ticket_workflowMinAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    workflow_id: number | null
    current_step: number | null
  }

  export type Ticket_workflowMaxAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    workflow_id: number | null
    current_step: number | null
  }

  export type Ticket_workflowCountAggregateOutputType = {
    id: number
    ticket_id: number
    workflow_id: number
    current_step: number
    _all: number
  }


  export type Ticket_workflowAvgAggregateInputType = {
    id?: true
    ticket_id?: true
    workflow_id?: true
    current_step?: true
  }

  export type Ticket_workflowSumAggregateInputType = {
    id?: true
    ticket_id?: true
    workflow_id?: true
    current_step?: true
  }

  export type Ticket_workflowMinAggregateInputType = {
    id?: true
    ticket_id?: true
    workflow_id?: true
    current_step?: true
  }

  export type Ticket_workflowMaxAggregateInputType = {
    id?: true
    ticket_id?: true
    workflow_id?: true
    current_step?: true
  }

  export type Ticket_workflowCountAggregateInputType = {
    id?: true
    ticket_id?: true
    workflow_id?: true
    current_step?: true
    _all?: true
  }

  export type Ticket_workflowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticket_workflow to aggregate.
     */
    where?: ticket_workflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_workflows to fetch.
     */
    orderBy?: ticket_workflowOrderByWithRelationInput | ticket_workflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ticket_workflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_workflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ticket_workflows
    **/
    _count?: true | Ticket_workflowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ticket_workflowAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ticket_workflowSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ticket_workflowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ticket_workflowMaxAggregateInputType
  }

  export type GetTicket_workflowAggregateType<T extends Ticket_workflowAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket_workflow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket_workflow[P]>
      : GetScalarType<T[P], AggregateTicket_workflow[P]>
  }




  export type ticket_workflowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_workflowWhereInput
    orderBy?: ticket_workflowOrderByWithAggregationInput | ticket_workflowOrderByWithAggregationInput[]
    by: Ticket_workflowScalarFieldEnum[] | Ticket_workflowScalarFieldEnum
    having?: ticket_workflowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ticket_workflowCountAggregateInputType | true
    _avg?: Ticket_workflowAvgAggregateInputType
    _sum?: Ticket_workflowSumAggregateInputType
    _min?: Ticket_workflowMinAggregateInputType
    _max?: Ticket_workflowMaxAggregateInputType
  }

  export type Ticket_workflowGroupByOutputType = {
    id: number
    ticket_id: number
    workflow_id: number
    current_step: number | null
    _count: Ticket_workflowCountAggregateOutputType | null
    _avg: Ticket_workflowAvgAggregateOutputType | null
    _sum: Ticket_workflowSumAggregateOutputType | null
    _min: Ticket_workflowMinAggregateOutputType | null
    _max: Ticket_workflowMaxAggregateOutputType | null
  }

  type GetTicket_workflowGroupByPayload<T extends ticket_workflowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Ticket_workflowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ticket_workflowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ticket_workflowGroupByOutputType[P]>
            : GetScalarType<T[P], Ticket_workflowGroupByOutputType[P]>
        }
      >
    >


  export type ticket_workflowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ticket_id?: boolean
    workflow_id?: boolean
    current_step?: boolean
    tickets?: boolean | ticketsDefaultArgs<ExtArgs>
    workflows?: boolean | workflowsDefaultArgs<ExtArgs>
    workflow_steps?: boolean | ticket_workflow$workflow_stepsArgs<ExtArgs>
  }, ExtArgs["result"]["ticket_workflow"]>



  export type ticket_workflowSelectScalar = {
    id?: boolean
    ticket_id?: boolean
    workflow_id?: boolean
    current_step?: boolean
  }

  export type ticket_workflowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ticket_id" | "workflow_id" | "current_step", ExtArgs["result"]["ticket_workflow"]>
  export type ticket_workflowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | ticketsDefaultArgs<ExtArgs>
    workflows?: boolean | workflowsDefaultArgs<ExtArgs>
    workflow_steps?: boolean | ticket_workflow$workflow_stepsArgs<ExtArgs>
  }

  export type $ticket_workflowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ticket_workflow"
    objects: {
      tickets: Prisma.$ticketsPayload<ExtArgs>
      workflows: Prisma.$workflowsPayload<ExtArgs>
      workflow_steps: Prisma.$workflow_stepsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ticket_id: number
      workflow_id: number
      current_step: number | null
    }, ExtArgs["result"]["ticket_workflow"]>
    composites: {}
  }

  type ticket_workflowGetPayload<S extends boolean | null | undefined | ticket_workflowDefaultArgs> = $Result.GetResult<Prisma.$ticket_workflowPayload, S>

  type ticket_workflowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ticket_workflowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Ticket_workflowCountAggregateInputType | true
    }

  export interface ticket_workflowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ticket_workflow'], meta: { name: 'ticket_workflow' } }
    /**
     * Find zero or one Ticket_workflow that matches the filter.
     * @param {ticket_workflowFindUniqueArgs} args - Arguments to find a Ticket_workflow
     * @example
     * // Get one Ticket_workflow
     * const ticket_workflow = await prisma.ticket_workflow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ticket_workflowFindUniqueArgs>(args: SelectSubset<T, ticket_workflowFindUniqueArgs<ExtArgs>>): Prisma__ticket_workflowClient<$Result.GetResult<Prisma.$ticket_workflowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ticket_workflow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ticket_workflowFindUniqueOrThrowArgs} args - Arguments to find a Ticket_workflow
     * @example
     * // Get one Ticket_workflow
     * const ticket_workflow = await prisma.ticket_workflow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ticket_workflowFindUniqueOrThrowArgs>(args: SelectSubset<T, ticket_workflowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ticket_workflowClient<$Result.GetResult<Prisma.$ticket_workflowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket_workflow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_workflowFindFirstArgs} args - Arguments to find a Ticket_workflow
     * @example
     * // Get one Ticket_workflow
     * const ticket_workflow = await prisma.ticket_workflow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ticket_workflowFindFirstArgs>(args?: SelectSubset<T, ticket_workflowFindFirstArgs<ExtArgs>>): Prisma__ticket_workflowClient<$Result.GetResult<Prisma.$ticket_workflowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket_workflow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_workflowFindFirstOrThrowArgs} args - Arguments to find a Ticket_workflow
     * @example
     * // Get one Ticket_workflow
     * const ticket_workflow = await prisma.ticket_workflow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ticket_workflowFindFirstOrThrowArgs>(args?: SelectSubset<T, ticket_workflowFindFirstOrThrowArgs<ExtArgs>>): Prisma__ticket_workflowClient<$Result.GetResult<Prisma.$ticket_workflowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ticket_workflows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_workflowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ticket_workflows
     * const ticket_workflows = await prisma.ticket_workflow.findMany()
     * 
     * // Get first 10 Ticket_workflows
     * const ticket_workflows = await prisma.ticket_workflow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticket_workflowWithIdOnly = await prisma.ticket_workflow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ticket_workflowFindManyArgs>(args?: SelectSubset<T, ticket_workflowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_workflowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ticket_workflow.
     * @param {ticket_workflowCreateArgs} args - Arguments to create a Ticket_workflow.
     * @example
     * // Create one Ticket_workflow
     * const Ticket_workflow = await prisma.ticket_workflow.create({
     *   data: {
     *     // ... data to create a Ticket_workflow
     *   }
     * })
     * 
     */
    create<T extends ticket_workflowCreateArgs>(args: SelectSubset<T, ticket_workflowCreateArgs<ExtArgs>>): Prisma__ticket_workflowClient<$Result.GetResult<Prisma.$ticket_workflowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ticket_workflows.
     * @param {ticket_workflowCreateManyArgs} args - Arguments to create many Ticket_workflows.
     * @example
     * // Create many Ticket_workflows
     * const ticket_workflow = await prisma.ticket_workflow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ticket_workflowCreateManyArgs>(args?: SelectSubset<T, ticket_workflowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ticket_workflow.
     * @param {ticket_workflowDeleteArgs} args - Arguments to delete one Ticket_workflow.
     * @example
     * // Delete one Ticket_workflow
     * const Ticket_workflow = await prisma.ticket_workflow.delete({
     *   where: {
     *     // ... filter to delete one Ticket_workflow
     *   }
     * })
     * 
     */
    delete<T extends ticket_workflowDeleteArgs>(args: SelectSubset<T, ticket_workflowDeleteArgs<ExtArgs>>): Prisma__ticket_workflowClient<$Result.GetResult<Prisma.$ticket_workflowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ticket_workflow.
     * @param {ticket_workflowUpdateArgs} args - Arguments to update one Ticket_workflow.
     * @example
     * // Update one Ticket_workflow
     * const ticket_workflow = await prisma.ticket_workflow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ticket_workflowUpdateArgs>(args: SelectSubset<T, ticket_workflowUpdateArgs<ExtArgs>>): Prisma__ticket_workflowClient<$Result.GetResult<Prisma.$ticket_workflowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ticket_workflows.
     * @param {ticket_workflowDeleteManyArgs} args - Arguments to filter Ticket_workflows to delete.
     * @example
     * // Delete a few Ticket_workflows
     * const { count } = await prisma.ticket_workflow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ticket_workflowDeleteManyArgs>(args?: SelectSubset<T, ticket_workflowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ticket_workflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_workflowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ticket_workflows
     * const ticket_workflow = await prisma.ticket_workflow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ticket_workflowUpdateManyArgs>(args: SelectSubset<T, ticket_workflowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ticket_workflow.
     * @param {ticket_workflowUpsertArgs} args - Arguments to update or create a Ticket_workflow.
     * @example
     * // Update or create a Ticket_workflow
     * const ticket_workflow = await prisma.ticket_workflow.upsert({
     *   create: {
     *     // ... data to create a Ticket_workflow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket_workflow we want to update
     *   }
     * })
     */
    upsert<T extends ticket_workflowUpsertArgs>(args: SelectSubset<T, ticket_workflowUpsertArgs<ExtArgs>>): Prisma__ticket_workflowClient<$Result.GetResult<Prisma.$ticket_workflowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ticket_workflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_workflowCountArgs} args - Arguments to filter Ticket_workflows to count.
     * @example
     * // Count the number of Ticket_workflows
     * const count = await prisma.ticket_workflow.count({
     *   where: {
     *     // ... the filter for the Ticket_workflows we want to count
     *   }
     * })
    **/
    count<T extends ticket_workflowCountArgs>(
      args?: Subset<T, ticket_workflowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ticket_workflowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket_workflow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_workflowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ticket_workflowAggregateArgs>(args: Subset<T, Ticket_workflowAggregateArgs>): Prisma.PrismaPromise<GetTicket_workflowAggregateType<T>>

    /**
     * Group by Ticket_workflow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_workflowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ticket_workflowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ticket_workflowGroupByArgs['orderBy'] }
        : { orderBy?: ticket_workflowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ticket_workflowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicket_workflowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ticket_workflow model
   */
  readonly fields: ticket_workflowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ticket_workflow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ticket_workflowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets<T extends ticketsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ticketsDefaultArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    workflows<T extends workflowsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, workflowsDefaultArgs<ExtArgs>>): Prisma__workflowsClient<$Result.GetResult<Prisma.$workflowsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    workflow_steps<T extends ticket_workflow$workflow_stepsArgs<ExtArgs> = {}>(args?: Subset<T, ticket_workflow$workflow_stepsArgs<ExtArgs>>): Prisma__workflow_stepsClient<$Result.GetResult<Prisma.$workflow_stepsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ticket_workflow model
   */
  interface ticket_workflowFieldRefs {
    readonly id: FieldRef<"ticket_workflow", 'Int'>
    readonly ticket_id: FieldRef<"ticket_workflow", 'Int'>
    readonly workflow_id: FieldRef<"ticket_workflow", 'Int'>
    readonly current_step: FieldRef<"ticket_workflow", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ticket_workflow findUnique
   */
  export type ticket_workflowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_workflow
     */
    select?: ticket_workflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_workflow
     */
    omit?: ticket_workflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_workflowInclude<ExtArgs> | null
    /**
     * Filter, which ticket_workflow to fetch.
     */
    where: ticket_workflowWhereUniqueInput
  }

  /**
   * ticket_workflow findUniqueOrThrow
   */
  export type ticket_workflowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_workflow
     */
    select?: ticket_workflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_workflow
     */
    omit?: ticket_workflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_workflowInclude<ExtArgs> | null
    /**
     * Filter, which ticket_workflow to fetch.
     */
    where: ticket_workflowWhereUniqueInput
  }

  /**
   * ticket_workflow findFirst
   */
  export type ticket_workflowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_workflow
     */
    select?: ticket_workflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_workflow
     */
    omit?: ticket_workflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_workflowInclude<ExtArgs> | null
    /**
     * Filter, which ticket_workflow to fetch.
     */
    where?: ticket_workflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_workflows to fetch.
     */
    orderBy?: ticket_workflowOrderByWithRelationInput | ticket_workflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ticket_workflows.
     */
    cursor?: ticket_workflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_workflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ticket_workflows.
     */
    distinct?: Ticket_workflowScalarFieldEnum | Ticket_workflowScalarFieldEnum[]
  }

  /**
   * ticket_workflow findFirstOrThrow
   */
  export type ticket_workflowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_workflow
     */
    select?: ticket_workflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_workflow
     */
    omit?: ticket_workflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_workflowInclude<ExtArgs> | null
    /**
     * Filter, which ticket_workflow to fetch.
     */
    where?: ticket_workflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_workflows to fetch.
     */
    orderBy?: ticket_workflowOrderByWithRelationInput | ticket_workflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ticket_workflows.
     */
    cursor?: ticket_workflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_workflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ticket_workflows.
     */
    distinct?: Ticket_workflowScalarFieldEnum | Ticket_workflowScalarFieldEnum[]
  }

  /**
   * ticket_workflow findMany
   */
  export type ticket_workflowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_workflow
     */
    select?: ticket_workflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_workflow
     */
    omit?: ticket_workflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_workflowInclude<ExtArgs> | null
    /**
     * Filter, which ticket_workflows to fetch.
     */
    where?: ticket_workflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_workflows to fetch.
     */
    orderBy?: ticket_workflowOrderByWithRelationInput | ticket_workflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ticket_workflows.
     */
    cursor?: ticket_workflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_workflows.
     */
    skip?: number
    distinct?: Ticket_workflowScalarFieldEnum | Ticket_workflowScalarFieldEnum[]
  }

  /**
   * ticket_workflow create
   */
  export type ticket_workflowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_workflow
     */
    select?: ticket_workflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_workflow
     */
    omit?: ticket_workflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_workflowInclude<ExtArgs> | null
    /**
     * The data needed to create a ticket_workflow.
     */
    data: XOR<ticket_workflowCreateInput, ticket_workflowUncheckedCreateInput>
  }

  /**
   * ticket_workflow createMany
   */
  export type ticket_workflowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ticket_workflows.
     */
    data: ticket_workflowCreateManyInput | ticket_workflowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ticket_workflow update
   */
  export type ticket_workflowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_workflow
     */
    select?: ticket_workflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_workflow
     */
    omit?: ticket_workflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_workflowInclude<ExtArgs> | null
    /**
     * The data needed to update a ticket_workflow.
     */
    data: XOR<ticket_workflowUpdateInput, ticket_workflowUncheckedUpdateInput>
    /**
     * Choose, which ticket_workflow to update.
     */
    where: ticket_workflowWhereUniqueInput
  }

  /**
   * ticket_workflow updateMany
   */
  export type ticket_workflowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ticket_workflows.
     */
    data: XOR<ticket_workflowUpdateManyMutationInput, ticket_workflowUncheckedUpdateManyInput>
    /**
     * Filter which ticket_workflows to update
     */
    where?: ticket_workflowWhereInput
    /**
     * Limit how many ticket_workflows to update.
     */
    limit?: number
  }

  /**
   * ticket_workflow upsert
   */
  export type ticket_workflowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_workflow
     */
    select?: ticket_workflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_workflow
     */
    omit?: ticket_workflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_workflowInclude<ExtArgs> | null
    /**
     * The filter to search for the ticket_workflow to update in case it exists.
     */
    where: ticket_workflowWhereUniqueInput
    /**
     * In case the ticket_workflow found by the `where` argument doesn't exist, create a new ticket_workflow with this data.
     */
    create: XOR<ticket_workflowCreateInput, ticket_workflowUncheckedCreateInput>
    /**
     * In case the ticket_workflow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ticket_workflowUpdateInput, ticket_workflowUncheckedUpdateInput>
  }

  /**
   * ticket_workflow delete
   */
  export type ticket_workflowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_workflow
     */
    select?: ticket_workflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_workflow
     */
    omit?: ticket_workflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_workflowInclude<ExtArgs> | null
    /**
     * Filter which ticket_workflow to delete.
     */
    where: ticket_workflowWhereUniqueInput
  }

  /**
   * ticket_workflow deleteMany
   */
  export type ticket_workflowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticket_workflows to delete
     */
    where?: ticket_workflowWhereInput
    /**
     * Limit how many ticket_workflows to delete.
     */
    limit?: number
  }

  /**
   * ticket_workflow.workflow_steps
   */
  export type ticket_workflow$workflow_stepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflow_steps
     */
    select?: workflow_stepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflow_steps
     */
    omit?: workflow_stepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflow_stepsInclude<ExtArgs> | null
    where?: workflow_stepsWhereInput
  }

  /**
   * ticket_workflow without action
   */
  export type ticket_workflowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_workflow
     */
    select?: ticket_workflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_workflow
     */
    omit?: ticket_workflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_workflowInclude<ExtArgs> | null
  }


  /**
   * Model tickets
   */

  export type AggregateTickets = {
    _count: TicketsCountAggregateOutputType | null
    _avg: TicketsAvgAggregateOutputType | null
    _sum: TicketsSumAggregateOutputType | null
    _min: TicketsMinAggregateOutputType | null
    _max: TicketsMaxAggregateOutputType | null
  }

  export type TicketsAvgAggregateOutputType = {
    id: number | null
    project_id: number | null
    created_by: number | null
    assigned_to: number | null
    sla_hours: number | null
  }

  export type TicketsSumAggregateOutputType = {
    id: number | null
    project_id: number | null
    created_by: number | null
    assigned_to: number | null
    sla_hours: number | null
  }

  export type TicketsMinAggregateOutputType = {
    id: number | null
    project_id: number | null
    created_by: number | null
    assigned_to: number | null
    type: $Enums.tickets_type | null
    title: string | null
    description: string | null
    status: $Enums.tickets_status | null
    priority: $Enums.tickets_priority | null
    sla_hours: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TicketsMaxAggregateOutputType = {
    id: number | null
    project_id: number | null
    created_by: number | null
    assigned_to: number | null
    type: $Enums.tickets_type | null
    title: string | null
    description: string | null
    status: $Enums.tickets_status | null
    priority: $Enums.tickets_priority | null
    sla_hours: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TicketsCountAggregateOutputType = {
    id: number
    project_id: number
    created_by: number
    assigned_to: number
    type: number
    title: number
    description: number
    status: number
    priority: number
    sla_hours: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TicketsAvgAggregateInputType = {
    id?: true
    project_id?: true
    created_by?: true
    assigned_to?: true
    sla_hours?: true
  }

  export type TicketsSumAggregateInputType = {
    id?: true
    project_id?: true
    created_by?: true
    assigned_to?: true
    sla_hours?: true
  }

  export type TicketsMinAggregateInputType = {
    id?: true
    project_id?: true
    created_by?: true
    assigned_to?: true
    type?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    sla_hours?: true
    created_at?: true
    updated_at?: true
  }

  export type TicketsMaxAggregateInputType = {
    id?: true
    project_id?: true
    created_by?: true
    assigned_to?: true
    type?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    sla_hours?: true
    created_at?: true
    updated_at?: true
  }

  export type TicketsCountAggregateInputType = {
    id?: true
    project_id?: true
    created_by?: true
    assigned_to?: true
    type?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    sla_hours?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TicketsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tickets to aggregate.
     */
    where?: ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tickets
    **/
    _count?: true | TicketsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketsMaxAggregateInputType
  }

  export type GetTicketsAggregateType<T extends TicketsAggregateArgs> = {
        [P in keyof T & keyof AggregateTickets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTickets[P]>
      : GetScalarType<T[P], AggregateTickets[P]>
  }




  export type ticketsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketsWhereInput
    orderBy?: ticketsOrderByWithAggregationInput | ticketsOrderByWithAggregationInput[]
    by: TicketsScalarFieldEnum[] | TicketsScalarFieldEnum
    having?: ticketsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketsCountAggregateInputType | true
    _avg?: TicketsAvgAggregateInputType
    _sum?: TicketsSumAggregateInputType
    _min?: TicketsMinAggregateInputType
    _max?: TicketsMaxAggregateInputType
  }

  export type TicketsGroupByOutputType = {
    id: number
    project_id: number | null
    created_by: number | null
    assigned_to: number | null
    type: $Enums.tickets_type | null
    title: string
    description: string | null
    status: $Enums.tickets_status | null
    priority: $Enums.tickets_priority | null
    sla_hours: number | null
    created_at: Date | null
    updated_at: Date | null
    _count: TicketsCountAggregateOutputType | null
    _avg: TicketsAvgAggregateOutputType | null
    _sum: TicketsSumAggregateOutputType | null
    _min: TicketsMinAggregateOutputType | null
    _max: TicketsMaxAggregateOutputType | null
  }

  type GetTicketsGroupByPayload<T extends ticketsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketsGroupByOutputType[P]>
            : GetScalarType<T[P], TicketsGroupByOutputType[P]>
        }
      >
    >


  export type ticketsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    project_id?: boolean
    created_by?: boolean
    assigned_to?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    sla_hours?: boolean
    created_at?: boolean
    updated_at?: boolean
    ticket_comments?: boolean | tickets$ticket_commentsArgs<ExtArgs>
    ticket_history?: boolean | tickets$ticket_historyArgs<ExtArgs>
    ticket_workflow?: boolean | tickets$ticket_workflowArgs<ExtArgs>
    projects?: boolean | tickets$projectsArgs<ExtArgs>
    users_tickets_created_byTousers?: boolean | tickets$users_tickets_created_byTousersArgs<ExtArgs>
    users_tickets_assigned_toTousers?: boolean | tickets$users_tickets_assigned_toTousersArgs<ExtArgs>
    _count?: boolean | TicketsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tickets"]>



  export type ticketsSelectScalar = {
    id?: boolean
    project_id?: boolean
    created_by?: boolean
    assigned_to?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    sla_hours?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ticketsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "project_id" | "created_by" | "assigned_to" | "type" | "title" | "description" | "status" | "priority" | "sla_hours" | "created_at" | "updated_at", ExtArgs["result"]["tickets"]>
  export type ticketsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket_comments?: boolean | tickets$ticket_commentsArgs<ExtArgs>
    ticket_history?: boolean | tickets$ticket_historyArgs<ExtArgs>
    ticket_workflow?: boolean | tickets$ticket_workflowArgs<ExtArgs>
    projects?: boolean | tickets$projectsArgs<ExtArgs>
    users_tickets_created_byTousers?: boolean | tickets$users_tickets_created_byTousersArgs<ExtArgs>
    users_tickets_assigned_toTousers?: boolean | tickets$users_tickets_assigned_toTousersArgs<ExtArgs>
    _count?: boolean | TicketsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ticketsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tickets"
    objects: {
      ticket_comments: Prisma.$ticket_commentsPayload<ExtArgs>[]
      ticket_history: Prisma.$ticket_historyPayload<ExtArgs>[]
      ticket_workflow: Prisma.$ticket_workflowPayload<ExtArgs>[]
      projects: Prisma.$projectsPayload<ExtArgs> | null
      users_tickets_created_byTousers: Prisma.$usersPayload<ExtArgs> | null
      users_tickets_assigned_toTousers: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      project_id: number | null
      created_by: number | null
      assigned_to: number | null
      type: $Enums.tickets_type | null
      title: string
      description: string | null
      status: $Enums.tickets_status | null
      priority: $Enums.tickets_priority | null
      sla_hours: number | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["tickets"]>
    composites: {}
  }

  type ticketsGetPayload<S extends boolean | null | undefined | ticketsDefaultArgs> = $Result.GetResult<Prisma.$ticketsPayload, S>

  type ticketsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ticketsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TicketsCountAggregateInputType | true
    }

  export interface ticketsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tickets'], meta: { name: 'tickets' } }
    /**
     * Find zero or one Tickets that matches the filter.
     * @param {ticketsFindUniqueArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ticketsFindUniqueArgs>(args: SelectSubset<T, ticketsFindUniqueArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tickets that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ticketsFindUniqueOrThrowArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ticketsFindUniqueOrThrowArgs>(args: SelectSubset<T, ticketsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsFindFirstArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ticketsFindFirstArgs>(args?: SelectSubset<T, ticketsFindFirstArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tickets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsFindFirstOrThrowArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ticketsFindFirstOrThrowArgs>(args?: SelectSubset<T, ticketsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.tickets.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.tickets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketsWithIdOnly = await prisma.tickets.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ticketsFindManyArgs>(args?: SelectSubset<T, ticketsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tickets.
     * @param {ticketsCreateArgs} args - Arguments to create a Tickets.
     * @example
     * // Create one Tickets
     * const Tickets = await prisma.tickets.create({
     *   data: {
     *     // ... data to create a Tickets
     *   }
     * })
     * 
     */
    create<T extends ticketsCreateArgs>(args: SelectSubset<T, ticketsCreateArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tickets.
     * @param {ticketsCreateManyArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const tickets = await prisma.tickets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ticketsCreateManyArgs>(args?: SelectSubset<T, ticketsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tickets.
     * @param {ticketsDeleteArgs} args - Arguments to delete one Tickets.
     * @example
     * // Delete one Tickets
     * const Tickets = await prisma.tickets.delete({
     *   where: {
     *     // ... filter to delete one Tickets
     *   }
     * })
     * 
     */
    delete<T extends ticketsDeleteArgs>(args: SelectSubset<T, ticketsDeleteArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tickets.
     * @param {ticketsUpdateArgs} args - Arguments to update one Tickets.
     * @example
     * // Update one Tickets
     * const tickets = await prisma.tickets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ticketsUpdateArgs>(args: SelectSubset<T, ticketsUpdateArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tickets.
     * @param {ticketsDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.tickets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ticketsDeleteManyArgs>(args?: SelectSubset<T, ticketsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const tickets = await prisma.tickets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ticketsUpdateManyArgs>(args: SelectSubset<T, ticketsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tickets.
     * @param {ticketsUpsertArgs} args - Arguments to update or create a Tickets.
     * @example
     * // Update or create a Tickets
     * const tickets = await prisma.tickets.upsert({
     *   create: {
     *     // ... data to create a Tickets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tickets we want to update
     *   }
     * })
     */
    upsert<T extends ticketsUpsertArgs>(args: SelectSubset<T, ticketsUpsertArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.tickets.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends ticketsCountArgs>(
      args?: Subset<T, ticketsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketsAggregateArgs>(args: Subset<T, TicketsAggregateArgs>): Prisma.PrismaPromise<GetTicketsAggregateType<T>>

    /**
     * Group by Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ticketsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ticketsGroupByArgs['orderBy'] }
        : { orderBy?: ticketsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ticketsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tickets model
   */
  readonly fields: ticketsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tickets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ticketsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticket_comments<T extends tickets$ticket_commentsArgs<ExtArgs> = {}>(args?: Subset<T, tickets$ticket_commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_commentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ticket_history<T extends tickets$ticket_historyArgs<ExtArgs> = {}>(args?: Subset<T, tickets$ticket_historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_historyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ticket_workflow<T extends tickets$ticket_workflowArgs<ExtArgs> = {}>(args?: Subset<T, tickets$ticket_workflowArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_workflowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projects<T extends tickets$projectsArgs<ExtArgs> = {}>(args?: Subset<T, tickets$projectsArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    users_tickets_created_byTousers<T extends tickets$users_tickets_created_byTousersArgs<ExtArgs> = {}>(args?: Subset<T, tickets$users_tickets_created_byTousersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    users_tickets_assigned_toTousers<T extends tickets$users_tickets_assigned_toTousersArgs<ExtArgs> = {}>(args?: Subset<T, tickets$users_tickets_assigned_toTousersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tickets model
   */
  interface ticketsFieldRefs {
    readonly id: FieldRef<"tickets", 'Int'>
    readonly project_id: FieldRef<"tickets", 'Int'>
    readonly created_by: FieldRef<"tickets", 'Int'>
    readonly assigned_to: FieldRef<"tickets", 'Int'>
    readonly type: FieldRef<"tickets", 'tickets_type'>
    readonly title: FieldRef<"tickets", 'String'>
    readonly description: FieldRef<"tickets", 'String'>
    readonly status: FieldRef<"tickets", 'tickets_status'>
    readonly priority: FieldRef<"tickets", 'tickets_priority'>
    readonly sla_hours: FieldRef<"tickets", 'Int'>
    readonly created_at: FieldRef<"tickets", 'DateTime'>
    readonly updated_at: FieldRef<"tickets", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * tickets findUnique
   */
  export type ticketsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where: ticketsWhereUniqueInput
  }

  /**
   * tickets findUniqueOrThrow
   */
  export type ticketsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where: ticketsWhereUniqueInput
  }

  /**
   * tickets findFirst
   */
  export type ticketsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where?: ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tickets.
     */
    cursor?: ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tickets.
     */
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * tickets findFirstOrThrow
   */
  export type ticketsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where?: ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tickets.
     */
    cursor?: ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tickets.
     */
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * tickets findMany
   */
  export type ticketsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where?: ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tickets.
     */
    cursor?: ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * tickets create
   */
  export type ticketsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * The data needed to create a tickets.
     */
    data: XOR<ticketsCreateInput, ticketsUncheckedCreateInput>
  }

  /**
   * tickets createMany
   */
  export type ticketsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tickets.
     */
    data: ticketsCreateManyInput | ticketsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tickets update
   */
  export type ticketsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * The data needed to update a tickets.
     */
    data: XOR<ticketsUpdateInput, ticketsUncheckedUpdateInput>
    /**
     * Choose, which tickets to update.
     */
    where: ticketsWhereUniqueInput
  }

  /**
   * tickets updateMany
   */
  export type ticketsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tickets.
     */
    data: XOR<ticketsUpdateManyMutationInput, ticketsUncheckedUpdateManyInput>
    /**
     * Filter which tickets to update
     */
    where?: ticketsWhereInput
    /**
     * Limit how many tickets to update.
     */
    limit?: number
  }

  /**
   * tickets upsert
   */
  export type ticketsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * The filter to search for the tickets to update in case it exists.
     */
    where: ticketsWhereUniqueInput
    /**
     * In case the tickets found by the `where` argument doesn't exist, create a new tickets with this data.
     */
    create: XOR<ticketsCreateInput, ticketsUncheckedCreateInput>
    /**
     * In case the tickets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ticketsUpdateInput, ticketsUncheckedUpdateInput>
  }

  /**
   * tickets delete
   */
  export type ticketsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter which tickets to delete.
     */
    where: ticketsWhereUniqueInput
  }

  /**
   * tickets deleteMany
   */
  export type ticketsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tickets to delete
     */
    where?: ticketsWhereInput
    /**
     * Limit how many tickets to delete.
     */
    limit?: number
  }

  /**
   * tickets.ticket_comments
   */
  export type tickets$ticket_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_comments
     */
    select?: ticket_commentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_comments
     */
    omit?: ticket_commentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_commentsInclude<ExtArgs> | null
    where?: ticket_commentsWhereInput
    orderBy?: ticket_commentsOrderByWithRelationInput | ticket_commentsOrderByWithRelationInput[]
    cursor?: ticket_commentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ticket_commentsScalarFieldEnum | Ticket_commentsScalarFieldEnum[]
  }

  /**
   * tickets.ticket_history
   */
  export type tickets$ticket_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_history
     */
    select?: ticket_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_history
     */
    omit?: ticket_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_historyInclude<ExtArgs> | null
    where?: ticket_historyWhereInput
    orderBy?: ticket_historyOrderByWithRelationInput | ticket_historyOrderByWithRelationInput[]
    cursor?: ticket_historyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ticket_historyScalarFieldEnum | Ticket_historyScalarFieldEnum[]
  }

  /**
   * tickets.ticket_workflow
   */
  export type tickets$ticket_workflowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_workflow
     */
    select?: ticket_workflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_workflow
     */
    omit?: ticket_workflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_workflowInclude<ExtArgs> | null
    where?: ticket_workflowWhereInput
    orderBy?: ticket_workflowOrderByWithRelationInput | ticket_workflowOrderByWithRelationInput[]
    cursor?: ticket_workflowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ticket_workflowScalarFieldEnum | Ticket_workflowScalarFieldEnum[]
  }

  /**
   * tickets.projects
   */
  export type tickets$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projects
     */
    omit?: projectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    where?: projectsWhereInput
  }

  /**
   * tickets.users_tickets_created_byTousers
   */
  export type tickets$users_tickets_created_byTousersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * tickets.users_tickets_assigned_toTousers
   */
  export type tickets$users_tickets_assigned_toTousersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * tickets without action
   */
  export type ticketsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password_hash: string | null
    avatar: string | null
    role: $Enums.users_role | null
    created_at: Date | null
    last_name: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password_hash: string | null
    avatar: string | null
    role: $Enums.users_role | null
    created_at: Date | null
    last_name: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password_hash: number
    avatar: number
    role: number
    created_at: number
    last_name: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password_hash?: true
    avatar?: true
    role?: true
    created_at?: true
    last_name?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password_hash?: true
    avatar?: true
    role?: true
    created_at?: true
    last_name?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password_hash?: true
    avatar?: true
    role?: true
    created_at?: true
    last_name?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    name: string
    email: string
    password_hash: string
    avatar: string | null
    role: $Enums.users_role | null
    created_at: Date | null
    last_name: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password_hash?: boolean
    avatar?: boolean
    role?: boolean
    created_at?: boolean
    last_name?: boolean
    assets?: boolean | users$assetsArgs<ExtArgs>
    channel_members?: boolean | users$channel_membersArgs<ExtArgs>
    documents?: boolean | users$documentsArgs<ExtArgs>
    hr_records?: boolean | users$hr_recordsArgs<ExtArgs>
    messages?: boolean | users$messagesArgs<ExtArgs>
    permissions?: boolean | users$permissionsArgs<ExtArgs>
    reports?: boolean | users$reportsArgs<ExtArgs>
    resources?: boolean | users$resourcesArgs<ExtArgs>
    task_assignees?: boolean | users$task_assigneesArgs<ExtArgs>
    tasks?: boolean | users$tasksArgs<ExtArgs>
    team_members?: boolean | users$team_membersArgs<ExtArgs>
    ticket_comments?: boolean | users$ticket_commentsArgs<ExtArgs>
    ticket_history?: boolean | users$ticket_historyArgs<ExtArgs>
    tickets_tickets_created_byTousers?: boolean | users$tickets_tickets_created_byTousersArgs<ExtArgs>
    tickets_tickets_assigned_toTousers?: boolean | users$tickets_tickets_assigned_toTousersArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>



  export type usersSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password_hash?: boolean
    avatar?: boolean
    role?: boolean
    created_at?: boolean
    last_name?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password_hash" | "avatar" | "role" | "created_at" | "last_name", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assets?: boolean | users$assetsArgs<ExtArgs>
    channel_members?: boolean | users$channel_membersArgs<ExtArgs>
    documents?: boolean | users$documentsArgs<ExtArgs>
    hr_records?: boolean | users$hr_recordsArgs<ExtArgs>
    messages?: boolean | users$messagesArgs<ExtArgs>
    permissions?: boolean | users$permissionsArgs<ExtArgs>
    reports?: boolean | users$reportsArgs<ExtArgs>
    resources?: boolean | users$resourcesArgs<ExtArgs>
    task_assignees?: boolean | users$task_assigneesArgs<ExtArgs>
    tasks?: boolean | users$tasksArgs<ExtArgs>
    team_members?: boolean | users$team_membersArgs<ExtArgs>
    ticket_comments?: boolean | users$ticket_commentsArgs<ExtArgs>
    ticket_history?: boolean | users$ticket_historyArgs<ExtArgs>
    tickets_tickets_created_byTousers?: boolean | users$tickets_tickets_created_byTousersArgs<ExtArgs>
    tickets_tickets_assigned_toTousers?: boolean | users$tickets_tickets_assigned_toTousersArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      assets: Prisma.$assetsPayload<ExtArgs>[]
      channel_members: Prisma.$channel_membersPayload<ExtArgs>[]
      documents: Prisma.$documentsPayload<ExtArgs>[]
      hr_records: Prisma.$hr_recordsPayload<ExtArgs>[]
      messages: Prisma.$messagesPayload<ExtArgs>[]
      permissions: Prisma.$permissionsPayload<ExtArgs>[]
      reports: Prisma.$reportsPayload<ExtArgs>[]
      resources: Prisma.$resourcesPayload<ExtArgs>[]
      task_assignees: Prisma.$task_assigneesPayload<ExtArgs>[]
      tasks: Prisma.$tasksPayload<ExtArgs>[]
      team_members: Prisma.$team_membersPayload<ExtArgs>[]
      ticket_comments: Prisma.$ticket_commentsPayload<ExtArgs>[]
      ticket_history: Prisma.$ticket_historyPayload<ExtArgs>[]
      tickets_tickets_created_byTousers: Prisma.$ticketsPayload<ExtArgs>[]
      tickets_tickets_assigned_toTousers: Prisma.$ticketsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password_hash: string
      avatar: string | null
      role: $Enums.users_role | null
      created_at: Date | null
      last_name: string
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assets<T extends users$assetsArgs<ExtArgs> = {}>(args?: Subset<T, users$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$assetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    channel_members<T extends users$channel_membersArgs<ExtArgs> = {}>(args?: Subset<T, users$channel_membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$channel_membersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends users$documentsArgs<ExtArgs> = {}>(args?: Subset<T, users$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$documentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    hr_records<T extends users$hr_recordsArgs<ExtArgs> = {}>(args?: Subset<T, users$hr_recordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$hr_recordsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messages<T extends users$messagesArgs<ExtArgs> = {}>(args?: Subset<T, users$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    permissions<T extends users$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, users$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends users$reportsArgs<ExtArgs> = {}>(args?: Subset<T, users$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resources<T extends users$resourcesArgs<ExtArgs> = {}>(args?: Subset<T, users$resourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$resourcesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    task_assignees<T extends users$task_assigneesArgs<ExtArgs> = {}>(args?: Subset<T, users$task_assigneesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$task_assigneesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tasks<T extends users$tasksArgs<ExtArgs> = {}>(args?: Subset<T, users$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    team_members<T extends users$team_membersArgs<ExtArgs> = {}>(args?: Subset<T, users$team_membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$team_membersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ticket_comments<T extends users$ticket_commentsArgs<ExtArgs> = {}>(args?: Subset<T, users$ticket_commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_commentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ticket_history<T extends users$ticket_historyArgs<ExtArgs> = {}>(args?: Subset<T, users$ticket_historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_historyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tickets_tickets_created_byTousers<T extends users$tickets_tickets_created_byTousersArgs<ExtArgs> = {}>(args?: Subset<T, users$tickets_tickets_created_byTousersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tickets_tickets_assigned_toTousers<T extends users$tickets_tickets_assigned_toTousersArgs<ExtArgs> = {}>(args?: Subset<T, users$tickets_tickets_assigned_toTousersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly name: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly password_hash: FieldRef<"users", 'String'>
    readonly avatar: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'users_role'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly last_name: FieldRef<"users", 'String'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.assets
   */
  export type users$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assets
     */
    select?: assetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assets
     */
    omit?: assetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assetsInclude<ExtArgs> | null
    where?: assetsWhereInput
    orderBy?: assetsOrderByWithRelationInput | assetsOrderByWithRelationInput[]
    cursor?: assetsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetsScalarFieldEnum | AssetsScalarFieldEnum[]
  }

  /**
   * users.channel_members
   */
  export type users$channel_membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channel_members
     */
    select?: channel_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the channel_members
     */
    omit?: channel_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: channel_membersInclude<ExtArgs> | null
    where?: channel_membersWhereInput
    orderBy?: channel_membersOrderByWithRelationInput | channel_membersOrderByWithRelationInput[]
    cursor?: channel_membersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Channel_membersScalarFieldEnum | Channel_membersScalarFieldEnum[]
  }

  /**
   * users.documents
   */
  export type users$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documents
     */
    select?: documentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documents
     */
    omit?: documentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentsInclude<ExtArgs> | null
    where?: documentsWhereInput
    orderBy?: documentsOrderByWithRelationInput | documentsOrderByWithRelationInput[]
    cursor?: documentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentsScalarFieldEnum | DocumentsScalarFieldEnum[]
  }

  /**
   * users.hr_records
   */
  export type users$hr_recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hr_records
     */
    select?: hr_recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hr_records
     */
    omit?: hr_recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hr_recordsInclude<ExtArgs> | null
    where?: hr_recordsWhereInput
    orderBy?: hr_recordsOrderByWithRelationInput | hr_recordsOrderByWithRelationInput[]
    cursor?: hr_recordsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Hr_recordsScalarFieldEnum | Hr_recordsScalarFieldEnum[]
  }

  /**
   * users.messages
   */
  export type users$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the messages
     */
    omit?: messagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messagesInclude<ExtArgs> | null
    where?: messagesWhereInput
    orderBy?: messagesOrderByWithRelationInput | messagesOrderByWithRelationInput[]
    cursor?: messagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }

  /**
   * users.permissions
   */
  export type users$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    where?: permissionsWhereInput
    orderBy?: permissionsOrderByWithRelationInput | permissionsOrderByWithRelationInput[]
    cursor?: permissionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PermissionsScalarFieldEnum | PermissionsScalarFieldEnum[]
  }

  /**
   * users.reports
   */
  export type users$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reports
     */
    omit?: reportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    where?: reportsWhereInput
    orderBy?: reportsOrderByWithRelationInput | reportsOrderByWithRelationInput[]
    cursor?: reportsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * users.resources
   */
  export type users$resourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resources
     */
    select?: resourcesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the resources
     */
    omit?: resourcesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resourcesInclude<ExtArgs> | null
    where?: resourcesWhereInput
    orderBy?: resourcesOrderByWithRelationInput | resourcesOrderByWithRelationInput[]
    cursor?: resourcesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResourcesScalarFieldEnum | ResourcesScalarFieldEnum[]
  }

  /**
   * users.task_assignees
   */
  export type users$task_assigneesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the task_assignees
     */
    select?: task_assigneesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the task_assignees
     */
    omit?: task_assigneesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: task_assigneesInclude<ExtArgs> | null
    where?: task_assigneesWhereInput
    orderBy?: task_assigneesOrderByWithRelationInput | task_assigneesOrderByWithRelationInput[]
    cursor?: task_assigneesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Task_assigneesScalarFieldEnum | Task_assigneesScalarFieldEnum[]
  }

  /**
   * users.tasks
   */
  export type users$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    where?: tasksWhereInput
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    cursor?: tasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * users.team_members
   */
  export type users$team_membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team_members
     */
    select?: team_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the team_members
     */
    omit?: team_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: team_membersInclude<ExtArgs> | null
    where?: team_membersWhereInput
    orderBy?: team_membersOrderByWithRelationInput | team_membersOrderByWithRelationInput[]
    cursor?: team_membersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Team_membersScalarFieldEnum | Team_membersScalarFieldEnum[]
  }

  /**
   * users.ticket_comments
   */
  export type users$ticket_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_comments
     */
    select?: ticket_commentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_comments
     */
    omit?: ticket_commentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_commentsInclude<ExtArgs> | null
    where?: ticket_commentsWhereInput
    orderBy?: ticket_commentsOrderByWithRelationInput | ticket_commentsOrderByWithRelationInput[]
    cursor?: ticket_commentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ticket_commentsScalarFieldEnum | Ticket_commentsScalarFieldEnum[]
  }

  /**
   * users.ticket_history
   */
  export type users$ticket_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_history
     */
    select?: ticket_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_history
     */
    omit?: ticket_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_historyInclude<ExtArgs> | null
    where?: ticket_historyWhereInput
    orderBy?: ticket_historyOrderByWithRelationInput | ticket_historyOrderByWithRelationInput[]
    cursor?: ticket_historyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ticket_historyScalarFieldEnum | Ticket_historyScalarFieldEnum[]
  }

  /**
   * users.tickets_tickets_created_byTousers
   */
  export type users$tickets_tickets_created_byTousersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    where?: ticketsWhereInput
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    cursor?: ticketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * users.tickets_tickets_assigned_toTousers
   */
  export type users$tickets_tickets_assigned_toTousersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    where?: ticketsWhereInput
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    cursor?: ticketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model workflow_steps
   */

  export type AggregateWorkflow_steps = {
    _count: Workflow_stepsCountAggregateOutputType | null
    _avg: Workflow_stepsAvgAggregateOutputType | null
    _sum: Workflow_stepsSumAggregateOutputType | null
    _min: Workflow_stepsMinAggregateOutputType | null
    _max: Workflow_stepsMaxAggregateOutputType | null
  }

  export type Workflow_stepsAvgAggregateOutputType = {
    id: number | null
    workflow_id: number | null
    step_order: number | null
  }

  export type Workflow_stepsSumAggregateOutputType = {
    id: number | null
    workflow_id: number | null
    step_order: number | null
  }

  export type Workflow_stepsMinAggregateOutputType = {
    id: number | null
    workflow_id: number | null
    step_order: number | null
    name: string | null
    action: string | null
  }

  export type Workflow_stepsMaxAggregateOutputType = {
    id: number | null
    workflow_id: number | null
    step_order: number | null
    name: string | null
    action: string | null
  }

  export type Workflow_stepsCountAggregateOutputType = {
    id: number
    workflow_id: number
    step_order: number
    name: number
    action: number
    _all: number
  }


  export type Workflow_stepsAvgAggregateInputType = {
    id?: true
    workflow_id?: true
    step_order?: true
  }

  export type Workflow_stepsSumAggregateInputType = {
    id?: true
    workflow_id?: true
    step_order?: true
  }

  export type Workflow_stepsMinAggregateInputType = {
    id?: true
    workflow_id?: true
    step_order?: true
    name?: true
    action?: true
  }

  export type Workflow_stepsMaxAggregateInputType = {
    id?: true
    workflow_id?: true
    step_order?: true
    name?: true
    action?: true
  }

  export type Workflow_stepsCountAggregateInputType = {
    id?: true
    workflow_id?: true
    step_order?: true
    name?: true
    action?: true
    _all?: true
  }

  export type Workflow_stepsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workflow_steps to aggregate.
     */
    where?: workflow_stepsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workflow_steps to fetch.
     */
    orderBy?: workflow_stepsOrderByWithRelationInput | workflow_stepsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: workflow_stepsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workflow_steps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workflow_steps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned workflow_steps
    **/
    _count?: true | Workflow_stepsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Workflow_stepsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Workflow_stepsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Workflow_stepsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Workflow_stepsMaxAggregateInputType
  }

  export type GetWorkflow_stepsAggregateType<T extends Workflow_stepsAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflow_steps]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflow_steps[P]>
      : GetScalarType<T[P], AggregateWorkflow_steps[P]>
  }




  export type workflow_stepsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workflow_stepsWhereInput
    orderBy?: workflow_stepsOrderByWithAggregationInput | workflow_stepsOrderByWithAggregationInput[]
    by: Workflow_stepsScalarFieldEnum[] | Workflow_stepsScalarFieldEnum
    having?: workflow_stepsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Workflow_stepsCountAggregateInputType | true
    _avg?: Workflow_stepsAvgAggregateInputType
    _sum?: Workflow_stepsSumAggregateInputType
    _min?: Workflow_stepsMinAggregateInputType
    _max?: Workflow_stepsMaxAggregateInputType
  }

  export type Workflow_stepsGroupByOutputType = {
    id: number
    workflow_id: number
    step_order: number
    name: string
    action: string | null
    _count: Workflow_stepsCountAggregateOutputType | null
    _avg: Workflow_stepsAvgAggregateOutputType | null
    _sum: Workflow_stepsSumAggregateOutputType | null
    _min: Workflow_stepsMinAggregateOutputType | null
    _max: Workflow_stepsMaxAggregateOutputType | null
  }

  type GetWorkflow_stepsGroupByPayload<T extends workflow_stepsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Workflow_stepsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Workflow_stepsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Workflow_stepsGroupByOutputType[P]>
            : GetScalarType<T[P], Workflow_stepsGroupByOutputType[P]>
        }
      >
    >


  export type workflow_stepsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflow_id?: boolean
    step_order?: boolean
    name?: boolean
    action?: boolean
    ticket_workflow?: boolean | workflow_steps$ticket_workflowArgs<ExtArgs>
    workflows?: boolean | workflowsDefaultArgs<ExtArgs>
    _count?: boolean | Workflow_stepsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflow_steps"]>



  export type workflow_stepsSelectScalar = {
    id?: boolean
    workflow_id?: boolean
    step_order?: boolean
    name?: boolean
    action?: boolean
  }

  export type workflow_stepsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workflow_id" | "step_order" | "name" | "action", ExtArgs["result"]["workflow_steps"]>
  export type workflow_stepsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket_workflow?: boolean | workflow_steps$ticket_workflowArgs<ExtArgs>
    workflows?: boolean | workflowsDefaultArgs<ExtArgs>
    _count?: boolean | Workflow_stepsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $workflow_stepsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "workflow_steps"
    objects: {
      ticket_workflow: Prisma.$ticket_workflowPayload<ExtArgs>[]
      workflows: Prisma.$workflowsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workflow_id: number
      step_order: number
      name: string
      action: string | null
    }, ExtArgs["result"]["workflow_steps"]>
    composites: {}
  }

  type workflow_stepsGetPayload<S extends boolean | null | undefined | workflow_stepsDefaultArgs> = $Result.GetResult<Prisma.$workflow_stepsPayload, S>

  type workflow_stepsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<workflow_stepsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Workflow_stepsCountAggregateInputType | true
    }

  export interface workflow_stepsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['workflow_steps'], meta: { name: 'workflow_steps' } }
    /**
     * Find zero or one Workflow_steps that matches the filter.
     * @param {workflow_stepsFindUniqueArgs} args - Arguments to find a Workflow_steps
     * @example
     * // Get one Workflow_steps
     * const workflow_steps = await prisma.workflow_steps.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends workflow_stepsFindUniqueArgs>(args: SelectSubset<T, workflow_stepsFindUniqueArgs<ExtArgs>>): Prisma__workflow_stepsClient<$Result.GetResult<Prisma.$workflow_stepsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Workflow_steps that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {workflow_stepsFindUniqueOrThrowArgs} args - Arguments to find a Workflow_steps
     * @example
     * // Get one Workflow_steps
     * const workflow_steps = await prisma.workflow_steps.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends workflow_stepsFindUniqueOrThrowArgs>(args: SelectSubset<T, workflow_stepsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__workflow_stepsClient<$Result.GetResult<Prisma.$workflow_stepsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workflow_steps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workflow_stepsFindFirstArgs} args - Arguments to find a Workflow_steps
     * @example
     * // Get one Workflow_steps
     * const workflow_steps = await prisma.workflow_steps.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends workflow_stepsFindFirstArgs>(args?: SelectSubset<T, workflow_stepsFindFirstArgs<ExtArgs>>): Prisma__workflow_stepsClient<$Result.GetResult<Prisma.$workflow_stepsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workflow_steps that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workflow_stepsFindFirstOrThrowArgs} args - Arguments to find a Workflow_steps
     * @example
     * // Get one Workflow_steps
     * const workflow_steps = await prisma.workflow_steps.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends workflow_stepsFindFirstOrThrowArgs>(args?: SelectSubset<T, workflow_stepsFindFirstOrThrowArgs<ExtArgs>>): Prisma__workflow_stepsClient<$Result.GetResult<Prisma.$workflow_stepsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Workflow_steps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workflow_stepsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workflow_steps
     * const workflow_steps = await prisma.workflow_steps.findMany()
     * 
     * // Get first 10 Workflow_steps
     * const workflow_steps = await prisma.workflow_steps.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflow_stepsWithIdOnly = await prisma.workflow_steps.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends workflow_stepsFindManyArgs>(args?: SelectSubset<T, workflow_stepsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workflow_stepsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Workflow_steps.
     * @param {workflow_stepsCreateArgs} args - Arguments to create a Workflow_steps.
     * @example
     * // Create one Workflow_steps
     * const Workflow_steps = await prisma.workflow_steps.create({
     *   data: {
     *     // ... data to create a Workflow_steps
     *   }
     * })
     * 
     */
    create<T extends workflow_stepsCreateArgs>(args: SelectSubset<T, workflow_stepsCreateArgs<ExtArgs>>): Prisma__workflow_stepsClient<$Result.GetResult<Prisma.$workflow_stepsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Workflow_steps.
     * @param {workflow_stepsCreateManyArgs} args - Arguments to create many Workflow_steps.
     * @example
     * // Create many Workflow_steps
     * const workflow_steps = await prisma.workflow_steps.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends workflow_stepsCreateManyArgs>(args?: SelectSubset<T, workflow_stepsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Workflow_steps.
     * @param {workflow_stepsDeleteArgs} args - Arguments to delete one Workflow_steps.
     * @example
     * // Delete one Workflow_steps
     * const Workflow_steps = await prisma.workflow_steps.delete({
     *   where: {
     *     // ... filter to delete one Workflow_steps
     *   }
     * })
     * 
     */
    delete<T extends workflow_stepsDeleteArgs>(args: SelectSubset<T, workflow_stepsDeleteArgs<ExtArgs>>): Prisma__workflow_stepsClient<$Result.GetResult<Prisma.$workflow_stepsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Workflow_steps.
     * @param {workflow_stepsUpdateArgs} args - Arguments to update one Workflow_steps.
     * @example
     * // Update one Workflow_steps
     * const workflow_steps = await prisma.workflow_steps.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends workflow_stepsUpdateArgs>(args: SelectSubset<T, workflow_stepsUpdateArgs<ExtArgs>>): Prisma__workflow_stepsClient<$Result.GetResult<Prisma.$workflow_stepsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Workflow_steps.
     * @param {workflow_stepsDeleteManyArgs} args - Arguments to filter Workflow_steps to delete.
     * @example
     * // Delete a few Workflow_steps
     * const { count } = await prisma.workflow_steps.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends workflow_stepsDeleteManyArgs>(args?: SelectSubset<T, workflow_stepsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workflow_steps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workflow_stepsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workflow_steps
     * const workflow_steps = await prisma.workflow_steps.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends workflow_stepsUpdateManyArgs>(args: SelectSubset<T, workflow_stepsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Workflow_steps.
     * @param {workflow_stepsUpsertArgs} args - Arguments to update or create a Workflow_steps.
     * @example
     * // Update or create a Workflow_steps
     * const workflow_steps = await prisma.workflow_steps.upsert({
     *   create: {
     *     // ... data to create a Workflow_steps
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workflow_steps we want to update
     *   }
     * })
     */
    upsert<T extends workflow_stepsUpsertArgs>(args: SelectSubset<T, workflow_stepsUpsertArgs<ExtArgs>>): Prisma__workflow_stepsClient<$Result.GetResult<Prisma.$workflow_stepsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Workflow_steps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workflow_stepsCountArgs} args - Arguments to filter Workflow_steps to count.
     * @example
     * // Count the number of Workflow_steps
     * const count = await prisma.workflow_steps.count({
     *   where: {
     *     // ... the filter for the Workflow_steps we want to count
     *   }
     * })
    **/
    count<T extends workflow_stepsCountArgs>(
      args?: Subset<T, workflow_stepsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Workflow_stepsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workflow_steps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Workflow_stepsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Workflow_stepsAggregateArgs>(args: Subset<T, Workflow_stepsAggregateArgs>): Prisma.PrismaPromise<GetWorkflow_stepsAggregateType<T>>

    /**
     * Group by Workflow_steps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workflow_stepsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends workflow_stepsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: workflow_stepsGroupByArgs['orderBy'] }
        : { orderBy?: workflow_stepsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, workflow_stepsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflow_stepsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the workflow_steps model
   */
  readonly fields: workflow_stepsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for workflow_steps.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__workflow_stepsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticket_workflow<T extends workflow_steps$ticket_workflowArgs<ExtArgs> = {}>(args?: Subset<T, workflow_steps$ticket_workflowArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_workflowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workflows<T extends workflowsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, workflowsDefaultArgs<ExtArgs>>): Prisma__workflowsClient<$Result.GetResult<Prisma.$workflowsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the workflow_steps model
   */
  interface workflow_stepsFieldRefs {
    readonly id: FieldRef<"workflow_steps", 'Int'>
    readonly workflow_id: FieldRef<"workflow_steps", 'Int'>
    readonly step_order: FieldRef<"workflow_steps", 'Int'>
    readonly name: FieldRef<"workflow_steps", 'String'>
    readonly action: FieldRef<"workflow_steps", 'String'>
  }
    

  // Custom InputTypes
  /**
   * workflow_steps findUnique
   */
  export type workflow_stepsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflow_steps
     */
    select?: workflow_stepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflow_steps
     */
    omit?: workflow_stepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflow_stepsInclude<ExtArgs> | null
    /**
     * Filter, which workflow_steps to fetch.
     */
    where: workflow_stepsWhereUniqueInput
  }

  /**
   * workflow_steps findUniqueOrThrow
   */
  export type workflow_stepsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflow_steps
     */
    select?: workflow_stepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflow_steps
     */
    omit?: workflow_stepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflow_stepsInclude<ExtArgs> | null
    /**
     * Filter, which workflow_steps to fetch.
     */
    where: workflow_stepsWhereUniqueInput
  }

  /**
   * workflow_steps findFirst
   */
  export type workflow_stepsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflow_steps
     */
    select?: workflow_stepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflow_steps
     */
    omit?: workflow_stepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflow_stepsInclude<ExtArgs> | null
    /**
     * Filter, which workflow_steps to fetch.
     */
    where?: workflow_stepsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workflow_steps to fetch.
     */
    orderBy?: workflow_stepsOrderByWithRelationInput | workflow_stepsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workflow_steps.
     */
    cursor?: workflow_stepsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workflow_steps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workflow_steps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workflow_steps.
     */
    distinct?: Workflow_stepsScalarFieldEnum | Workflow_stepsScalarFieldEnum[]
  }

  /**
   * workflow_steps findFirstOrThrow
   */
  export type workflow_stepsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflow_steps
     */
    select?: workflow_stepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflow_steps
     */
    omit?: workflow_stepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflow_stepsInclude<ExtArgs> | null
    /**
     * Filter, which workflow_steps to fetch.
     */
    where?: workflow_stepsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workflow_steps to fetch.
     */
    orderBy?: workflow_stepsOrderByWithRelationInput | workflow_stepsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workflow_steps.
     */
    cursor?: workflow_stepsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workflow_steps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workflow_steps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workflow_steps.
     */
    distinct?: Workflow_stepsScalarFieldEnum | Workflow_stepsScalarFieldEnum[]
  }

  /**
   * workflow_steps findMany
   */
  export type workflow_stepsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflow_steps
     */
    select?: workflow_stepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflow_steps
     */
    omit?: workflow_stepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflow_stepsInclude<ExtArgs> | null
    /**
     * Filter, which workflow_steps to fetch.
     */
    where?: workflow_stepsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workflow_steps to fetch.
     */
    orderBy?: workflow_stepsOrderByWithRelationInput | workflow_stepsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing workflow_steps.
     */
    cursor?: workflow_stepsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workflow_steps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workflow_steps.
     */
    skip?: number
    distinct?: Workflow_stepsScalarFieldEnum | Workflow_stepsScalarFieldEnum[]
  }

  /**
   * workflow_steps create
   */
  export type workflow_stepsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflow_steps
     */
    select?: workflow_stepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflow_steps
     */
    omit?: workflow_stepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflow_stepsInclude<ExtArgs> | null
    /**
     * The data needed to create a workflow_steps.
     */
    data: XOR<workflow_stepsCreateInput, workflow_stepsUncheckedCreateInput>
  }

  /**
   * workflow_steps createMany
   */
  export type workflow_stepsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many workflow_steps.
     */
    data: workflow_stepsCreateManyInput | workflow_stepsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * workflow_steps update
   */
  export type workflow_stepsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflow_steps
     */
    select?: workflow_stepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflow_steps
     */
    omit?: workflow_stepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflow_stepsInclude<ExtArgs> | null
    /**
     * The data needed to update a workflow_steps.
     */
    data: XOR<workflow_stepsUpdateInput, workflow_stepsUncheckedUpdateInput>
    /**
     * Choose, which workflow_steps to update.
     */
    where: workflow_stepsWhereUniqueInput
  }

  /**
   * workflow_steps updateMany
   */
  export type workflow_stepsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update workflow_steps.
     */
    data: XOR<workflow_stepsUpdateManyMutationInput, workflow_stepsUncheckedUpdateManyInput>
    /**
     * Filter which workflow_steps to update
     */
    where?: workflow_stepsWhereInput
    /**
     * Limit how many workflow_steps to update.
     */
    limit?: number
  }

  /**
   * workflow_steps upsert
   */
  export type workflow_stepsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflow_steps
     */
    select?: workflow_stepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflow_steps
     */
    omit?: workflow_stepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflow_stepsInclude<ExtArgs> | null
    /**
     * The filter to search for the workflow_steps to update in case it exists.
     */
    where: workflow_stepsWhereUniqueInput
    /**
     * In case the workflow_steps found by the `where` argument doesn't exist, create a new workflow_steps with this data.
     */
    create: XOR<workflow_stepsCreateInput, workflow_stepsUncheckedCreateInput>
    /**
     * In case the workflow_steps was found with the provided `where` argument, update it with this data.
     */
    update: XOR<workflow_stepsUpdateInput, workflow_stepsUncheckedUpdateInput>
  }

  /**
   * workflow_steps delete
   */
  export type workflow_stepsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflow_steps
     */
    select?: workflow_stepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflow_steps
     */
    omit?: workflow_stepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflow_stepsInclude<ExtArgs> | null
    /**
     * Filter which workflow_steps to delete.
     */
    where: workflow_stepsWhereUniqueInput
  }

  /**
   * workflow_steps deleteMany
   */
  export type workflow_stepsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workflow_steps to delete
     */
    where?: workflow_stepsWhereInput
    /**
     * Limit how many workflow_steps to delete.
     */
    limit?: number
  }

  /**
   * workflow_steps.ticket_workflow
   */
  export type workflow_steps$ticket_workflowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_workflow
     */
    select?: ticket_workflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_workflow
     */
    omit?: ticket_workflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_workflowInclude<ExtArgs> | null
    where?: ticket_workflowWhereInput
    orderBy?: ticket_workflowOrderByWithRelationInput | ticket_workflowOrderByWithRelationInput[]
    cursor?: ticket_workflowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ticket_workflowScalarFieldEnum | Ticket_workflowScalarFieldEnum[]
  }

  /**
   * workflow_steps without action
   */
  export type workflow_stepsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflow_steps
     */
    select?: workflow_stepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflow_steps
     */
    omit?: workflow_stepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflow_stepsInclude<ExtArgs> | null
  }


  /**
   * Model workflows
   */

  export type AggregateWorkflows = {
    _count: WorkflowsCountAggregateOutputType | null
    _avg: WorkflowsAvgAggregateOutputType | null
    _sum: WorkflowsSumAggregateOutputType | null
    _min: WorkflowsMinAggregateOutputType | null
    _max: WorkflowsMaxAggregateOutputType | null
  }

  export type WorkflowsAvgAggregateOutputType = {
    id: number | null
  }

  export type WorkflowsSumAggregateOutputType = {
    id: number | null
  }

  export type WorkflowsMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type WorkflowsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type WorkflowsCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type WorkflowsAvgAggregateInputType = {
    id?: true
  }

  export type WorkflowsSumAggregateInputType = {
    id?: true
  }

  export type WorkflowsMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type WorkflowsMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type WorkflowsCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type WorkflowsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workflows to aggregate.
     */
    where?: workflowsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workflows to fetch.
     */
    orderBy?: workflowsOrderByWithRelationInput | workflowsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: workflowsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned workflows
    **/
    _count?: true | WorkflowsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkflowsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkflowsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowsMaxAggregateInputType
  }

  export type GetWorkflowsAggregateType<T extends WorkflowsAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflows]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflows[P]>
      : GetScalarType<T[P], AggregateWorkflows[P]>
  }




  export type workflowsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workflowsWhereInput
    orderBy?: workflowsOrderByWithAggregationInput | workflowsOrderByWithAggregationInput[]
    by: WorkflowsScalarFieldEnum[] | WorkflowsScalarFieldEnum
    having?: workflowsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowsCountAggregateInputType | true
    _avg?: WorkflowsAvgAggregateInputType
    _sum?: WorkflowsSumAggregateInputType
    _min?: WorkflowsMinAggregateInputType
    _max?: WorkflowsMaxAggregateInputType
  }

  export type WorkflowsGroupByOutputType = {
    id: number
    name: string
    description: string | null
    _count: WorkflowsCountAggregateOutputType | null
    _avg: WorkflowsAvgAggregateOutputType | null
    _sum: WorkflowsSumAggregateOutputType | null
    _min: WorkflowsMinAggregateOutputType | null
    _max: WorkflowsMaxAggregateOutputType | null
  }

  type GetWorkflowsGroupByPayload<T extends workflowsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkflowsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowsGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowsGroupByOutputType[P]>
        }
      >
    >


  export type workflowsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    ticket_workflow?: boolean | workflows$ticket_workflowArgs<ExtArgs>
    workflow_steps?: boolean | workflows$workflow_stepsArgs<ExtArgs>
    _count?: boolean | WorkflowsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflows"]>



  export type workflowsSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type workflowsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description", ExtArgs["result"]["workflows"]>
  export type workflowsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket_workflow?: boolean | workflows$ticket_workflowArgs<ExtArgs>
    workflow_steps?: boolean | workflows$workflow_stepsArgs<ExtArgs>
    _count?: boolean | WorkflowsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $workflowsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "workflows"
    objects: {
      ticket_workflow: Prisma.$ticket_workflowPayload<ExtArgs>[]
      workflow_steps: Prisma.$workflow_stepsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
    }, ExtArgs["result"]["workflows"]>
    composites: {}
  }

  type workflowsGetPayload<S extends boolean | null | undefined | workflowsDefaultArgs> = $Result.GetResult<Prisma.$workflowsPayload, S>

  type workflowsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<workflowsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkflowsCountAggregateInputType | true
    }

  export interface workflowsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['workflows'], meta: { name: 'workflows' } }
    /**
     * Find zero or one Workflows that matches the filter.
     * @param {workflowsFindUniqueArgs} args - Arguments to find a Workflows
     * @example
     * // Get one Workflows
     * const workflows = await prisma.workflows.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends workflowsFindUniqueArgs>(args: SelectSubset<T, workflowsFindUniqueArgs<ExtArgs>>): Prisma__workflowsClient<$Result.GetResult<Prisma.$workflowsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Workflows that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {workflowsFindUniqueOrThrowArgs} args - Arguments to find a Workflows
     * @example
     * // Get one Workflows
     * const workflows = await prisma.workflows.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends workflowsFindUniqueOrThrowArgs>(args: SelectSubset<T, workflowsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__workflowsClient<$Result.GetResult<Prisma.$workflowsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workflows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workflowsFindFirstArgs} args - Arguments to find a Workflows
     * @example
     * // Get one Workflows
     * const workflows = await prisma.workflows.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends workflowsFindFirstArgs>(args?: SelectSubset<T, workflowsFindFirstArgs<ExtArgs>>): Prisma__workflowsClient<$Result.GetResult<Prisma.$workflowsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workflows that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workflowsFindFirstOrThrowArgs} args - Arguments to find a Workflows
     * @example
     * // Get one Workflows
     * const workflows = await prisma.workflows.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends workflowsFindFirstOrThrowArgs>(args?: SelectSubset<T, workflowsFindFirstOrThrowArgs<ExtArgs>>): Prisma__workflowsClient<$Result.GetResult<Prisma.$workflowsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Workflows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workflowsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workflows
     * const workflows = await prisma.workflows.findMany()
     * 
     * // Get first 10 Workflows
     * const workflows = await prisma.workflows.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowsWithIdOnly = await prisma.workflows.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends workflowsFindManyArgs>(args?: SelectSubset<T, workflowsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workflowsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Workflows.
     * @param {workflowsCreateArgs} args - Arguments to create a Workflows.
     * @example
     * // Create one Workflows
     * const Workflows = await prisma.workflows.create({
     *   data: {
     *     // ... data to create a Workflows
     *   }
     * })
     * 
     */
    create<T extends workflowsCreateArgs>(args: SelectSubset<T, workflowsCreateArgs<ExtArgs>>): Prisma__workflowsClient<$Result.GetResult<Prisma.$workflowsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Workflows.
     * @param {workflowsCreateManyArgs} args - Arguments to create many Workflows.
     * @example
     * // Create many Workflows
     * const workflows = await prisma.workflows.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends workflowsCreateManyArgs>(args?: SelectSubset<T, workflowsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Workflows.
     * @param {workflowsDeleteArgs} args - Arguments to delete one Workflows.
     * @example
     * // Delete one Workflows
     * const Workflows = await prisma.workflows.delete({
     *   where: {
     *     // ... filter to delete one Workflows
     *   }
     * })
     * 
     */
    delete<T extends workflowsDeleteArgs>(args: SelectSubset<T, workflowsDeleteArgs<ExtArgs>>): Prisma__workflowsClient<$Result.GetResult<Prisma.$workflowsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Workflows.
     * @param {workflowsUpdateArgs} args - Arguments to update one Workflows.
     * @example
     * // Update one Workflows
     * const workflows = await prisma.workflows.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends workflowsUpdateArgs>(args: SelectSubset<T, workflowsUpdateArgs<ExtArgs>>): Prisma__workflowsClient<$Result.GetResult<Prisma.$workflowsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Workflows.
     * @param {workflowsDeleteManyArgs} args - Arguments to filter Workflows to delete.
     * @example
     * // Delete a few Workflows
     * const { count } = await prisma.workflows.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends workflowsDeleteManyArgs>(args?: SelectSubset<T, workflowsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workflowsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workflows
     * const workflows = await prisma.workflows.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends workflowsUpdateManyArgs>(args: SelectSubset<T, workflowsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Workflows.
     * @param {workflowsUpsertArgs} args - Arguments to update or create a Workflows.
     * @example
     * // Update or create a Workflows
     * const workflows = await prisma.workflows.upsert({
     *   create: {
     *     // ... data to create a Workflows
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workflows we want to update
     *   }
     * })
     */
    upsert<T extends workflowsUpsertArgs>(args: SelectSubset<T, workflowsUpsertArgs<ExtArgs>>): Prisma__workflowsClient<$Result.GetResult<Prisma.$workflowsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Workflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workflowsCountArgs} args - Arguments to filter Workflows to count.
     * @example
     * // Count the number of Workflows
     * const count = await prisma.workflows.count({
     *   where: {
     *     // ... the filter for the Workflows we want to count
     *   }
     * })
    **/
    count<T extends workflowsCountArgs>(
      args?: Subset<T, workflowsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowsAggregateArgs>(args: Subset<T, WorkflowsAggregateArgs>): Prisma.PrismaPromise<GetWorkflowsAggregateType<T>>

    /**
     * Group by Workflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workflowsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends workflowsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: workflowsGroupByArgs['orderBy'] }
        : { orderBy?: workflowsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, workflowsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the workflows model
   */
  readonly fields: workflowsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for workflows.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__workflowsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticket_workflow<T extends workflows$ticket_workflowArgs<ExtArgs> = {}>(args?: Subset<T, workflows$ticket_workflowArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_workflowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workflow_steps<T extends workflows$workflow_stepsArgs<ExtArgs> = {}>(args?: Subset<T, workflows$workflow_stepsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workflow_stepsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the workflows model
   */
  interface workflowsFieldRefs {
    readonly id: FieldRef<"workflows", 'Int'>
    readonly name: FieldRef<"workflows", 'String'>
    readonly description: FieldRef<"workflows", 'String'>
  }
    

  // Custom InputTypes
  /**
   * workflows findUnique
   */
  export type workflowsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflows
     */
    select?: workflowsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflows
     */
    omit?: workflowsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflowsInclude<ExtArgs> | null
    /**
     * Filter, which workflows to fetch.
     */
    where: workflowsWhereUniqueInput
  }

  /**
   * workflows findUniqueOrThrow
   */
  export type workflowsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflows
     */
    select?: workflowsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflows
     */
    omit?: workflowsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflowsInclude<ExtArgs> | null
    /**
     * Filter, which workflows to fetch.
     */
    where: workflowsWhereUniqueInput
  }

  /**
   * workflows findFirst
   */
  export type workflowsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflows
     */
    select?: workflowsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflows
     */
    omit?: workflowsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflowsInclude<ExtArgs> | null
    /**
     * Filter, which workflows to fetch.
     */
    where?: workflowsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workflows to fetch.
     */
    orderBy?: workflowsOrderByWithRelationInput | workflowsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workflows.
     */
    cursor?: workflowsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workflows.
     */
    distinct?: WorkflowsScalarFieldEnum | WorkflowsScalarFieldEnum[]
  }

  /**
   * workflows findFirstOrThrow
   */
  export type workflowsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflows
     */
    select?: workflowsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflows
     */
    omit?: workflowsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflowsInclude<ExtArgs> | null
    /**
     * Filter, which workflows to fetch.
     */
    where?: workflowsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workflows to fetch.
     */
    orderBy?: workflowsOrderByWithRelationInput | workflowsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workflows.
     */
    cursor?: workflowsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workflows.
     */
    distinct?: WorkflowsScalarFieldEnum | WorkflowsScalarFieldEnum[]
  }

  /**
   * workflows findMany
   */
  export type workflowsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflows
     */
    select?: workflowsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflows
     */
    omit?: workflowsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflowsInclude<ExtArgs> | null
    /**
     * Filter, which workflows to fetch.
     */
    where?: workflowsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workflows to fetch.
     */
    orderBy?: workflowsOrderByWithRelationInput | workflowsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing workflows.
     */
    cursor?: workflowsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workflows.
     */
    skip?: number
    distinct?: WorkflowsScalarFieldEnum | WorkflowsScalarFieldEnum[]
  }

  /**
   * workflows create
   */
  export type workflowsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflows
     */
    select?: workflowsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflows
     */
    omit?: workflowsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflowsInclude<ExtArgs> | null
    /**
     * The data needed to create a workflows.
     */
    data: XOR<workflowsCreateInput, workflowsUncheckedCreateInput>
  }

  /**
   * workflows createMany
   */
  export type workflowsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many workflows.
     */
    data: workflowsCreateManyInput | workflowsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * workflows update
   */
  export type workflowsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflows
     */
    select?: workflowsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflows
     */
    omit?: workflowsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflowsInclude<ExtArgs> | null
    /**
     * The data needed to update a workflows.
     */
    data: XOR<workflowsUpdateInput, workflowsUncheckedUpdateInput>
    /**
     * Choose, which workflows to update.
     */
    where: workflowsWhereUniqueInput
  }

  /**
   * workflows updateMany
   */
  export type workflowsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update workflows.
     */
    data: XOR<workflowsUpdateManyMutationInput, workflowsUncheckedUpdateManyInput>
    /**
     * Filter which workflows to update
     */
    where?: workflowsWhereInput
    /**
     * Limit how many workflows to update.
     */
    limit?: number
  }

  /**
   * workflows upsert
   */
  export type workflowsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflows
     */
    select?: workflowsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflows
     */
    omit?: workflowsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflowsInclude<ExtArgs> | null
    /**
     * The filter to search for the workflows to update in case it exists.
     */
    where: workflowsWhereUniqueInput
    /**
     * In case the workflows found by the `where` argument doesn't exist, create a new workflows with this data.
     */
    create: XOR<workflowsCreateInput, workflowsUncheckedCreateInput>
    /**
     * In case the workflows was found with the provided `where` argument, update it with this data.
     */
    update: XOR<workflowsUpdateInput, workflowsUncheckedUpdateInput>
  }

  /**
   * workflows delete
   */
  export type workflowsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflows
     */
    select?: workflowsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflows
     */
    omit?: workflowsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflowsInclude<ExtArgs> | null
    /**
     * Filter which workflows to delete.
     */
    where: workflowsWhereUniqueInput
  }

  /**
   * workflows deleteMany
   */
  export type workflowsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workflows to delete
     */
    where?: workflowsWhereInput
    /**
     * Limit how many workflows to delete.
     */
    limit?: number
  }

  /**
   * workflows.ticket_workflow
   */
  export type workflows$ticket_workflowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_workflow
     */
    select?: ticket_workflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_workflow
     */
    omit?: ticket_workflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_workflowInclude<ExtArgs> | null
    where?: ticket_workflowWhereInput
    orderBy?: ticket_workflowOrderByWithRelationInput | ticket_workflowOrderByWithRelationInput[]
    cursor?: ticket_workflowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ticket_workflowScalarFieldEnum | Ticket_workflowScalarFieldEnum[]
  }

  /**
   * workflows.workflow_steps
   */
  export type workflows$workflow_stepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflow_steps
     */
    select?: workflow_stepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflow_steps
     */
    omit?: workflow_stepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflow_stepsInclude<ExtArgs> | null
    where?: workflow_stepsWhereInput
    orderBy?: workflow_stepsOrderByWithRelationInput | workflow_stepsOrderByWithRelationInput[]
    cursor?: workflow_stepsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Workflow_stepsScalarFieldEnum | Workflow_stepsScalarFieldEnum[]
  }

  /**
   * workflows without action
   */
  export type workflowsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workflows
     */
    select?: workflowsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workflows
     */
    omit?: workflowsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workflowsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AssetsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    serial_number: 'serial_number',
    assigned_to: 'assigned_to',
    status: 'status'
  };

  export type AssetsScalarFieldEnum = (typeof AssetsScalarFieldEnum)[keyof typeof AssetsScalarFieldEnum]


  export const BudgetsScalarFieldEnum: {
    id: 'id',
    project_id: 'project_id',
    amount: 'amount',
    description: 'description',
    created_at: 'created_at'
  };

  export type BudgetsScalarFieldEnum = (typeof BudgetsScalarFieldEnum)[keyof typeof BudgetsScalarFieldEnum]


  export const Channel_membersScalarFieldEnum: {
    id: 'id',
    channel_id: 'channel_id',
    user_id: 'user_id'
  };

  export type Channel_membersScalarFieldEnum = (typeof Channel_membersScalarFieldEnum)[keyof typeof Channel_membersScalarFieldEnum]


  export const ChannelsScalarFieldEnum: {
    id: 'id',
    team_id: 'team_id',
    name: 'name',
    type: 'type'
  };

  export type ChannelsScalarFieldEnum = (typeof ChannelsScalarFieldEnum)[keyof typeof ChannelsScalarFieldEnum]


  export const ClientsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    company: 'company',
    created_at: 'created_at'
  };

  export type ClientsScalarFieldEnum = (typeof ClientsScalarFieldEnum)[keyof typeof ClientsScalarFieldEnum]


  export const ContractsScalarFieldEnum: {
    id: 'id',
    supplier_id: 'supplier_id',
    project_id: 'project_id',
    description: 'description',
    start_date: 'start_date',
    end_date: 'end_date',
    amount: 'amount',
    status: 'status'
  };

  export type ContractsScalarFieldEnum = (typeof ContractsScalarFieldEnum)[keyof typeof ContractsScalarFieldEnum]


  export const CostsScalarFieldEnum: {
    id: 'id',
    project_id: 'project_id',
    description: 'description',
    amount: 'amount',
    date: 'date'
  };

  export type CostsScalarFieldEnum = (typeof CostsScalarFieldEnum)[keyof typeof CostsScalarFieldEnum]


  export const DocumentsScalarFieldEnum: {
    id: 'id',
    project_id: 'project_id',
    name: 'name',
    content: 'content',
    type: 'type',
    created_by: 'created_by',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type DocumentsScalarFieldEnum = (typeof DocumentsScalarFieldEnum)[keyof typeof DocumentsScalarFieldEnum]


  export const EventsScalarFieldEnum: {
    id: 'id',
    project_id: 'project_id',
    name: 'name',
    description: 'description',
    start_datetime: 'start_datetime',
    end_datetime: 'end_datetime',
    type: 'type'
  };

  export type EventsScalarFieldEnum = (typeof EventsScalarFieldEnum)[keyof typeof EventsScalarFieldEnum]


  export const Hr_recordsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    type: 'type',
    details: 'details',
    date: 'date'
  };

  export type Hr_recordsScalarFieldEnum = (typeof Hr_recordsScalarFieldEnum)[keyof typeof Hr_recordsScalarFieldEnum]


  export const LeadsScalarFieldEnum: {
    id: 'id',
    client_id: 'client_id',
    project_id: 'project_id',
    status: 'status',
    notes: 'notes',
    created_at: 'created_at'
  };

  export type LeadsScalarFieldEnum = (typeof LeadsScalarFieldEnum)[keyof typeof LeadsScalarFieldEnum]


  export const MessagesScalarFieldEnum: {
    id: 'id',
    channel_id: 'channel_id',
    user_id: 'user_id',
    content: 'content',
    created_at: 'created_at'
  };

  export type MessagesScalarFieldEnum = (typeof MessagesScalarFieldEnum)[keyof typeof MessagesScalarFieldEnum]


  export const PermissionsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    project_id: 'project_id',
    permission: 'permission'
  };

  export type PermissionsScalarFieldEnum = (typeof PermissionsScalarFieldEnum)[keyof typeof PermissionsScalarFieldEnum]


  export const Project_resourcesScalarFieldEnum: {
    id: 'id',
    project_id: 'project_id',
    resource_id: 'resource_id',
    assigned_from: 'assigned_from',
    assigned_to: 'assigned_to'
  };

  export type Project_resourcesScalarFieldEnum = (typeof Project_resourcesScalarFieldEnum)[keyof typeof Project_resourcesScalarFieldEnum]


  export const ProjectsScalarFieldEnum: {
    id: 'id',
    team_id: 'team_id',
    name: 'name',
    description: 'description',
    status: 'status',
    start_date: 'start_date',
    end_date: 'end_date',
    created_at: 'created_at'
  };

  export type ProjectsScalarFieldEnum = (typeof ProjectsScalarFieldEnum)[keyof typeof ProjectsScalarFieldEnum]


  export const ReportsScalarFieldEnum: {
    id: 'id',
    project_id: 'project_id',
    team_id: 'team_id',
    user_id: 'user_id',
    type: 'type',
    data: 'data',
    created_at: 'created_at'
  };

  export type ReportsScalarFieldEnum = (typeof ReportsScalarFieldEnum)[keyof typeof ReportsScalarFieldEnum]


  export const ResourcesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    user_id: 'user_id',
    team_id: 'team_id',
    availability: 'availability'
  };

  export type ResourcesScalarFieldEnum = (typeof ResourcesScalarFieldEnum)[keyof typeof ResourcesScalarFieldEnum]


  export const Sprint_tasksScalarFieldEnum: {
    id: 'id',
    sprint_id: 'sprint_id',
    task_id: 'task_id'
  };

  export type Sprint_tasksScalarFieldEnum = (typeof Sprint_tasksScalarFieldEnum)[keyof typeof Sprint_tasksScalarFieldEnum]


  export const SprintsScalarFieldEnum: {
    id: 'id',
    project_id: 'project_id',
    name: 'name',
    start_date: 'start_date',
    end_date: 'end_date',
    goal: 'goal',
    status: 'status'
  };

  export type SprintsScalarFieldEnum = (typeof SprintsScalarFieldEnum)[keyof typeof SprintsScalarFieldEnum]


  export const SuppliersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    contact_info: 'contact_info'
  };

  export type SuppliersScalarFieldEnum = (typeof SuppliersScalarFieldEnum)[keyof typeof SuppliersScalarFieldEnum]


  export const Task_assigneesScalarFieldEnum: {
    id: 'id',
    task_id: 'task_id',
    user_id: 'user_id'
  };

  export type Task_assigneesScalarFieldEnum = (typeof Task_assigneesScalarFieldEnum)[keyof typeof Task_assigneesScalarFieldEnum]


  export const Task_label_linksScalarFieldEnum: {
    id: 'id',
    task_id: 'task_id',
    label_id: 'label_id'
  };

  export type Task_label_linksScalarFieldEnum = (typeof Task_label_linksScalarFieldEnum)[keyof typeof Task_label_linksScalarFieldEnum]


  export const Task_labelsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    color: 'color'
  };

  export type Task_labelsScalarFieldEnum = (typeof Task_labelsScalarFieldEnum)[keyof typeof Task_labelsScalarFieldEnum]


  export const TasksScalarFieldEnum: {
    id: 'id',
    project_id: 'project_id',
    parent_task_id: 'parent_task_id',
    name: 'name',
    description: 'description',
    status: 'status',
    priority: 'priority',
    due_date: 'due_date',
    wip_limit: 'wip_limit',
    swimlane: 'swimlane',
    created_by: 'created_by',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TasksScalarFieldEnum = (typeof TasksScalarFieldEnum)[keyof typeof TasksScalarFieldEnum]


  export const Team_membersScalarFieldEnum: {
    id: 'id',
    team_id: 'team_id',
    user_id: 'user_id',
    role: 'role'
  };

  export type Team_membersScalarFieldEnum = (typeof Team_membersScalarFieldEnum)[keyof typeof Team_membersScalarFieldEnum]


  export const TeamsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    logo: 'logo',
    plan: 'plan',
    created_at: 'created_at'
  };

  export type TeamsScalarFieldEnum = (typeof TeamsScalarFieldEnum)[keyof typeof TeamsScalarFieldEnum]


  export const Ticket_commentsScalarFieldEnum: {
    id: 'id',
    ticket_id: 'ticket_id',
    user_id: 'user_id',
    comment: 'comment',
    created_at: 'created_at'
  };

  export type Ticket_commentsScalarFieldEnum = (typeof Ticket_commentsScalarFieldEnum)[keyof typeof Ticket_commentsScalarFieldEnum]


  export const Ticket_historyScalarFieldEnum: {
    id: 'id',
    ticket_id: 'ticket_id',
    action: 'action',
    performed_by: 'performed_by',
    performed_at: 'performed_at',
    details: 'details'
  };

  export type Ticket_historyScalarFieldEnum = (typeof Ticket_historyScalarFieldEnum)[keyof typeof Ticket_historyScalarFieldEnum]


  export const Ticket_workflowScalarFieldEnum: {
    id: 'id',
    ticket_id: 'ticket_id',
    workflow_id: 'workflow_id',
    current_step: 'current_step'
  };

  export type Ticket_workflowScalarFieldEnum = (typeof Ticket_workflowScalarFieldEnum)[keyof typeof Ticket_workflowScalarFieldEnum]


  export const TicketsScalarFieldEnum: {
    id: 'id',
    project_id: 'project_id',
    created_by: 'created_by',
    assigned_to: 'assigned_to',
    type: 'type',
    title: 'title',
    description: 'description',
    status: 'status',
    priority: 'priority',
    sla_hours: 'sla_hours',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TicketsScalarFieldEnum = (typeof TicketsScalarFieldEnum)[keyof typeof TicketsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password_hash: 'password_hash',
    avatar: 'avatar',
    role: 'role',
    created_at: 'created_at',
    last_name: 'last_name'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const Workflow_stepsScalarFieldEnum: {
    id: 'id',
    workflow_id: 'workflow_id',
    step_order: 'step_order',
    name: 'name',
    action: 'action'
  };

  export type Workflow_stepsScalarFieldEnum = (typeof Workflow_stepsScalarFieldEnum)[keyof typeof Workflow_stepsScalarFieldEnum]


  export const WorkflowsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type WorkflowsScalarFieldEnum = (typeof WorkflowsScalarFieldEnum)[keyof typeof WorkflowsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const assetsOrderByRelevanceFieldEnum: {
    name: 'name',
    type: 'type',
    serial_number: 'serial_number'
  };

  export type assetsOrderByRelevanceFieldEnum = (typeof assetsOrderByRelevanceFieldEnum)[keyof typeof assetsOrderByRelevanceFieldEnum]


  export const budgetsOrderByRelevanceFieldEnum: {
    description: 'description'
  };

  export type budgetsOrderByRelevanceFieldEnum = (typeof budgetsOrderByRelevanceFieldEnum)[keyof typeof budgetsOrderByRelevanceFieldEnum]


  export const channelsOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type channelsOrderByRelevanceFieldEnum = (typeof channelsOrderByRelevanceFieldEnum)[keyof typeof channelsOrderByRelevanceFieldEnum]


  export const clientsOrderByRelevanceFieldEnum: {
    name: 'name',
    email: 'email',
    phone: 'phone',
    company: 'company'
  };

  export type clientsOrderByRelevanceFieldEnum = (typeof clientsOrderByRelevanceFieldEnum)[keyof typeof clientsOrderByRelevanceFieldEnum]


  export const contractsOrderByRelevanceFieldEnum: {
    description: 'description'
  };

  export type contractsOrderByRelevanceFieldEnum = (typeof contractsOrderByRelevanceFieldEnum)[keyof typeof contractsOrderByRelevanceFieldEnum]


  export const costsOrderByRelevanceFieldEnum: {
    description: 'description'
  };

  export type costsOrderByRelevanceFieldEnum = (typeof costsOrderByRelevanceFieldEnum)[keyof typeof costsOrderByRelevanceFieldEnum]


  export const documentsOrderByRelevanceFieldEnum: {
    name: 'name',
    content: 'content'
  };

  export type documentsOrderByRelevanceFieldEnum = (typeof documentsOrderByRelevanceFieldEnum)[keyof typeof documentsOrderByRelevanceFieldEnum]


  export const eventsOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description'
  };

  export type eventsOrderByRelevanceFieldEnum = (typeof eventsOrderByRelevanceFieldEnum)[keyof typeof eventsOrderByRelevanceFieldEnum]


  export const hr_recordsOrderByRelevanceFieldEnum: {
    details: 'details'
  };

  export type hr_recordsOrderByRelevanceFieldEnum = (typeof hr_recordsOrderByRelevanceFieldEnum)[keyof typeof hr_recordsOrderByRelevanceFieldEnum]


  export const leadsOrderByRelevanceFieldEnum: {
    notes: 'notes'
  };

  export type leadsOrderByRelevanceFieldEnum = (typeof leadsOrderByRelevanceFieldEnum)[keyof typeof leadsOrderByRelevanceFieldEnum]


  export const messagesOrderByRelevanceFieldEnum: {
    content: 'content'
  };

  export type messagesOrderByRelevanceFieldEnum = (typeof messagesOrderByRelevanceFieldEnum)[keyof typeof messagesOrderByRelevanceFieldEnum]


  export const permissionsOrderByRelevanceFieldEnum: {
    permission: 'permission'
  };

  export type permissionsOrderByRelevanceFieldEnum = (typeof permissionsOrderByRelevanceFieldEnum)[keyof typeof permissionsOrderByRelevanceFieldEnum]


  export const projectsOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description'
  };

  export type projectsOrderByRelevanceFieldEnum = (typeof projectsOrderByRelevanceFieldEnum)[keyof typeof projectsOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const resourcesOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type resourcesOrderByRelevanceFieldEnum = (typeof resourcesOrderByRelevanceFieldEnum)[keyof typeof resourcesOrderByRelevanceFieldEnum]


  export const sprintsOrderByRelevanceFieldEnum: {
    name: 'name',
    goal: 'goal'
  };

  export type sprintsOrderByRelevanceFieldEnum = (typeof sprintsOrderByRelevanceFieldEnum)[keyof typeof sprintsOrderByRelevanceFieldEnum]


  export const suppliersOrderByRelevanceFieldEnum: {
    name: 'name',
    contact_info: 'contact_info'
  };

  export type suppliersOrderByRelevanceFieldEnum = (typeof suppliersOrderByRelevanceFieldEnum)[keyof typeof suppliersOrderByRelevanceFieldEnum]


  export const task_labelsOrderByRelevanceFieldEnum: {
    name: 'name',
    color: 'color'
  };

  export type task_labelsOrderByRelevanceFieldEnum = (typeof task_labelsOrderByRelevanceFieldEnum)[keyof typeof task_labelsOrderByRelevanceFieldEnum]


  export const tasksOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description',
    swimlane: 'swimlane'
  };

  export type tasksOrderByRelevanceFieldEnum = (typeof tasksOrderByRelevanceFieldEnum)[keyof typeof tasksOrderByRelevanceFieldEnum]


  export const teamsOrderByRelevanceFieldEnum: {
    name: 'name',
    logo: 'logo',
    plan: 'plan'
  };

  export type teamsOrderByRelevanceFieldEnum = (typeof teamsOrderByRelevanceFieldEnum)[keyof typeof teamsOrderByRelevanceFieldEnum]


  export const ticket_commentsOrderByRelevanceFieldEnum: {
    comment: 'comment'
  };

  export type ticket_commentsOrderByRelevanceFieldEnum = (typeof ticket_commentsOrderByRelevanceFieldEnum)[keyof typeof ticket_commentsOrderByRelevanceFieldEnum]


  export const ticket_historyOrderByRelevanceFieldEnum: {
    action: 'action',
    details: 'details'
  };

  export type ticket_historyOrderByRelevanceFieldEnum = (typeof ticket_historyOrderByRelevanceFieldEnum)[keyof typeof ticket_historyOrderByRelevanceFieldEnum]


  export const ticketsOrderByRelevanceFieldEnum: {
    title: 'title',
    description: 'description'
  };

  export type ticketsOrderByRelevanceFieldEnum = (typeof ticketsOrderByRelevanceFieldEnum)[keyof typeof ticketsOrderByRelevanceFieldEnum]


  export const usersOrderByRelevanceFieldEnum: {
    name: 'name',
    email: 'email',
    password_hash: 'password_hash',
    avatar: 'avatar',
    last_name: 'last_name'
  };

  export type usersOrderByRelevanceFieldEnum = (typeof usersOrderByRelevanceFieldEnum)[keyof typeof usersOrderByRelevanceFieldEnum]


  export const workflow_stepsOrderByRelevanceFieldEnum: {
    name: 'name',
    action: 'action'
  };

  export type workflow_stepsOrderByRelevanceFieldEnum = (typeof workflow_stepsOrderByRelevanceFieldEnum)[keyof typeof workflow_stepsOrderByRelevanceFieldEnum]


  export const workflowsOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description'
  };

  export type workflowsOrderByRelevanceFieldEnum = (typeof workflowsOrderByRelevanceFieldEnum)[keyof typeof workflowsOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'assets_status'
   */
  export type Enumassets_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'assets_status'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'channels_type'
   */
  export type Enumchannels_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'channels_type'>
    


  /**
   * Reference to a field of type 'contracts_status'
   */
  export type Enumcontracts_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'contracts_status'>
    


  /**
   * Reference to a field of type 'documents_type'
   */
  export type Enumdocuments_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'documents_type'>
    


  /**
   * Reference to a field of type 'events_type'
   */
  export type Enumevents_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'events_type'>
    


  /**
   * Reference to a field of type 'hr_records_type'
   */
  export type Enumhr_records_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'hr_records_type'>
    


  /**
   * Reference to a field of type 'leads_status'
   */
  export type Enumleads_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'leads_status'>
    


  /**
   * Reference to a field of type 'projects_status'
   */
  export type Enumprojects_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'projects_status'>
    


  /**
   * Reference to a field of type 'reports_type'
   */
  export type Enumreports_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'reports_type'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'resources_type'
   */
  export type Enumresources_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'resources_type'>
    


  /**
   * Reference to a field of type 'resources_availability'
   */
  export type Enumresources_availabilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'resources_availability'>
    


  /**
   * Reference to a field of type 'sprints_status'
   */
  export type Enumsprints_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'sprints_status'>
    


  /**
   * Reference to a field of type 'tasks_status'
   */
  export type Enumtasks_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'tasks_status'>
    


  /**
   * Reference to a field of type 'tasks_priority'
   */
  export type Enumtasks_priorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'tasks_priority'>
    


  /**
   * Reference to a field of type 'team_members_role'
   */
  export type Enumteam_members_roleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'team_members_role'>
    


  /**
   * Reference to a field of type 'tickets_type'
   */
  export type Enumtickets_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'tickets_type'>
    


  /**
   * Reference to a field of type 'tickets_status'
   */
  export type Enumtickets_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'tickets_status'>
    


  /**
   * Reference to a field of type 'tickets_priority'
   */
  export type Enumtickets_priorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'tickets_priority'>
    


  /**
   * Reference to a field of type 'users_role'
   */
  export type Enumusers_roleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'users_role'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type assetsWhereInput = {
    AND?: assetsWhereInput | assetsWhereInput[]
    OR?: assetsWhereInput[]
    NOT?: assetsWhereInput | assetsWhereInput[]
    id?: IntFilter<"assets"> | number
    name?: StringFilter<"assets"> | string
    type?: StringNullableFilter<"assets"> | string | null
    serial_number?: StringNullableFilter<"assets"> | string | null
    assigned_to?: IntNullableFilter<"assets"> | number | null
    status?: Enumassets_statusNullableFilter<"assets"> | $Enums.assets_status | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type assetsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrderInput | SortOrder
    serial_number?: SortOrderInput | SortOrder
    assigned_to?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    users?: usersOrderByWithRelationInput
    _relevance?: assetsOrderByRelevanceInput
  }

  export type assetsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: assetsWhereInput | assetsWhereInput[]
    OR?: assetsWhereInput[]
    NOT?: assetsWhereInput | assetsWhereInput[]
    name?: StringFilter<"assets"> | string
    type?: StringNullableFilter<"assets"> | string | null
    serial_number?: StringNullableFilter<"assets"> | string | null
    assigned_to?: IntNullableFilter<"assets"> | number | null
    status?: Enumassets_statusNullableFilter<"assets"> | $Enums.assets_status | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "id">

  export type assetsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrderInput | SortOrder
    serial_number?: SortOrderInput | SortOrder
    assigned_to?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    _count?: assetsCountOrderByAggregateInput
    _avg?: assetsAvgOrderByAggregateInput
    _max?: assetsMaxOrderByAggregateInput
    _min?: assetsMinOrderByAggregateInput
    _sum?: assetsSumOrderByAggregateInput
  }

  export type assetsScalarWhereWithAggregatesInput = {
    AND?: assetsScalarWhereWithAggregatesInput | assetsScalarWhereWithAggregatesInput[]
    OR?: assetsScalarWhereWithAggregatesInput[]
    NOT?: assetsScalarWhereWithAggregatesInput | assetsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"assets"> | number
    name?: StringWithAggregatesFilter<"assets"> | string
    type?: StringNullableWithAggregatesFilter<"assets"> | string | null
    serial_number?: StringNullableWithAggregatesFilter<"assets"> | string | null
    assigned_to?: IntNullableWithAggregatesFilter<"assets"> | number | null
    status?: Enumassets_statusNullableWithAggregatesFilter<"assets"> | $Enums.assets_status | null
  }

  export type budgetsWhereInput = {
    AND?: budgetsWhereInput | budgetsWhereInput[]
    OR?: budgetsWhereInput[]
    NOT?: budgetsWhereInput | budgetsWhereInput[]
    id?: IntFilter<"budgets"> | number
    project_id?: IntFilter<"budgets"> | number
    amount?: DecimalFilter<"budgets"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableFilter<"budgets"> | string | null
    created_at?: DateTimeNullableFilter<"budgets"> | Date | string | null
    projects?: XOR<ProjectsScalarRelationFilter, projectsWhereInput>
  }

  export type budgetsOrderByWithRelationInput = {
    id?: SortOrder
    project_id?: SortOrder
    amount?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    projects?: projectsOrderByWithRelationInput
    _relevance?: budgetsOrderByRelevanceInput
  }

  export type budgetsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: budgetsWhereInput | budgetsWhereInput[]
    OR?: budgetsWhereInput[]
    NOT?: budgetsWhereInput | budgetsWhereInput[]
    project_id?: IntFilter<"budgets"> | number
    amount?: DecimalFilter<"budgets"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableFilter<"budgets"> | string | null
    created_at?: DateTimeNullableFilter<"budgets"> | Date | string | null
    projects?: XOR<ProjectsScalarRelationFilter, projectsWhereInput>
  }, "id">

  export type budgetsOrderByWithAggregationInput = {
    id?: SortOrder
    project_id?: SortOrder
    amount?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: budgetsCountOrderByAggregateInput
    _avg?: budgetsAvgOrderByAggregateInput
    _max?: budgetsMaxOrderByAggregateInput
    _min?: budgetsMinOrderByAggregateInput
    _sum?: budgetsSumOrderByAggregateInput
  }

  export type budgetsScalarWhereWithAggregatesInput = {
    AND?: budgetsScalarWhereWithAggregatesInput | budgetsScalarWhereWithAggregatesInput[]
    OR?: budgetsScalarWhereWithAggregatesInput[]
    NOT?: budgetsScalarWhereWithAggregatesInput | budgetsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"budgets"> | number
    project_id?: IntWithAggregatesFilter<"budgets"> | number
    amount?: DecimalWithAggregatesFilter<"budgets"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableWithAggregatesFilter<"budgets"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"budgets"> | Date | string | null
  }

  export type channel_membersWhereInput = {
    AND?: channel_membersWhereInput | channel_membersWhereInput[]
    OR?: channel_membersWhereInput[]
    NOT?: channel_membersWhereInput | channel_membersWhereInput[]
    id?: IntFilter<"channel_members"> | number
    channel_id?: IntFilter<"channel_members"> | number
    user_id?: IntFilter<"channel_members"> | number
    channels?: XOR<ChannelsScalarRelationFilter, channelsWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type channel_membersOrderByWithRelationInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
    channels?: channelsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type channel_membersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: channel_membersWhereInput | channel_membersWhereInput[]
    OR?: channel_membersWhereInput[]
    NOT?: channel_membersWhereInput | channel_membersWhereInput[]
    channel_id?: IntFilter<"channel_members"> | number
    user_id?: IntFilter<"channel_members"> | number
    channels?: XOR<ChannelsScalarRelationFilter, channelsWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type channel_membersOrderByWithAggregationInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
    _count?: channel_membersCountOrderByAggregateInput
    _avg?: channel_membersAvgOrderByAggregateInput
    _max?: channel_membersMaxOrderByAggregateInput
    _min?: channel_membersMinOrderByAggregateInput
    _sum?: channel_membersSumOrderByAggregateInput
  }

  export type channel_membersScalarWhereWithAggregatesInput = {
    AND?: channel_membersScalarWhereWithAggregatesInput | channel_membersScalarWhereWithAggregatesInput[]
    OR?: channel_membersScalarWhereWithAggregatesInput[]
    NOT?: channel_membersScalarWhereWithAggregatesInput | channel_membersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"channel_members"> | number
    channel_id?: IntWithAggregatesFilter<"channel_members"> | number
    user_id?: IntWithAggregatesFilter<"channel_members"> | number
  }

  export type channelsWhereInput = {
    AND?: channelsWhereInput | channelsWhereInput[]
    OR?: channelsWhereInput[]
    NOT?: channelsWhereInput | channelsWhereInput[]
    id?: IntFilter<"channels"> | number
    team_id?: IntNullableFilter<"channels"> | number | null
    name?: StringFilter<"channels"> | string
    type?: Enumchannels_typeNullableFilter<"channels"> | $Enums.channels_type | null
    channel_members?: Channel_membersListRelationFilter
    teams?: XOR<TeamsNullableScalarRelationFilter, teamsWhereInput> | null
    messages?: MessagesListRelationFilter
  }

  export type channelsOrderByWithRelationInput = {
    id?: SortOrder
    team_id?: SortOrderInput | SortOrder
    name?: SortOrder
    type?: SortOrderInput | SortOrder
    channel_members?: channel_membersOrderByRelationAggregateInput
    teams?: teamsOrderByWithRelationInput
    messages?: messagesOrderByRelationAggregateInput
    _relevance?: channelsOrderByRelevanceInput
  }

  export type channelsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: channelsWhereInput | channelsWhereInput[]
    OR?: channelsWhereInput[]
    NOT?: channelsWhereInput | channelsWhereInput[]
    team_id?: IntNullableFilter<"channels"> | number | null
    name?: StringFilter<"channels"> | string
    type?: Enumchannels_typeNullableFilter<"channels"> | $Enums.channels_type | null
    channel_members?: Channel_membersListRelationFilter
    teams?: XOR<TeamsNullableScalarRelationFilter, teamsWhereInput> | null
    messages?: MessagesListRelationFilter
  }, "id">

  export type channelsOrderByWithAggregationInput = {
    id?: SortOrder
    team_id?: SortOrderInput | SortOrder
    name?: SortOrder
    type?: SortOrderInput | SortOrder
    _count?: channelsCountOrderByAggregateInput
    _avg?: channelsAvgOrderByAggregateInput
    _max?: channelsMaxOrderByAggregateInput
    _min?: channelsMinOrderByAggregateInput
    _sum?: channelsSumOrderByAggregateInput
  }

  export type channelsScalarWhereWithAggregatesInput = {
    AND?: channelsScalarWhereWithAggregatesInput | channelsScalarWhereWithAggregatesInput[]
    OR?: channelsScalarWhereWithAggregatesInput[]
    NOT?: channelsScalarWhereWithAggregatesInput | channelsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"channels"> | number
    team_id?: IntNullableWithAggregatesFilter<"channels"> | number | null
    name?: StringWithAggregatesFilter<"channels"> | string
    type?: Enumchannels_typeNullableWithAggregatesFilter<"channels"> | $Enums.channels_type | null
  }

  export type clientsWhereInput = {
    AND?: clientsWhereInput | clientsWhereInput[]
    OR?: clientsWhereInput[]
    NOT?: clientsWhereInput | clientsWhereInput[]
    id?: IntFilter<"clients"> | number
    name?: StringFilter<"clients"> | string
    email?: StringNullableFilter<"clients"> | string | null
    phone?: StringNullableFilter<"clients"> | string | null
    company?: StringNullableFilter<"clients"> | string | null
    created_at?: DateTimeNullableFilter<"clients"> | Date | string | null
    leads?: LeadsListRelationFilter
  }

  export type clientsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    leads?: leadsOrderByRelationAggregateInput
    _relevance?: clientsOrderByRelevanceInput
  }

  export type clientsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: clientsWhereInput | clientsWhereInput[]
    OR?: clientsWhereInput[]
    NOT?: clientsWhereInput | clientsWhereInput[]
    name?: StringFilter<"clients"> | string
    email?: StringNullableFilter<"clients"> | string | null
    phone?: StringNullableFilter<"clients"> | string | null
    company?: StringNullableFilter<"clients"> | string | null
    created_at?: DateTimeNullableFilter<"clients"> | Date | string | null
    leads?: LeadsListRelationFilter
  }, "id">

  export type clientsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: clientsCountOrderByAggregateInput
    _avg?: clientsAvgOrderByAggregateInput
    _max?: clientsMaxOrderByAggregateInput
    _min?: clientsMinOrderByAggregateInput
    _sum?: clientsSumOrderByAggregateInput
  }

  export type clientsScalarWhereWithAggregatesInput = {
    AND?: clientsScalarWhereWithAggregatesInput | clientsScalarWhereWithAggregatesInput[]
    OR?: clientsScalarWhereWithAggregatesInput[]
    NOT?: clientsScalarWhereWithAggregatesInput | clientsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"clients"> | number
    name?: StringWithAggregatesFilter<"clients"> | string
    email?: StringNullableWithAggregatesFilter<"clients"> | string | null
    phone?: StringNullableWithAggregatesFilter<"clients"> | string | null
    company?: StringNullableWithAggregatesFilter<"clients"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"clients"> | Date | string | null
  }

  export type contractsWhereInput = {
    AND?: contractsWhereInput | contractsWhereInput[]
    OR?: contractsWhereInput[]
    NOT?: contractsWhereInput | contractsWhereInput[]
    id?: IntFilter<"contracts"> | number
    supplier_id?: IntNullableFilter<"contracts"> | number | null
    project_id?: IntNullableFilter<"contracts"> | number | null
    description?: StringNullableFilter<"contracts"> | string | null
    start_date?: DateTimeNullableFilter<"contracts"> | Date | string | null
    end_date?: DateTimeNullableFilter<"contracts"> | Date | string | null
    amount?: DecimalNullableFilter<"contracts"> | Decimal | DecimalJsLike | number | string | null
    status?: Enumcontracts_statusNullableFilter<"contracts"> | $Enums.contracts_status | null
    suppliers?: XOR<SuppliersNullableScalarRelationFilter, suppliersWhereInput> | null
    projects?: XOR<ProjectsNullableScalarRelationFilter, projectsWhereInput> | null
  }

  export type contractsOrderByWithRelationInput = {
    id?: SortOrder
    supplier_id?: SortOrderInput | SortOrder
    project_id?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    start_date?: SortOrderInput | SortOrder
    end_date?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    suppliers?: suppliersOrderByWithRelationInput
    projects?: projectsOrderByWithRelationInput
    _relevance?: contractsOrderByRelevanceInput
  }

  export type contractsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: contractsWhereInput | contractsWhereInput[]
    OR?: contractsWhereInput[]
    NOT?: contractsWhereInput | contractsWhereInput[]
    supplier_id?: IntNullableFilter<"contracts"> | number | null
    project_id?: IntNullableFilter<"contracts"> | number | null
    description?: StringNullableFilter<"contracts"> | string | null
    start_date?: DateTimeNullableFilter<"contracts"> | Date | string | null
    end_date?: DateTimeNullableFilter<"contracts"> | Date | string | null
    amount?: DecimalNullableFilter<"contracts"> | Decimal | DecimalJsLike | number | string | null
    status?: Enumcontracts_statusNullableFilter<"contracts"> | $Enums.contracts_status | null
    suppliers?: XOR<SuppliersNullableScalarRelationFilter, suppliersWhereInput> | null
    projects?: XOR<ProjectsNullableScalarRelationFilter, projectsWhereInput> | null
  }, "id">

  export type contractsOrderByWithAggregationInput = {
    id?: SortOrder
    supplier_id?: SortOrderInput | SortOrder
    project_id?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    start_date?: SortOrderInput | SortOrder
    end_date?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    _count?: contractsCountOrderByAggregateInput
    _avg?: contractsAvgOrderByAggregateInput
    _max?: contractsMaxOrderByAggregateInput
    _min?: contractsMinOrderByAggregateInput
    _sum?: contractsSumOrderByAggregateInput
  }

  export type contractsScalarWhereWithAggregatesInput = {
    AND?: contractsScalarWhereWithAggregatesInput | contractsScalarWhereWithAggregatesInput[]
    OR?: contractsScalarWhereWithAggregatesInput[]
    NOT?: contractsScalarWhereWithAggregatesInput | contractsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"contracts"> | number
    supplier_id?: IntNullableWithAggregatesFilter<"contracts"> | number | null
    project_id?: IntNullableWithAggregatesFilter<"contracts"> | number | null
    description?: StringNullableWithAggregatesFilter<"contracts"> | string | null
    start_date?: DateTimeNullableWithAggregatesFilter<"contracts"> | Date | string | null
    end_date?: DateTimeNullableWithAggregatesFilter<"contracts"> | Date | string | null
    amount?: DecimalNullableWithAggregatesFilter<"contracts"> | Decimal | DecimalJsLike | number | string | null
    status?: Enumcontracts_statusNullableWithAggregatesFilter<"contracts"> | $Enums.contracts_status | null
  }

  export type costsWhereInput = {
    AND?: costsWhereInput | costsWhereInput[]
    OR?: costsWhereInput[]
    NOT?: costsWhereInput | costsWhereInput[]
    id?: IntFilter<"costs"> | number
    project_id?: IntFilter<"costs"> | number
    description?: StringNullableFilter<"costs"> | string | null
    amount?: DecimalFilter<"costs"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeNullableFilter<"costs"> | Date | string | null
    projects?: XOR<ProjectsScalarRelationFilter, projectsWhereInput>
  }

  export type costsOrderByWithRelationInput = {
    id?: SortOrder
    project_id?: SortOrder
    description?: SortOrderInput | SortOrder
    amount?: SortOrder
    date?: SortOrderInput | SortOrder
    projects?: projectsOrderByWithRelationInput
    _relevance?: costsOrderByRelevanceInput
  }

  export type costsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: costsWhereInput | costsWhereInput[]
    OR?: costsWhereInput[]
    NOT?: costsWhereInput | costsWhereInput[]
    project_id?: IntFilter<"costs"> | number
    description?: StringNullableFilter<"costs"> | string | null
    amount?: DecimalFilter<"costs"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeNullableFilter<"costs"> | Date | string | null
    projects?: XOR<ProjectsScalarRelationFilter, projectsWhereInput>
  }, "id">

  export type costsOrderByWithAggregationInput = {
    id?: SortOrder
    project_id?: SortOrder
    description?: SortOrderInput | SortOrder
    amount?: SortOrder
    date?: SortOrderInput | SortOrder
    _count?: costsCountOrderByAggregateInput
    _avg?: costsAvgOrderByAggregateInput
    _max?: costsMaxOrderByAggregateInput
    _min?: costsMinOrderByAggregateInput
    _sum?: costsSumOrderByAggregateInput
  }

  export type costsScalarWhereWithAggregatesInput = {
    AND?: costsScalarWhereWithAggregatesInput | costsScalarWhereWithAggregatesInput[]
    OR?: costsScalarWhereWithAggregatesInput[]
    NOT?: costsScalarWhereWithAggregatesInput | costsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"costs"> | number
    project_id?: IntWithAggregatesFilter<"costs"> | number
    description?: StringNullableWithAggregatesFilter<"costs"> | string | null
    amount?: DecimalWithAggregatesFilter<"costs"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeNullableWithAggregatesFilter<"costs"> | Date | string | null
  }

  export type documentsWhereInput = {
    AND?: documentsWhereInput | documentsWhereInput[]
    OR?: documentsWhereInput[]
    NOT?: documentsWhereInput | documentsWhereInput[]
    id?: IntFilter<"documents"> | number
    project_id?: IntNullableFilter<"documents"> | number | null
    name?: StringFilter<"documents"> | string
    content?: StringNullableFilter<"documents"> | string | null
    type?: Enumdocuments_typeNullableFilter<"documents"> | $Enums.documents_type | null
    created_by?: IntNullableFilter<"documents"> | number | null
    created_at?: DateTimeNullableFilter<"documents"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"documents"> | Date | string | null
    projects?: XOR<ProjectsNullableScalarRelationFilter, projectsWhereInput> | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type documentsOrderByWithRelationInput = {
    id?: SortOrder
    project_id?: SortOrderInput | SortOrder
    name?: SortOrder
    content?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    projects?: projectsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
    _relevance?: documentsOrderByRelevanceInput
  }

  export type documentsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: documentsWhereInput | documentsWhereInput[]
    OR?: documentsWhereInput[]
    NOT?: documentsWhereInput | documentsWhereInput[]
    project_id?: IntNullableFilter<"documents"> | number | null
    name?: StringFilter<"documents"> | string
    content?: StringNullableFilter<"documents"> | string | null
    type?: Enumdocuments_typeNullableFilter<"documents"> | $Enums.documents_type | null
    created_by?: IntNullableFilter<"documents"> | number | null
    created_at?: DateTimeNullableFilter<"documents"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"documents"> | Date | string | null
    projects?: XOR<ProjectsNullableScalarRelationFilter, projectsWhereInput> | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "id">

  export type documentsOrderByWithAggregationInput = {
    id?: SortOrder
    project_id?: SortOrderInput | SortOrder
    name?: SortOrder
    content?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: documentsCountOrderByAggregateInput
    _avg?: documentsAvgOrderByAggregateInput
    _max?: documentsMaxOrderByAggregateInput
    _min?: documentsMinOrderByAggregateInput
    _sum?: documentsSumOrderByAggregateInput
  }

  export type documentsScalarWhereWithAggregatesInput = {
    AND?: documentsScalarWhereWithAggregatesInput | documentsScalarWhereWithAggregatesInput[]
    OR?: documentsScalarWhereWithAggregatesInput[]
    NOT?: documentsScalarWhereWithAggregatesInput | documentsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"documents"> | number
    project_id?: IntNullableWithAggregatesFilter<"documents"> | number | null
    name?: StringWithAggregatesFilter<"documents"> | string
    content?: StringNullableWithAggregatesFilter<"documents"> | string | null
    type?: Enumdocuments_typeNullableWithAggregatesFilter<"documents"> | $Enums.documents_type | null
    created_by?: IntNullableWithAggregatesFilter<"documents"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"documents"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"documents"> | Date | string | null
  }

  export type eventsWhereInput = {
    AND?: eventsWhereInput | eventsWhereInput[]
    OR?: eventsWhereInput[]
    NOT?: eventsWhereInput | eventsWhereInput[]
    id?: IntFilter<"events"> | number
    project_id?: IntNullableFilter<"events"> | number | null
    name?: StringFilter<"events"> | string
    description?: StringNullableFilter<"events"> | string | null
    start_datetime?: DateTimeNullableFilter<"events"> | Date | string | null
    end_datetime?: DateTimeNullableFilter<"events"> | Date | string | null
    type?: Enumevents_typeNullableFilter<"events"> | $Enums.events_type | null
    projects?: XOR<ProjectsNullableScalarRelationFilter, projectsWhereInput> | null
  }

  export type eventsOrderByWithRelationInput = {
    id?: SortOrder
    project_id?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    start_datetime?: SortOrderInput | SortOrder
    end_datetime?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    projects?: projectsOrderByWithRelationInput
    _relevance?: eventsOrderByRelevanceInput
  }

  export type eventsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: eventsWhereInput | eventsWhereInput[]
    OR?: eventsWhereInput[]
    NOT?: eventsWhereInput | eventsWhereInput[]
    project_id?: IntNullableFilter<"events"> | number | null
    name?: StringFilter<"events"> | string
    description?: StringNullableFilter<"events"> | string | null
    start_datetime?: DateTimeNullableFilter<"events"> | Date | string | null
    end_datetime?: DateTimeNullableFilter<"events"> | Date | string | null
    type?: Enumevents_typeNullableFilter<"events"> | $Enums.events_type | null
    projects?: XOR<ProjectsNullableScalarRelationFilter, projectsWhereInput> | null
  }, "id">

  export type eventsOrderByWithAggregationInput = {
    id?: SortOrder
    project_id?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    start_datetime?: SortOrderInput | SortOrder
    end_datetime?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    _count?: eventsCountOrderByAggregateInput
    _avg?: eventsAvgOrderByAggregateInput
    _max?: eventsMaxOrderByAggregateInput
    _min?: eventsMinOrderByAggregateInput
    _sum?: eventsSumOrderByAggregateInput
  }

  export type eventsScalarWhereWithAggregatesInput = {
    AND?: eventsScalarWhereWithAggregatesInput | eventsScalarWhereWithAggregatesInput[]
    OR?: eventsScalarWhereWithAggregatesInput[]
    NOT?: eventsScalarWhereWithAggregatesInput | eventsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"events"> | number
    project_id?: IntNullableWithAggregatesFilter<"events"> | number | null
    name?: StringWithAggregatesFilter<"events"> | string
    description?: StringNullableWithAggregatesFilter<"events"> | string | null
    start_datetime?: DateTimeNullableWithAggregatesFilter<"events"> | Date | string | null
    end_datetime?: DateTimeNullableWithAggregatesFilter<"events"> | Date | string | null
    type?: Enumevents_typeNullableWithAggregatesFilter<"events"> | $Enums.events_type | null
  }

  export type hr_recordsWhereInput = {
    AND?: hr_recordsWhereInput | hr_recordsWhereInput[]
    OR?: hr_recordsWhereInput[]
    NOT?: hr_recordsWhereInput | hr_recordsWhereInput[]
    id?: IntFilter<"hr_records"> | number
    user_id?: IntFilter<"hr_records"> | number
    type?: Enumhr_records_typeNullableFilter<"hr_records"> | $Enums.hr_records_type | null
    details?: StringNullableFilter<"hr_records"> | string | null
    date?: DateTimeNullableFilter<"hr_records"> | Date | string | null
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type hr_recordsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    users?: usersOrderByWithRelationInput
    _relevance?: hr_recordsOrderByRelevanceInput
  }

  export type hr_recordsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: hr_recordsWhereInput | hr_recordsWhereInput[]
    OR?: hr_recordsWhereInput[]
    NOT?: hr_recordsWhereInput | hr_recordsWhereInput[]
    user_id?: IntFilter<"hr_records"> | number
    type?: Enumhr_records_typeNullableFilter<"hr_records"> | $Enums.hr_records_type | null
    details?: StringNullableFilter<"hr_records"> | string | null
    date?: DateTimeNullableFilter<"hr_records"> | Date | string | null
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type hr_recordsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    _count?: hr_recordsCountOrderByAggregateInput
    _avg?: hr_recordsAvgOrderByAggregateInput
    _max?: hr_recordsMaxOrderByAggregateInput
    _min?: hr_recordsMinOrderByAggregateInput
    _sum?: hr_recordsSumOrderByAggregateInput
  }

  export type hr_recordsScalarWhereWithAggregatesInput = {
    AND?: hr_recordsScalarWhereWithAggregatesInput | hr_recordsScalarWhereWithAggregatesInput[]
    OR?: hr_recordsScalarWhereWithAggregatesInput[]
    NOT?: hr_recordsScalarWhereWithAggregatesInput | hr_recordsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"hr_records"> | number
    user_id?: IntWithAggregatesFilter<"hr_records"> | number
    type?: Enumhr_records_typeNullableWithAggregatesFilter<"hr_records"> | $Enums.hr_records_type | null
    details?: StringNullableWithAggregatesFilter<"hr_records"> | string | null
    date?: DateTimeNullableWithAggregatesFilter<"hr_records"> | Date | string | null
  }

  export type leadsWhereInput = {
    AND?: leadsWhereInput | leadsWhereInput[]
    OR?: leadsWhereInput[]
    NOT?: leadsWhereInput | leadsWhereInput[]
    id?: IntFilter<"leads"> | number
    client_id?: IntNullableFilter<"leads"> | number | null
    project_id?: IntNullableFilter<"leads"> | number | null
    status?: Enumleads_statusNullableFilter<"leads"> | $Enums.leads_status | null
    notes?: StringNullableFilter<"leads"> | string | null
    created_at?: DateTimeNullableFilter<"leads"> | Date | string | null
    clients?: XOR<ClientsNullableScalarRelationFilter, clientsWhereInput> | null
    projects?: XOR<ProjectsNullableScalarRelationFilter, projectsWhereInput> | null
  }

  export type leadsOrderByWithRelationInput = {
    id?: SortOrder
    client_id?: SortOrderInput | SortOrder
    project_id?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    clients?: clientsOrderByWithRelationInput
    projects?: projectsOrderByWithRelationInput
    _relevance?: leadsOrderByRelevanceInput
  }

  export type leadsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: leadsWhereInput | leadsWhereInput[]
    OR?: leadsWhereInput[]
    NOT?: leadsWhereInput | leadsWhereInput[]
    client_id?: IntNullableFilter<"leads"> | number | null
    project_id?: IntNullableFilter<"leads"> | number | null
    status?: Enumleads_statusNullableFilter<"leads"> | $Enums.leads_status | null
    notes?: StringNullableFilter<"leads"> | string | null
    created_at?: DateTimeNullableFilter<"leads"> | Date | string | null
    clients?: XOR<ClientsNullableScalarRelationFilter, clientsWhereInput> | null
    projects?: XOR<ProjectsNullableScalarRelationFilter, projectsWhereInput> | null
  }, "id">

  export type leadsOrderByWithAggregationInput = {
    id?: SortOrder
    client_id?: SortOrderInput | SortOrder
    project_id?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: leadsCountOrderByAggregateInput
    _avg?: leadsAvgOrderByAggregateInput
    _max?: leadsMaxOrderByAggregateInput
    _min?: leadsMinOrderByAggregateInput
    _sum?: leadsSumOrderByAggregateInput
  }

  export type leadsScalarWhereWithAggregatesInput = {
    AND?: leadsScalarWhereWithAggregatesInput | leadsScalarWhereWithAggregatesInput[]
    OR?: leadsScalarWhereWithAggregatesInput[]
    NOT?: leadsScalarWhereWithAggregatesInput | leadsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"leads"> | number
    client_id?: IntNullableWithAggregatesFilter<"leads"> | number | null
    project_id?: IntNullableWithAggregatesFilter<"leads"> | number | null
    status?: Enumleads_statusNullableWithAggregatesFilter<"leads"> | $Enums.leads_status | null
    notes?: StringNullableWithAggregatesFilter<"leads"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"leads"> | Date | string | null
  }

  export type messagesWhereInput = {
    AND?: messagesWhereInput | messagesWhereInput[]
    OR?: messagesWhereInput[]
    NOT?: messagesWhereInput | messagesWhereInput[]
    id?: IntFilter<"messages"> | number
    channel_id?: IntFilter<"messages"> | number
    user_id?: IntFilter<"messages"> | number
    content?: StringFilter<"messages"> | string
    created_at?: DateTimeNullableFilter<"messages"> | Date | string | null
    channels?: XOR<ChannelsScalarRelationFilter, channelsWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type messagesOrderByWithRelationInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrderInput | SortOrder
    channels?: channelsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
    _relevance?: messagesOrderByRelevanceInput
  }

  export type messagesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: messagesWhereInput | messagesWhereInput[]
    OR?: messagesWhereInput[]
    NOT?: messagesWhereInput | messagesWhereInput[]
    channel_id?: IntFilter<"messages"> | number
    user_id?: IntFilter<"messages"> | number
    content?: StringFilter<"messages"> | string
    created_at?: DateTimeNullableFilter<"messages"> | Date | string | null
    channels?: XOR<ChannelsScalarRelationFilter, channelsWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type messagesOrderByWithAggregationInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: messagesCountOrderByAggregateInput
    _avg?: messagesAvgOrderByAggregateInput
    _max?: messagesMaxOrderByAggregateInput
    _min?: messagesMinOrderByAggregateInput
    _sum?: messagesSumOrderByAggregateInput
  }

  export type messagesScalarWhereWithAggregatesInput = {
    AND?: messagesScalarWhereWithAggregatesInput | messagesScalarWhereWithAggregatesInput[]
    OR?: messagesScalarWhereWithAggregatesInput[]
    NOT?: messagesScalarWhereWithAggregatesInput | messagesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"messages"> | number
    channel_id?: IntWithAggregatesFilter<"messages"> | number
    user_id?: IntWithAggregatesFilter<"messages"> | number
    content?: StringWithAggregatesFilter<"messages"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"messages"> | Date | string | null
  }

  export type permissionsWhereInput = {
    AND?: permissionsWhereInput | permissionsWhereInput[]
    OR?: permissionsWhereInput[]
    NOT?: permissionsWhereInput | permissionsWhereInput[]
    id?: IntFilter<"permissions"> | number
    user_id?: IntFilter<"permissions"> | number
    project_id?: IntNullableFilter<"permissions"> | number | null
    permission?: StringFilter<"permissions"> | string
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
    projects?: XOR<ProjectsNullableScalarRelationFilter, projectsWhereInput> | null
  }

  export type permissionsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    project_id?: SortOrderInput | SortOrder
    permission?: SortOrder
    users?: usersOrderByWithRelationInput
    projects?: projectsOrderByWithRelationInput
    _relevance?: permissionsOrderByRelevanceInput
  }

  export type permissionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: permissionsWhereInput | permissionsWhereInput[]
    OR?: permissionsWhereInput[]
    NOT?: permissionsWhereInput | permissionsWhereInput[]
    user_id?: IntFilter<"permissions"> | number
    project_id?: IntNullableFilter<"permissions"> | number | null
    permission?: StringFilter<"permissions"> | string
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
    projects?: XOR<ProjectsNullableScalarRelationFilter, projectsWhereInput> | null
  }, "id">

  export type permissionsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    project_id?: SortOrderInput | SortOrder
    permission?: SortOrder
    _count?: permissionsCountOrderByAggregateInput
    _avg?: permissionsAvgOrderByAggregateInput
    _max?: permissionsMaxOrderByAggregateInput
    _min?: permissionsMinOrderByAggregateInput
    _sum?: permissionsSumOrderByAggregateInput
  }

  export type permissionsScalarWhereWithAggregatesInput = {
    AND?: permissionsScalarWhereWithAggregatesInput | permissionsScalarWhereWithAggregatesInput[]
    OR?: permissionsScalarWhereWithAggregatesInput[]
    NOT?: permissionsScalarWhereWithAggregatesInput | permissionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"permissions"> | number
    user_id?: IntWithAggregatesFilter<"permissions"> | number
    project_id?: IntNullableWithAggregatesFilter<"permissions"> | number | null
    permission?: StringWithAggregatesFilter<"permissions"> | string
  }

  export type project_resourcesWhereInput = {
    AND?: project_resourcesWhereInput | project_resourcesWhereInput[]
    OR?: project_resourcesWhereInput[]
    NOT?: project_resourcesWhereInput | project_resourcesWhereInput[]
    id?: IntFilter<"project_resources"> | number
    project_id?: IntFilter<"project_resources"> | number
    resource_id?: IntFilter<"project_resources"> | number
    assigned_from?: DateTimeNullableFilter<"project_resources"> | Date | string | null
    assigned_to?: DateTimeNullableFilter<"project_resources"> | Date | string | null
    projects?: XOR<ProjectsScalarRelationFilter, projectsWhereInput>
    resources?: XOR<ResourcesScalarRelationFilter, resourcesWhereInput>
  }

  export type project_resourcesOrderByWithRelationInput = {
    id?: SortOrder
    project_id?: SortOrder
    resource_id?: SortOrder
    assigned_from?: SortOrderInput | SortOrder
    assigned_to?: SortOrderInput | SortOrder
    projects?: projectsOrderByWithRelationInput
    resources?: resourcesOrderByWithRelationInput
  }

  export type project_resourcesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: project_resourcesWhereInput | project_resourcesWhereInput[]
    OR?: project_resourcesWhereInput[]
    NOT?: project_resourcesWhereInput | project_resourcesWhereInput[]
    project_id?: IntFilter<"project_resources"> | number
    resource_id?: IntFilter<"project_resources"> | number
    assigned_from?: DateTimeNullableFilter<"project_resources"> | Date | string | null
    assigned_to?: DateTimeNullableFilter<"project_resources"> | Date | string | null
    projects?: XOR<ProjectsScalarRelationFilter, projectsWhereInput>
    resources?: XOR<ResourcesScalarRelationFilter, resourcesWhereInput>
  }, "id">

  export type project_resourcesOrderByWithAggregationInput = {
    id?: SortOrder
    project_id?: SortOrder
    resource_id?: SortOrder
    assigned_from?: SortOrderInput | SortOrder
    assigned_to?: SortOrderInput | SortOrder
    _count?: project_resourcesCountOrderByAggregateInput
    _avg?: project_resourcesAvgOrderByAggregateInput
    _max?: project_resourcesMaxOrderByAggregateInput
    _min?: project_resourcesMinOrderByAggregateInput
    _sum?: project_resourcesSumOrderByAggregateInput
  }

  export type project_resourcesScalarWhereWithAggregatesInput = {
    AND?: project_resourcesScalarWhereWithAggregatesInput | project_resourcesScalarWhereWithAggregatesInput[]
    OR?: project_resourcesScalarWhereWithAggregatesInput[]
    NOT?: project_resourcesScalarWhereWithAggregatesInput | project_resourcesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"project_resources"> | number
    project_id?: IntWithAggregatesFilter<"project_resources"> | number
    resource_id?: IntWithAggregatesFilter<"project_resources"> | number
    assigned_from?: DateTimeNullableWithAggregatesFilter<"project_resources"> | Date | string | null
    assigned_to?: DateTimeNullableWithAggregatesFilter<"project_resources"> | Date | string | null
  }

  export type projectsWhereInput = {
    AND?: projectsWhereInput | projectsWhereInput[]
    OR?: projectsWhereInput[]
    NOT?: projectsWhereInput | projectsWhereInput[]
    id?: IntFilter<"projects"> | number
    team_id?: IntNullableFilter<"projects"> | number | null
    name?: StringFilter<"projects"> | string
    description?: StringNullableFilter<"projects"> | string | null
    status?: Enumprojects_statusNullableFilter<"projects"> | $Enums.projects_status | null
    start_date?: DateTimeNullableFilter<"projects"> | Date | string | null
    end_date?: DateTimeNullableFilter<"projects"> | Date | string | null
    created_at?: DateTimeNullableFilter<"projects"> | Date | string | null
    budgets?: BudgetsListRelationFilter
    contracts?: ContractsListRelationFilter
    costs?: CostsListRelationFilter
    documents?: DocumentsListRelationFilter
    events?: EventsListRelationFilter
    leads?: LeadsListRelationFilter
    permissions?: PermissionsListRelationFilter
    project_resources?: Project_resourcesListRelationFilter
    teams?: XOR<TeamsNullableScalarRelationFilter, teamsWhereInput> | null
    reports?: ReportsListRelationFilter
    sprints?: SprintsListRelationFilter
    tasks?: TasksListRelationFilter
    tickets?: TicketsListRelationFilter
  }

  export type projectsOrderByWithRelationInput = {
    id?: SortOrder
    team_id?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    start_date?: SortOrderInput | SortOrder
    end_date?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    budgets?: budgetsOrderByRelationAggregateInput
    contracts?: contractsOrderByRelationAggregateInput
    costs?: costsOrderByRelationAggregateInput
    documents?: documentsOrderByRelationAggregateInput
    events?: eventsOrderByRelationAggregateInput
    leads?: leadsOrderByRelationAggregateInput
    permissions?: permissionsOrderByRelationAggregateInput
    project_resources?: project_resourcesOrderByRelationAggregateInput
    teams?: teamsOrderByWithRelationInput
    reports?: reportsOrderByRelationAggregateInput
    sprints?: sprintsOrderByRelationAggregateInput
    tasks?: tasksOrderByRelationAggregateInput
    tickets?: ticketsOrderByRelationAggregateInput
    _relevance?: projectsOrderByRelevanceInput
  }

  export type projectsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: projectsWhereInput | projectsWhereInput[]
    OR?: projectsWhereInput[]
    NOT?: projectsWhereInput | projectsWhereInput[]
    team_id?: IntNullableFilter<"projects"> | number | null
    name?: StringFilter<"projects"> | string
    description?: StringNullableFilter<"projects"> | string | null
    status?: Enumprojects_statusNullableFilter<"projects"> | $Enums.projects_status | null
    start_date?: DateTimeNullableFilter<"projects"> | Date | string | null
    end_date?: DateTimeNullableFilter<"projects"> | Date | string | null
    created_at?: DateTimeNullableFilter<"projects"> | Date | string | null
    budgets?: BudgetsListRelationFilter
    contracts?: ContractsListRelationFilter
    costs?: CostsListRelationFilter
    documents?: DocumentsListRelationFilter
    events?: EventsListRelationFilter
    leads?: LeadsListRelationFilter
    permissions?: PermissionsListRelationFilter
    project_resources?: Project_resourcesListRelationFilter
    teams?: XOR<TeamsNullableScalarRelationFilter, teamsWhereInput> | null
    reports?: ReportsListRelationFilter
    sprints?: SprintsListRelationFilter
    tasks?: TasksListRelationFilter
    tickets?: TicketsListRelationFilter
  }, "id">

  export type projectsOrderByWithAggregationInput = {
    id?: SortOrder
    team_id?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    start_date?: SortOrderInput | SortOrder
    end_date?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: projectsCountOrderByAggregateInput
    _avg?: projectsAvgOrderByAggregateInput
    _max?: projectsMaxOrderByAggregateInput
    _min?: projectsMinOrderByAggregateInput
    _sum?: projectsSumOrderByAggregateInput
  }

  export type projectsScalarWhereWithAggregatesInput = {
    AND?: projectsScalarWhereWithAggregatesInput | projectsScalarWhereWithAggregatesInput[]
    OR?: projectsScalarWhereWithAggregatesInput[]
    NOT?: projectsScalarWhereWithAggregatesInput | projectsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"projects"> | number
    team_id?: IntNullableWithAggregatesFilter<"projects"> | number | null
    name?: StringWithAggregatesFilter<"projects"> | string
    description?: StringNullableWithAggregatesFilter<"projects"> | string | null
    status?: Enumprojects_statusNullableWithAggregatesFilter<"projects"> | $Enums.projects_status | null
    start_date?: DateTimeNullableWithAggregatesFilter<"projects"> | Date | string | null
    end_date?: DateTimeNullableWithAggregatesFilter<"projects"> | Date | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"projects"> | Date | string | null
  }

  export type reportsWhereInput = {
    AND?: reportsWhereInput | reportsWhereInput[]
    OR?: reportsWhereInput[]
    NOT?: reportsWhereInput | reportsWhereInput[]
    id?: IntFilter<"reports"> | number
    project_id?: IntNullableFilter<"reports"> | number | null
    team_id?: IntNullableFilter<"reports"> | number | null
    user_id?: IntNullableFilter<"reports"> | number | null
    type?: Enumreports_typeNullableFilter<"reports"> | $Enums.reports_type | null
    data?: JsonNullableFilter<"reports">
    created_at?: DateTimeNullableFilter<"reports"> | Date | string | null
    projects?: XOR<ProjectsNullableScalarRelationFilter, projectsWhereInput> | null
    teams?: XOR<TeamsNullableScalarRelationFilter, teamsWhereInput> | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type reportsOrderByWithRelationInput = {
    id?: SortOrder
    project_id?: SortOrderInput | SortOrder
    team_id?: SortOrderInput | SortOrder
    user_id?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    projects?: projectsOrderByWithRelationInput
    teams?: teamsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type reportsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: reportsWhereInput | reportsWhereInput[]
    OR?: reportsWhereInput[]
    NOT?: reportsWhereInput | reportsWhereInput[]
    project_id?: IntNullableFilter<"reports"> | number | null
    team_id?: IntNullableFilter<"reports"> | number | null
    user_id?: IntNullableFilter<"reports"> | number | null
    type?: Enumreports_typeNullableFilter<"reports"> | $Enums.reports_type | null
    data?: JsonNullableFilter<"reports">
    created_at?: DateTimeNullableFilter<"reports"> | Date | string | null
    projects?: XOR<ProjectsNullableScalarRelationFilter, projectsWhereInput> | null
    teams?: XOR<TeamsNullableScalarRelationFilter, teamsWhereInput> | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "id">

  export type reportsOrderByWithAggregationInput = {
    id?: SortOrder
    project_id?: SortOrderInput | SortOrder
    team_id?: SortOrderInput | SortOrder
    user_id?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: reportsCountOrderByAggregateInput
    _avg?: reportsAvgOrderByAggregateInput
    _max?: reportsMaxOrderByAggregateInput
    _min?: reportsMinOrderByAggregateInput
    _sum?: reportsSumOrderByAggregateInput
  }

  export type reportsScalarWhereWithAggregatesInput = {
    AND?: reportsScalarWhereWithAggregatesInput | reportsScalarWhereWithAggregatesInput[]
    OR?: reportsScalarWhereWithAggregatesInput[]
    NOT?: reportsScalarWhereWithAggregatesInput | reportsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"reports"> | number
    project_id?: IntNullableWithAggregatesFilter<"reports"> | number | null
    team_id?: IntNullableWithAggregatesFilter<"reports"> | number | null
    user_id?: IntNullableWithAggregatesFilter<"reports"> | number | null
    type?: Enumreports_typeNullableWithAggregatesFilter<"reports"> | $Enums.reports_type | null
    data?: JsonNullableWithAggregatesFilter<"reports">
    created_at?: DateTimeNullableWithAggregatesFilter<"reports"> | Date | string | null
  }

  export type resourcesWhereInput = {
    AND?: resourcesWhereInput | resourcesWhereInput[]
    OR?: resourcesWhereInput[]
    NOT?: resourcesWhereInput | resourcesWhereInput[]
    id?: IntFilter<"resources"> | number
    name?: StringFilter<"resources"> | string
    type?: Enumresources_typeNullableFilter<"resources"> | $Enums.resources_type | null
    user_id?: IntNullableFilter<"resources"> | number | null
    team_id?: IntNullableFilter<"resources"> | number | null
    availability?: Enumresources_availabilityNullableFilter<"resources"> | $Enums.resources_availability | null
    project_resources?: Project_resourcesListRelationFilter
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
    teams?: XOR<TeamsNullableScalarRelationFilter, teamsWhereInput> | null
  }

  export type resourcesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrderInput | SortOrder
    user_id?: SortOrderInput | SortOrder
    team_id?: SortOrderInput | SortOrder
    availability?: SortOrderInput | SortOrder
    project_resources?: project_resourcesOrderByRelationAggregateInput
    users?: usersOrderByWithRelationInput
    teams?: teamsOrderByWithRelationInput
    _relevance?: resourcesOrderByRelevanceInput
  }

  export type resourcesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: resourcesWhereInput | resourcesWhereInput[]
    OR?: resourcesWhereInput[]
    NOT?: resourcesWhereInput | resourcesWhereInput[]
    name?: StringFilter<"resources"> | string
    type?: Enumresources_typeNullableFilter<"resources"> | $Enums.resources_type | null
    user_id?: IntNullableFilter<"resources"> | number | null
    team_id?: IntNullableFilter<"resources"> | number | null
    availability?: Enumresources_availabilityNullableFilter<"resources"> | $Enums.resources_availability | null
    project_resources?: Project_resourcesListRelationFilter
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
    teams?: XOR<TeamsNullableScalarRelationFilter, teamsWhereInput> | null
  }, "id">

  export type resourcesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrderInput | SortOrder
    user_id?: SortOrderInput | SortOrder
    team_id?: SortOrderInput | SortOrder
    availability?: SortOrderInput | SortOrder
    _count?: resourcesCountOrderByAggregateInput
    _avg?: resourcesAvgOrderByAggregateInput
    _max?: resourcesMaxOrderByAggregateInput
    _min?: resourcesMinOrderByAggregateInput
    _sum?: resourcesSumOrderByAggregateInput
  }

  export type resourcesScalarWhereWithAggregatesInput = {
    AND?: resourcesScalarWhereWithAggregatesInput | resourcesScalarWhereWithAggregatesInput[]
    OR?: resourcesScalarWhereWithAggregatesInput[]
    NOT?: resourcesScalarWhereWithAggregatesInput | resourcesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"resources"> | number
    name?: StringWithAggregatesFilter<"resources"> | string
    type?: Enumresources_typeNullableWithAggregatesFilter<"resources"> | $Enums.resources_type | null
    user_id?: IntNullableWithAggregatesFilter<"resources"> | number | null
    team_id?: IntNullableWithAggregatesFilter<"resources"> | number | null
    availability?: Enumresources_availabilityNullableWithAggregatesFilter<"resources"> | $Enums.resources_availability | null
  }

  export type sprint_tasksWhereInput = {
    AND?: sprint_tasksWhereInput | sprint_tasksWhereInput[]
    OR?: sprint_tasksWhereInput[]
    NOT?: sprint_tasksWhereInput | sprint_tasksWhereInput[]
    id?: IntFilter<"sprint_tasks"> | number
    sprint_id?: IntFilter<"sprint_tasks"> | number
    task_id?: IntFilter<"sprint_tasks"> | number
    sprints?: XOR<SprintsScalarRelationFilter, sprintsWhereInput>
    tasks?: XOR<TasksScalarRelationFilter, tasksWhereInput>
  }

  export type sprint_tasksOrderByWithRelationInput = {
    id?: SortOrder
    sprint_id?: SortOrder
    task_id?: SortOrder
    sprints?: sprintsOrderByWithRelationInput
    tasks?: tasksOrderByWithRelationInput
  }

  export type sprint_tasksWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: sprint_tasksWhereInput | sprint_tasksWhereInput[]
    OR?: sprint_tasksWhereInput[]
    NOT?: sprint_tasksWhereInput | sprint_tasksWhereInput[]
    sprint_id?: IntFilter<"sprint_tasks"> | number
    task_id?: IntFilter<"sprint_tasks"> | number
    sprints?: XOR<SprintsScalarRelationFilter, sprintsWhereInput>
    tasks?: XOR<TasksScalarRelationFilter, tasksWhereInput>
  }, "id">

  export type sprint_tasksOrderByWithAggregationInput = {
    id?: SortOrder
    sprint_id?: SortOrder
    task_id?: SortOrder
    _count?: sprint_tasksCountOrderByAggregateInput
    _avg?: sprint_tasksAvgOrderByAggregateInput
    _max?: sprint_tasksMaxOrderByAggregateInput
    _min?: sprint_tasksMinOrderByAggregateInput
    _sum?: sprint_tasksSumOrderByAggregateInput
  }

  export type sprint_tasksScalarWhereWithAggregatesInput = {
    AND?: sprint_tasksScalarWhereWithAggregatesInput | sprint_tasksScalarWhereWithAggregatesInput[]
    OR?: sprint_tasksScalarWhereWithAggregatesInput[]
    NOT?: sprint_tasksScalarWhereWithAggregatesInput | sprint_tasksScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"sprint_tasks"> | number
    sprint_id?: IntWithAggregatesFilter<"sprint_tasks"> | number
    task_id?: IntWithAggregatesFilter<"sprint_tasks"> | number
  }

  export type sprintsWhereInput = {
    AND?: sprintsWhereInput | sprintsWhereInput[]
    OR?: sprintsWhereInput[]
    NOT?: sprintsWhereInput | sprintsWhereInput[]
    id?: IntFilter<"sprints"> | number
    project_id?: IntFilter<"sprints"> | number
    name?: StringFilter<"sprints"> | string
    start_date?: DateTimeNullableFilter<"sprints"> | Date | string | null
    end_date?: DateTimeNullableFilter<"sprints"> | Date | string | null
    goal?: StringNullableFilter<"sprints"> | string | null
    status?: Enumsprints_statusNullableFilter<"sprints"> | $Enums.sprints_status | null
    sprint_tasks?: Sprint_tasksListRelationFilter
    projects?: XOR<ProjectsScalarRelationFilter, projectsWhereInput>
  }

  export type sprintsOrderByWithRelationInput = {
    id?: SortOrder
    project_id?: SortOrder
    name?: SortOrder
    start_date?: SortOrderInput | SortOrder
    end_date?: SortOrderInput | SortOrder
    goal?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    sprint_tasks?: sprint_tasksOrderByRelationAggregateInput
    projects?: projectsOrderByWithRelationInput
    _relevance?: sprintsOrderByRelevanceInput
  }

  export type sprintsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: sprintsWhereInput | sprintsWhereInput[]
    OR?: sprintsWhereInput[]
    NOT?: sprintsWhereInput | sprintsWhereInput[]
    project_id?: IntFilter<"sprints"> | number
    name?: StringFilter<"sprints"> | string
    start_date?: DateTimeNullableFilter<"sprints"> | Date | string | null
    end_date?: DateTimeNullableFilter<"sprints"> | Date | string | null
    goal?: StringNullableFilter<"sprints"> | string | null
    status?: Enumsprints_statusNullableFilter<"sprints"> | $Enums.sprints_status | null
    sprint_tasks?: Sprint_tasksListRelationFilter
    projects?: XOR<ProjectsScalarRelationFilter, projectsWhereInput>
  }, "id">

  export type sprintsOrderByWithAggregationInput = {
    id?: SortOrder
    project_id?: SortOrder
    name?: SortOrder
    start_date?: SortOrderInput | SortOrder
    end_date?: SortOrderInput | SortOrder
    goal?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    _count?: sprintsCountOrderByAggregateInput
    _avg?: sprintsAvgOrderByAggregateInput
    _max?: sprintsMaxOrderByAggregateInput
    _min?: sprintsMinOrderByAggregateInput
    _sum?: sprintsSumOrderByAggregateInput
  }

  export type sprintsScalarWhereWithAggregatesInput = {
    AND?: sprintsScalarWhereWithAggregatesInput | sprintsScalarWhereWithAggregatesInput[]
    OR?: sprintsScalarWhereWithAggregatesInput[]
    NOT?: sprintsScalarWhereWithAggregatesInput | sprintsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"sprints"> | number
    project_id?: IntWithAggregatesFilter<"sprints"> | number
    name?: StringWithAggregatesFilter<"sprints"> | string
    start_date?: DateTimeNullableWithAggregatesFilter<"sprints"> | Date | string | null
    end_date?: DateTimeNullableWithAggregatesFilter<"sprints"> | Date | string | null
    goal?: StringNullableWithAggregatesFilter<"sprints"> | string | null
    status?: Enumsprints_statusNullableWithAggregatesFilter<"sprints"> | $Enums.sprints_status | null
  }

  export type suppliersWhereInput = {
    AND?: suppliersWhereInput | suppliersWhereInput[]
    OR?: suppliersWhereInput[]
    NOT?: suppliersWhereInput | suppliersWhereInput[]
    id?: IntFilter<"suppliers"> | number
    name?: StringFilter<"suppliers"> | string
    contact_info?: StringNullableFilter<"suppliers"> | string | null
    contracts?: ContractsListRelationFilter
  }

  export type suppliersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    contact_info?: SortOrderInput | SortOrder
    contracts?: contractsOrderByRelationAggregateInput
    _relevance?: suppliersOrderByRelevanceInput
  }

  export type suppliersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: suppliersWhereInput | suppliersWhereInput[]
    OR?: suppliersWhereInput[]
    NOT?: suppliersWhereInput | suppliersWhereInput[]
    name?: StringFilter<"suppliers"> | string
    contact_info?: StringNullableFilter<"suppliers"> | string | null
    contracts?: ContractsListRelationFilter
  }, "id">

  export type suppliersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    contact_info?: SortOrderInput | SortOrder
    _count?: suppliersCountOrderByAggregateInput
    _avg?: suppliersAvgOrderByAggregateInput
    _max?: suppliersMaxOrderByAggregateInput
    _min?: suppliersMinOrderByAggregateInput
    _sum?: suppliersSumOrderByAggregateInput
  }

  export type suppliersScalarWhereWithAggregatesInput = {
    AND?: suppliersScalarWhereWithAggregatesInput | suppliersScalarWhereWithAggregatesInput[]
    OR?: suppliersScalarWhereWithAggregatesInput[]
    NOT?: suppliersScalarWhereWithAggregatesInput | suppliersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"suppliers"> | number
    name?: StringWithAggregatesFilter<"suppliers"> | string
    contact_info?: StringNullableWithAggregatesFilter<"suppliers"> | string | null
  }

  export type task_assigneesWhereInput = {
    AND?: task_assigneesWhereInput | task_assigneesWhereInput[]
    OR?: task_assigneesWhereInput[]
    NOT?: task_assigneesWhereInput | task_assigneesWhereInput[]
    id?: IntFilter<"task_assignees"> | number
    task_id?: IntFilter<"task_assignees"> | number
    user_id?: IntFilter<"task_assignees"> | number
    tasks?: XOR<TasksScalarRelationFilter, tasksWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type task_assigneesOrderByWithRelationInput = {
    id?: SortOrder
    task_id?: SortOrder
    user_id?: SortOrder
    tasks?: tasksOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type task_assigneesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: task_assigneesWhereInput | task_assigneesWhereInput[]
    OR?: task_assigneesWhereInput[]
    NOT?: task_assigneesWhereInput | task_assigneesWhereInput[]
    task_id?: IntFilter<"task_assignees"> | number
    user_id?: IntFilter<"task_assignees"> | number
    tasks?: XOR<TasksScalarRelationFilter, tasksWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type task_assigneesOrderByWithAggregationInput = {
    id?: SortOrder
    task_id?: SortOrder
    user_id?: SortOrder
    _count?: task_assigneesCountOrderByAggregateInput
    _avg?: task_assigneesAvgOrderByAggregateInput
    _max?: task_assigneesMaxOrderByAggregateInput
    _min?: task_assigneesMinOrderByAggregateInput
    _sum?: task_assigneesSumOrderByAggregateInput
  }

  export type task_assigneesScalarWhereWithAggregatesInput = {
    AND?: task_assigneesScalarWhereWithAggregatesInput | task_assigneesScalarWhereWithAggregatesInput[]
    OR?: task_assigneesScalarWhereWithAggregatesInput[]
    NOT?: task_assigneesScalarWhereWithAggregatesInput | task_assigneesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"task_assignees"> | number
    task_id?: IntWithAggregatesFilter<"task_assignees"> | number
    user_id?: IntWithAggregatesFilter<"task_assignees"> | number
  }

  export type task_label_linksWhereInput = {
    AND?: task_label_linksWhereInput | task_label_linksWhereInput[]
    OR?: task_label_linksWhereInput[]
    NOT?: task_label_linksWhereInput | task_label_linksWhereInput[]
    id?: IntFilter<"task_label_links"> | number
    task_id?: IntFilter<"task_label_links"> | number
    label_id?: IntFilter<"task_label_links"> | number
    tasks?: XOR<TasksScalarRelationFilter, tasksWhereInput>
    task_labels?: XOR<Task_labelsScalarRelationFilter, task_labelsWhereInput>
  }

  export type task_label_linksOrderByWithRelationInput = {
    id?: SortOrder
    task_id?: SortOrder
    label_id?: SortOrder
    tasks?: tasksOrderByWithRelationInput
    task_labels?: task_labelsOrderByWithRelationInput
  }

  export type task_label_linksWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: task_label_linksWhereInput | task_label_linksWhereInput[]
    OR?: task_label_linksWhereInput[]
    NOT?: task_label_linksWhereInput | task_label_linksWhereInput[]
    task_id?: IntFilter<"task_label_links"> | number
    label_id?: IntFilter<"task_label_links"> | number
    tasks?: XOR<TasksScalarRelationFilter, tasksWhereInput>
    task_labels?: XOR<Task_labelsScalarRelationFilter, task_labelsWhereInput>
  }, "id">

  export type task_label_linksOrderByWithAggregationInput = {
    id?: SortOrder
    task_id?: SortOrder
    label_id?: SortOrder
    _count?: task_label_linksCountOrderByAggregateInput
    _avg?: task_label_linksAvgOrderByAggregateInput
    _max?: task_label_linksMaxOrderByAggregateInput
    _min?: task_label_linksMinOrderByAggregateInput
    _sum?: task_label_linksSumOrderByAggregateInput
  }

  export type task_label_linksScalarWhereWithAggregatesInput = {
    AND?: task_label_linksScalarWhereWithAggregatesInput | task_label_linksScalarWhereWithAggregatesInput[]
    OR?: task_label_linksScalarWhereWithAggregatesInput[]
    NOT?: task_label_linksScalarWhereWithAggregatesInput | task_label_linksScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"task_label_links"> | number
    task_id?: IntWithAggregatesFilter<"task_label_links"> | number
    label_id?: IntWithAggregatesFilter<"task_label_links"> | number
  }

  export type task_labelsWhereInput = {
    AND?: task_labelsWhereInput | task_labelsWhereInput[]
    OR?: task_labelsWhereInput[]
    NOT?: task_labelsWhereInput | task_labelsWhereInput[]
    id?: IntFilter<"task_labels"> | number
    name?: StringFilter<"task_labels"> | string
    color?: StringNullableFilter<"task_labels"> | string | null
    task_label_links?: Task_label_linksListRelationFilter
  }

  export type task_labelsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrderInput | SortOrder
    task_label_links?: task_label_linksOrderByRelationAggregateInput
    _relevance?: task_labelsOrderByRelevanceInput
  }

  export type task_labelsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: task_labelsWhereInput | task_labelsWhereInput[]
    OR?: task_labelsWhereInput[]
    NOT?: task_labelsWhereInput | task_labelsWhereInput[]
    name?: StringFilter<"task_labels"> | string
    color?: StringNullableFilter<"task_labels"> | string | null
    task_label_links?: Task_label_linksListRelationFilter
  }, "id">

  export type task_labelsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrderInput | SortOrder
    _count?: task_labelsCountOrderByAggregateInput
    _avg?: task_labelsAvgOrderByAggregateInput
    _max?: task_labelsMaxOrderByAggregateInput
    _min?: task_labelsMinOrderByAggregateInput
    _sum?: task_labelsSumOrderByAggregateInput
  }

  export type task_labelsScalarWhereWithAggregatesInput = {
    AND?: task_labelsScalarWhereWithAggregatesInput | task_labelsScalarWhereWithAggregatesInput[]
    OR?: task_labelsScalarWhereWithAggregatesInput[]
    NOT?: task_labelsScalarWhereWithAggregatesInput | task_labelsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"task_labels"> | number
    name?: StringWithAggregatesFilter<"task_labels"> | string
    color?: StringNullableWithAggregatesFilter<"task_labels"> | string | null
  }

  export type tasksWhereInput = {
    AND?: tasksWhereInput | tasksWhereInput[]
    OR?: tasksWhereInput[]
    NOT?: tasksWhereInput | tasksWhereInput[]
    id?: IntFilter<"tasks"> | number
    project_id?: IntFilter<"tasks"> | number
    parent_task_id?: IntNullableFilter<"tasks"> | number | null
    name?: StringFilter<"tasks"> | string
    description?: StringNullableFilter<"tasks"> | string | null
    status?: Enumtasks_statusNullableFilter<"tasks"> | $Enums.tasks_status | null
    priority?: Enumtasks_priorityNullableFilter<"tasks"> | $Enums.tasks_priority | null
    due_date?: DateTimeNullableFilter<"tasks"> | Date | string | null
    wip_limit?: IntNullableFilter<"tasks"> | number | null
    swimlane?: StringNullableFilter<"tasks"> | string | null
    created_by?: IntNullableFilter<"tasks"> | number | null
    created_at?: DateTimeNullableFilter<"tasks"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"tasks"> | Date | string | null
    sprint_tasks?: Sprint_tasksListRelationFilter
    task_assignees?: Task_assigneesListRelationFilter
    task_label_links?: Task_label_linksListRelationFilter
    projects?: XOR<ProjectsScalarRelationFilter, projectsWhereInput>
    tasks?: XOR<TasksNullableScalarRelationFilter, tasksWhereInput> | null
    other_tasks?: TasksListRelationFilter
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type tasksOrderByWithRelationInput = {
    id?: SortOrder
    project_id?: SortOrder
    parent_task_id?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    due_date?: SortOrderInput | SortOrder
    wip_limit?: SortOrderInput | SortOrder
    swimlane?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    sprint_tasks?: sprint_tasksOrderByRelationAggregateInput
    task_assignees?: task_assigneesOrderByRelationAggregateInput
    task_label_links?: task_label_linksOrderByRelationAggregateInput
    projects?: projectsOrderByWithRelationInput
    tasks?: tasksOrderByWithRelationInput
    other_tasks?: tasksOrderByRelationAggregateInput
    users?: usersOrderByWithRelationInput
    _relevance?: tasksOrderByRelevanceInput
  }

  export type tasksWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: tasksWhereInput | tasksWhereInput[]
    OR?: tasksWhereInput[]
    NOT?: tasksWhereInput | tasksWhereInput[]
    project_id?: IntFilter<"tasks"> | number
    parent_task_id?: IntNullableFilter<"tasks"> | number | null
    name?: StringFilter<"tasks"> | string
    description?: StringNullableFilter<"tasks"> | string | null
    status?: Enumtasks_statusNullableFilter<"tasks"> | $Enums.tasks_status | null
    priority?: Enumtasks_priorityNullableFilter<"tasks"> | $Enums.tasks_priority | null
    due_date?: DateTimeNullableFilter<"tasks"> | Date | string | null
    wip_limit?: IntNullableFilter<"tasks"> | number | null
    swimlane?: StringNullableFilter<"tasks"> | string | null
    created_by?: IntNullableFilter<"tasks"> | number | null
    created_at?: DateTimeNullableFilter<"tasks"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"tasks"> | Date | string | null
    sprint_tasks?: Sprint_tasksListRelationFilter
    task_assignees?: Task_assigneesListRelationFilter
    task_label_links?: Task_label_linksListRelationFilter
    projects?: XOR<ProjectsScalarRelationFilter, projectsWhereInput>
    tasks?: XOR<TasksNullableScalarRelationFilter, tasksWhereInput> | null
    other_tasks?: TasksListRelationFilter
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "id">

  export type tasksOrderByWithAggregationInput = {
    id?: SortOrder
    project_id?: SortOrder
    parent_task_id?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    due_date?: SortOrderInput | SortOrder
    wip_limit?: SortOrderInput | SortOrder
    swimlane?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: tasksCountOrderByAggregateInput
    _avg?: tasksAvgOrderByAggregateInput
    _max?: tasksMaxOrderByAggregateInput
    _min?: tasksMinOrderByAggregateInput
    _sum?: tasksSumOrderByAggregateInput
  }

  export type tasksScalarWhereWithAggregatesInput = {
    AND?: tasksScalarWhereWithAggregatesInput | tasksScalarWhereWithAggregatesInput[]
    OR?: tasksScalarWhereWithAggregatesInput[]
    NOT?: tasksScalarWhereWithAggregatesInput | tasksScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"tasks"> | number
    project_id?: IntWithAggregatesFilter<"tasks"> | number
    parent_task_id?: IntNullableWithAggregatesFilter<"tasks"> | number | null
    name?: StringWithAggregatesFilter<"tasks"> | string
    description?: StringNullableWithAggregatesFilter<"tasks"> | string | null
    status?: Enumtasks_statusNullableWithAggregatesFilter<"tasks"> | $Enums.tasks_status | null
    priority?: Enumtasks_priorityNullableWithAggregatesFilter<"tasks"> | $Enums.tasks_priority | null
    due_date?: DateTimeNullableWithAggregatesFilter<"tasks"> | Date | string | null
    wip_limit?: IntNullableWithAggregatesFilter<"tasks"> | number | null
    swimlane?: StringNullableWithAggregatesFilter<"tasks"> | string | null
    created_by?: IntNullableWithAggregatesFilter<"tasks"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"tasks"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"tasks"> | Date | string | null
  }

  export type team_membersWhereInput = {
    AND?: team_membersWhereInput | team_membersWhereInput[]
    OR?: team_membersWhereInput[]
    NOT?: team_membersWhereInput | team_membersWhereInput[]
    id?: IntFilter<"team_members"> | number
    team_id?: IntFilter<"team_members"> | number
    user_id?: IntFilter<"team_members"> | number
    role?: Enumteam_members_roleNullableFilter<"team_members"> | $Enums.team_members_role | null
    teams?: XOR<TeamsScalarRelationFilter, teamsWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type team_membersOrderByWithRelationInput = {
    id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
    role?: SortOrderInput | SortOrder
    teams?: teamsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type team_membersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: team_membersWhereInput | team_membersWhereInput[]
    OR?: team_membersWhereInput[]
    NOT?: team_membersWhereInput | team_membersWhereInput[]
    team_id?: IntFilter<"team_members"> | number
    user_id?: IntFilter<"team_members"> | number
    role?: Enumteam_members_roleNullableFilter<"team_members"> | $Enums.team_members_role | null
    teams?: XOR<TeamsScalarRelationFilter, teamsWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type team_membersOrderByWithAggregationInput = {
    id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
    role?: SortOrderInput | SortOrder
    _count?: team_membersCountOrderByAggregateInput
    _avg?: team_membersAvgOrderByAggregateInput
    _max?: team_membersMaxOrderByAggregateInput
    _min?: team_membersMinOrderByAggregateInput
    _sum?: team_membersSumOrderByAggregateInput
  }

  export type team_membersScalarWhereWithAggregatesInput = {
    AND?: team_membersScalarWhereWithAggregatesInput | team_membersScalarWhereWithAggregatesInput[]
    OR?: team_membersScalarWhereWithAggregatesInput[]
    NOT?: team_membersScalarWhereWithAggregatesInput | team_membersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"team_members"> | number
    team_id?: IntWithAggregatesFilter<"team_members"> | number
    user_id?: IntWithAggregatesFilter<"team_members"> | number
    role?: Enumteam_members_roleNullableWithAggregatesFilter<"team_members"> | $Enums.team_members_role | null
  }

  export type teamsWhereInput = {
    AND?: teamsWhereInput | teamsWhereInput[]
    OR?: teamsWhereInput[]
    NOT?: teamsWhereInput | teamsWhereInput[]
    id?: IntFilter<"teams"> | number
    name?: StringFilter<"teams"> | string
    logo?: StringNullableFilter<"teams"> | string | null
    plan?: StringNullableFilter<"teams"> | string | null
    created_at?: DateTimeNullableFilter<"teams"> | Date | string | null
    channels?: ChannelsListRelationFilter
    projects?: ProjectsListRelationFilter
    reports?: ReportsListRelationFilter
    resources?: ResourcesListRelationFilter
    team_members?: Team_membersListRelationFilter
  }

  export type teamsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrderInput | SortOrder
    plan?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    channels?: channelsOrderByRelationAggregateInput
    projects?: projectsOrderByRelationAggregateInput
    reports?: reportsOrderByRelationAggregateInput
    resources?: resourcesOrderByRelationAggregateInput
    team_members?: team_membersOrderByRelationAggregateInput
    _relevance?: teamsOrderByRelevanceInput
  }

  export type teamsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: teamsWhereInput | teamsWhereInput[]
    OR?: teamsWhereInput[]
    NOT?: teamsWhereInput | teamsWhereInput[]
    name?: StringFilter<"teams"> | string
    logo?: StringNullableFilter<"teams"> | string | null
    plan?: StringNullableFilter<"teams"> | string | null
    created_at?: DateTimeNullableFilter<"teams"> | Date | string | null
    channels?: ChannelsListRelationFilter
    projects?: ProjectsListRelationFilter
    reports?: ReportsListRelationFilter
    resources?: ResourcesListRelationFilter
    team_members?: Team_membersListRelationFilter
  }, "id">

  export type teamsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrderInput | SortOrder
    plan?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: teamsCountOrderByAggregateInput
    _avg?: teamsAvgOrderByAggregateInput
    _max?: teamsMaxOrderByAggregateInput
    _min?: teamsMinOrderByAggregateInput
    _sum?: teamsSumOrderByAggregateInput
  }

  export type teamsScalarWhereWithAggregatesInput = {
    AND?: teamsScalarWhereWithAggregatesInput | teamsScalarWhereWithAggregatesInput[]
    OR?: teamsScalarWhereWithAggregatesInput[]
    NOT?: teamsScalarWhereWithAggregatesInput | teamsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"teams"> | number
    name?: StringWithAggregatesFilter<"teams"> | string
    logo?: StringNullableWithAggregatesFilter<"teams"> | string | null
    plan?: StringNullableWithAggregatesFilter<"teams"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"teams"> | Date | string | null
  }

  export type ticket_commentsWhereInput = {
    AND?: ticket_commentsWhereInput | ticket_commentsWhereInput[]
    OR?: ticket_commentsWhereInput[]
    NOT?: ticket_commentsWhereInput | ticket_commentsWhereInput[]
    id?: IntFilter<"ticket_comments"> | number
    ticket_id?: IntFilter<"ticket_comments"> | number
    user_id?: IntFilter<"ticket_comments"> | number
    comment?: StringFilter<"ticket_comments"> | string
    created_at?: DateTimeNullableFilter<"ticket_comments"> | Date | string | null
    tickets?: XOR<TicketsScalarRelationFilter, ticketsWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type ticket_commentsOrderByWithRelationInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    user_id?: SortOrder
    comment?: SortOrder
    created_at?: SortOrderInput | SortOrder
    tickets?: ticketsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
    _relevance?: ticket_commentsOrderByRelevanceInput
  }

  export type ticket_commentsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ticket_commentsWhereInput | ticket_commentsWhereInput[]
    OR?: ticket_commentsWhereInput[]
    NOT?: ticket_commentsWhereInput | ticket_commentsWhereInput[]
    ticket_id?: IntFilter<"ticket_comments"> | number
    user_id?: IntFilter<"ticket_comments"> | number
    comment?: StringFilter<"ticket_comments"> | string
    created_at?: DateTimeNullableFilter<"ticket_comments"> | Date | string | null
    tickets?: XOR<TicketsScalarRelationFilter, ticketsWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type ticket_commentsOrderByWithAggregationInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    user_id?: SortOrder
    comment?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: ticket_commentsCountOrderByAggregateInput
    _avg?: ticket_commentsAvgOrderByAggregateInput
    _max?: ticket_commentsMaxOrderByAggregateInput
    _min?: ticket_commentsMinOrderByAggregateInput
    _sum?: ticket_commentsSumOrderByAggregateInput
  }

  export type ticket_commentsScalarWhereWithAggregatesInput = {
    AND?: ticket_commentsScalarWhereWithAggregatesInput | ticket_commentsScalarWhereWithAggregatesInput[]
    OR?: ticket_commentsScalarWhereWithAggregatesInput[]
    NOT?: ticket_commentsScalarWhereWithAggregatesInput | ticket_commentsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ticket_comments"> | number
    ticket_id?: IntWithAggregatesFilter<"ticket_comments"> | number
    user_id?: IntWithAggregatesFilter<"ticket_comments"> | number
    comment?: StringWithAggregatesFilter<"ticket_comments"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"ticket_comments"> | Date | string | null
  }

  export type ticket_historyWhereInput = {
    AND?: ticket_historyWhereInput | ticket_historyWhereInput[]
    OR?: ticket_historyWhereInput[]
    NOT?: ticket_historyWhereInput | ticket_historyWhereInput[]
    id?: IntFilter<"ticket_history"> | number
    ticket_id?: IntFilter<"ticket_history"> | number
    action?: StringFilter<"ticket_history"> | string
    performed_by?: IntNullableFilter<"ticket_history"> | number | null
    performed_at?: DateTimeNullableFilter<"ticket_history"> | Date | string | null
    details?: StringNullableFilter<"ticket_history"> | string | null
    tickets?: XOR<TicketsScalarRelationFilter, ticketsWhereInput>
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type ticket_historyOrderByWithRelationInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    action?: SortOrder
    performed_by?: SortOrderInput | SortOrder
    performed_at?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    tickets?: ticketsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
    _relevance?: ticket_historyOrderByRelevanceInput
  }

  export type ticket_historyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ticket_historyWhereInput | ticket_historyWhereInput[]
    OR?: ticket_historyWhereInput[]
    NOT?: ticket_historyWhereInput | ticket_historyWhereInput[]
    ticket_id?: IntFilter<"ticket_history"> | number
    action?: StringFilter<"ticket_history"> | string
    performed_by?: IntNullableFilter<"ticket_history"> | number | null
    performed_at?: DateTimeNullableFilter<"ticket_history"> | Date | string | null
    details?: StringNullableFilter<"ticket_history"> | string | null
    tickets?: XOR<TicketsScalarRelationFilter, ticketsWhereInput>
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "id">

  export type ticket_historyOrderByWithAggregationInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    action?: SortOrder
    performed_by?: SortOrderInput | SortOrder
    performed_at?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    _count?: ticket_historyCountOrderByAggregateInput
    _avg?: ticket_historyAvgOrderByAggregateInput
    _max?: ticket_historyMaxOrderByAggregateInput
    _min?: ticket_historyMinOrderByAggregateInput
    _sum?: ticket_historySumOrderByAggregateInput
  }

  export type ticket_historyScalarWhereWithAggregatesInput = {
    AND?: ticket_historyScalarWhereWithAggregatesInput | ticket_historyScalarWhereWithAggregatesInput[]
    OR?: ticket_historyScalarWhereWithAggregatesInput[]
    NOT?: ticket_historyScalarWhereWithAggregatesInput | ticket_historyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ticket_history"> | number
    ticket_id?: IntWithAggregatesFilter<"ticket_history"> | number
    action?: StringWithAggregatesFilter<"ticket_history"> | string
    performed_by?: IntNullableWithAggregatesFilter<"ticket_history"> | number | null
    performed_at?: DateTimeNullableWithAggregatesFilter<"ticket_history"> | Date | string | null
    details?: StringNullableWithAggregatesFilter<"ticket_history"> | string | null
  }

  export type ticket_workflowWhereInput = {
    AND?: ticket_workflowWhereInput | ticket_workflowWhereInput[]
    OR?: ticket_workflowWhereInput[]
    NOT?: ticket_workflowWhereInput | ticket_workflowWhereInput[]
    id?: IntFilter<"ticket_workflow"> | number
    ticket_id?: IntFilter<"ticket_workflow"> | number
    workflow_id?: IntFilter<"ticket_workflow"> | number
    current_step?: IntNullableFilter<"ticket_workflow"> | number | null
    tickets?: XOR<TicketsScalarRelationFilter, ticketsWhereInput>
    workflows?: XOR<WorkflowsScalarRelationFilter, workflowsWhereInput>
    workflow_steps?: XOR<Workflow_stepsNullableScalarRelationFilter, workflow_stepsWhereInput> | null
  }

  export type ticket_workflowOrderByWithRelationInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    workflow_id?: SortOrder
    current_step?: SortOrderInput | SortOrder
    tickets?: ticketsOrderByWithRelationInput
    workflows?: workflowsOrderByWithRelationInput
    workflow_steps?: workflow_stepsOrderByWithRelationInput
  }

  export type ticket_workflowWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ticket_workflowWhereInput | ticket_workflowWhereInput[]
    OR?: ticket_workflowWhereInput[]
    NOT?: ticket_workflowWhereInput | ticket_workflowWhereInput[]
    ticket_id?: IntFilter<"ticket_workflow"> | number
    workflow_id?: IntFilter<"ticket_workflow"> | number
    current_step?: IntNullableFilter<"ticket_workflow"> | number | null
    tickets?: XOR<TicketsScalarRelationFilter, ticketsWhereInput>
    workflows?: XOR<WorkflowsScalarRelationFilter, workflowsWhereInput>
    workflow_steps?: XOR<Workflow_stepsNullableScalarRelationFilter, workflow_stepsWhereInput> | null
  }, "id">

  export type ticket_workflowOrderByWithAggregationInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    workflow_id?: SortOrder
    current_step?: SortOrderInput | SortOrder
    _count?: ticket_workflowCountOrderByAggregateInput
    _avg?: ticket_workflowAvgOrderByAggregateInput
    _max?: ticket_workflowMaxOrderByAggregateInput
    _min?: ticket_workflowMinOrderByAggregateInput
    _sum?: ticket_workflowSumOrderByAggregateInput
  }

  export type ticket_workflowScalarWhereWithAggregatesInput = {
    AND?: ticket_workflowScalarWhereWithAggregatesInput | ticket_workflowScalarWhereWithAggregatesInput[]
    OR?: ticket_workflowScalarWhereWithAggregatesInput[]
    NOT?: ticket_workflowScalarWhereWithAggregatesInput | ticket_workflowScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ticket_workflow"> | number
    ticket_id?: IntWithAggregatesFilter<"ticket_workflow"> | number
    workflow_id?: IntWithAggregatesFilter<"ticket_workflow"> | number
    current_step?: IntNullableWithAggregatesFilter<"ticket_workflow"> | number | null
  }

  export type ticketsWhereInput = {
    AND?: ticketsWhereInput | ticketsWhereInput[]
    OR?: ticketsWhereInput[]
    NOT?: ticketsWhereInput | ticketsWhereInput[]
    id?: IntFilter<"tickets"> | number
    project_id?: IntNullableFilter<"tickets"> | number | null
    created_by?: IntNullableFilter<"tickets"> | number | null
    assigned_to?: IntNullableFilter<"tickets"> | number | null
    type?: Enumtickets_typeNullableFilter<"tickets"> | $Enums.tickets_type | null
    title?: StringFilter<"tickets"> | string
    description?: StringNullableFilter<"tickets"> | string | null
    status?: Enumtickets_statusNullableFilter<"tickets"> | $Enums.tickets_status | null
    priority?: Enumtickets_priorityNullableFilter<"tickets"> | $Enums.tickets_priority | null
    sla_hours?: IntNullableFilter<"tickets"> | number | null
    created_at?: DateTimeNullableFilter<"tickets"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"tickets"> | Date | string | null
    ticket_comments?: Ticket_commentsListRelationFilter
    ticket_history?: Ticket_historyListRelationFilter
    ticket_workflow?: Ticket_workflowListRelationFilter
    projects?: XOR<ProjectsNullableScalarRelationFilter, projectsWhereInput> | null
    users_tickets_created_byTousers?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
    users_tickets_assigned_toTousers?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type ticketsOrderByWithRelationInput = {
    id?: SortOrder
    project_id?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    assigned_to?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    sla_hours?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    ticket_comments?: ticket_commentsOrderByRelationAggregateInput
    ticket_history?: ticket_historyOrderByRelationAggregateInput
    ticket_workflow?: ticket_workflowOrderByRelationAggregateInput
    projects?: projectsOrderByWithRelationInput
    users_tickets_created_byTousers?: usersOrderByWithRelationInput
    users_tickets_assigned_toTousers?: usersOrderByWithRelationInput
    _relevance?: ticketsOrderByRelevanceInput
  }

  export type ticketsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ticketsWhereInput | ticketsWhereInput[]
    OR?: ticketsWhereInput[]
    NOT?: ticketsWhereInput | ticketsWhereInput[]
    project_id?: IntNullableFilter<"tickets"> | number | null
    created_by?: IntNullableFilter<"tickets"> | number | null
    assigned_to?: IntNullableFilter<"tickets"> | number | null
    type?: Enumtickets_typeNullableFilter<"tickets"> | $Enums.tickets_type | null
    title?: StringFilter<"tickets"> | string
    description?: StringNullableFilter<"tickets"> | string | null
    status?: Enumtickets_statusNullableFilter<"tickets"> | $Enums.tickets_status | null
    priority?: Enumtickets_priorityNullableFilter<"tickets"> | $Enums.tickets_priority | null
    sla_hours?: IntNullableFilter<"tickets"> | number | null
    created_at?: DateTimeNullableFilter<"tickets"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"tickets"> | Date | string | null
    ticket_comments?: Ticket_commentsListRelationFilter
    ticket_history?: Ticket_historyListRelationFilter
    ticket_workflow?: Ticket_workflowListRelationFilter
    projects?: XOR<ProjectsNullableScalarRelationFilter, projectsWhereInput> | null
    users_tickets_created_byTousers?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
    users_tickets_assigned_toTousers?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "id">

  export type ticketsOrderByWithAggregationInput = {
    id?: SortOrder
    project_id?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    assigned_to?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    sla_hours?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: ticketsCountOrderByAggregateInput
    _avg?: ticketsAvgOrderByAggregateInput
    _max?: ticketsMaxOrderByAggregateInput
    _min?: ticketsMinOrderByAggregateInput
    _sum?: ticketsSumOrderByAggregateInput
  }

  export type ticketsScalarWhereWithAggregatesInput = {
    AND?: ticketsScalarWhereWithAggregatesInput | ticketsScalarWhereWithAggregatesInput[]
    OR?: ticketsScalarWhereWithAggregatesInput[]
    NOT?: ticketsScalarWhereWithAggregatesInput | ticketsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"tickets"> | number
    project_id?: IntNullableWithAggregatesFilter<"tickets"> | number | null
    created_by?: IntNullableWithAggregatesFilter<"tickets"> | number | null
    assigned_to?: IntNullableWithAggregatesFilter<"tickets"> | number | null
    type?: Enumtickets_typeNullableWithAggregatesFilter<"tickets"> | $Enums.tickets_type | null
    title?: StringWithAggregatesFilter<"tickets"> | string
    description?: StringNullableWithAggregatesFilter<"tickets"> | string | null
    status?: Enumtickets_statusNullableWithAggregatesFilter<"tickets"> | $Enums.tickets_status | null
    priority?: Enumtickets_priorityNullableWithAggregatesFilter<"tickets"> | $Enums.tickets_priority | null
    sla_hours?: IntNullableWithAggregatesFilter<"tickets"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"tickets"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"tickets"> | Date | string | null
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    name?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    password_hash?: StringFilter<"users"> | string
    avatar?: StringNullableFilter<"users"> | string | null
    role?: Enumusers_roleNullableFilter<"users"> | $Enums.users_role | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    last_name?: StringFilter<"users"> | string
    assets?: AssetsListRelationFilter
    channel_members?: Channel_membersListRelationFilter
    documents?: DocumentsListRelationFilter
    hr_records?: Hr_recordsListRelationFilter
    messages?: MessagesListRelationFilter
    permissions?: PermissionsListRelationFilter
    reports?: ReportsListRelationFilter
    resources?: ResourcesListRelationFilter
    task_assignees?: Task_assigneesListRelationFilter
    tasks?: TasksListRelationFilter
    team_members?: Team_membersListRelationFilter
    ticket_comments?: Ticket_commentsListRelationFilter
    ticket_history?: Ticket_historyListRelationFilter
    tickets_tickets_created_byTousers?: TicketsListRelationFilter
    tickets_tickets_assigned_toTousers?: TicketsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    avatar?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    last_name?: SortOrder
    assets?: assetsOrderByRelationAggregateInput
    channel_members?: channel_membersOrderByRelationAggregateInput
    documents?: documentsOrderByRelationAggregateInput
    hr_records?: hr_recordsOrderByRelationAggregateInput
    messages?: messagesOrderByRelationAggregateInput
    permissions?: permissionsOrderByRelationAggregateInput
    reports?: reportsOrderByRelationAggregateInput
    resources?: resourcesOrderByRelationAggregateInput
    task_assignees?: task_assigneesOrderByRelationAggregateInput
    tasks?: tasksOrderByRelationAggregateInput
    team_members?: team_membersOrderByRelationAggregateInput
    ticket_comments?: ticket_commentsOrderByRelationAggregateInput
    ticket_history?: ticket_historyOrderByRelationAggregateInput
    tickets_tickets_created_byTousers?: ticketsOrderByRelationAggregateInput
    tickets_tickets_assigned_toTousers?: ticketsOrderByRelationAggregateInput
    _relevance?: usersOrderByRelevanceInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    name?: StringFilter<"users"> | string
    password_hash?: StringFilter<"users"> | string
    avatar?: StringNullableFilter<"users"> | string | null
    role?: Enumusers_roleNullableFilter<"users"> | $Enums.users_role | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    last_name?: StringFilter<"users"> | string
    assets?: AssetsListRelationFilter
    channel_members?: Channel_membersListRelationFilter
    documents?: DocumentsListRelationFilter
    hr_records?: Hr_recordsListRelationFilter
    messages?: MessagesListRelationFilter
    permissions?: PermissionsListRelationFilter
    reports?: ReportsListRelationFilter
    resources?: ResourcesListRelationFilter
    task_assignees?: Task_assigneesListRelationFilter
    tasks?: TasksListRelationFilter
    team_members?: Team_membersListRelationFilter
    ticket_comments?: Ticket_commentsListRelationFilter
    ticket_history?: Ticket_historyListRelationFilter
    tickets_tickets_created_byTousers?: TicketsListRelationFilter
    tickets_tickets_assigned_toTousers?: TicketsListRelationFilter
  }, "id" | "email">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    avatar?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    last_name?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    name?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    password_hash?: StringWithAggregatesFilter<"users"> | string
    avatar?: StringNullableWithAggregatesFilter<"users"> | string | null
    role?: Enumusers_roleNullableWithAggregatesFilter<"users"> | $Enums.users_role | null
    created_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    last_name?: StringWithAggregatesFilter<"users"> | string
  }

  export type workflow_stepsWhereInput = {
    AND?: workflow_stepsWhereInput | workflow_stepsWhereInput[]
    OR?: workflow_stepsWhereInput[]
    NOT?: workflow_stepsWhereInput | workflow_stepsWhereInput[]
    id?: IntFilter<"workflow_steps"> | number
    workflow_id?: IntFilter<"workflow_steps"> | number
    step_order?: IntFilter<"workflow_steps"> | number
    name?: StringFilter<"workflow_steps"> | string
    action?: StringNullableFilter<"workflow_steps"> | string | null
    ticket_workflow?: Ticket_workflowListRelationFilter
    workflows?: XOR<WorkflowsScalarRelationFilter, workflowsWhereInput>
  }

  export type workflow_stepsOrderByWithRelationInput = {
    id?: SortOrder
    workflow_id?: SortOrder
    step_order?: SortOrder
    name?: SortOrder
    action?: SortOrderInput | SortOrder
    ticket_workflow?: ticket_workflowOrderByRelationAggregateInput
    workflows?: workflowsOrderByWithRelationInput
    _relevance?: workflow_stepsOrderByRelevanceInput
  }

  export type workflow_stepsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: workflow_stepsWhereInput | workflow_stepsWhereInput[]
    OR?: workflow_stepsWhereInput[]
    NOT?: workflow_stepsWhereInput | workflow_stepsWhereInput[]
    workflow_id?: IntFilter<"workflow_steps"> | number
    step_order?: IntFilter<"workflow_steps"> | number
    name?: StringFilter<"workflow_steps"> | string
    action?: StringNullableFilter<"workflow_steps"> | string | null
    ticket_workflow?: Ticket_workflowListRelationFilter
    workflows?: XOR<WorkflowsScalarRelationFilter, workflowsWhereInput>
  }, "id">

  export type workflow_stepsOrderByWithAggregationInput = {
    id?: SortOrder
    workflow_id?: SortOrder
    step_order?: SortOrder
    name?: SortOrder
    action?: SortOrderInput | SortOrder
    _count?: workflow_stepsCountOrderByAggregateInput
    _avg?: workflow_stepsAvgOrderByAggregateInput
    _max?: workflow_stepsMaxOrderByAggregateInput
    _min?: workflow_stepsMinOrderByAggregateInput
    _sum?: workflow_stepsSumOrderByAggregateInput
  }

  export type workflow_stepsScalarWhereWithAggregatesInput = {
    AND?: workflow_stepsScalarWhereWithAggregatesInput | workflow_stepsScalarWhereWithAggregatesInput[]
    OR?: workflow_stepsScalarWhereWithAggregatesInput[]
    NOT?: workflow_stepsScalarWhereWithAggregatesInput | workflow_stepsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"workflow_steps"> | number
    workflow_id?: IntWithAggregatesFilter<"workflow_steps"> | number
    step_order?: IntWithAggregatesFilter<"workflow_steps"> | number
    name?: StringWithAggregatesFilter<"workflow_steps"> | string
    action?: StringNullableWithAggregatesFilter<"workflow_steps"> | string | null
  }

  export type workflowsWhereInput = {
    AND?: workflowsWhereInput | workflowsWhereInput[]
    OR?: workflowsWhereInput[]
    NOT?: workflowsWhereInput | workflowsWhereInput[]
    id?: IntFilter<"workflows"> | number
    name?: StringFilter<"workflows"> | string
    description?: StringNullableFilter<"workflows"> | string | null
    ticket_workflow?: Ticket_workflowListRelationFilter
    workflow_steps?: Workflow_stepsListRelationFilter
  }

  export type workflowsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    ticket_workflow?: ticket_workflowOrderByRelationAggregateInput
    workflow_steps?: workflow_stepsOrderByRelationAggregateInput
    _relevance?: workflowsOrderByRelevanceInput
  }

  export type workflowsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: workflowsWhereInput | workflowsWhereInput[]
    OR?: workflowsWhereInput[]
    NOT?: workflowsWhereInput | workflowsWhereInput[]
    name?: StringFilter<"workflows"> | string
    description?: StringNullableFilter<"workflows"> | string | null
    ticket_workflow?: Ticket_workflowListRelationFilter
    workflow_steps?: Workflow_stepsListRelationFilter
  }, "id">

  export type workflowsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: workflowsCountOrderByAggregateInput
    _avg?: workflowsAvgOrderByAggregateInput
    _max?: workflowsMaxOrderByAggregateInput
    _min?: workflowsMinOrderByAggregateInput
    _sum?: workflowsSumOrderByAggregateInput
  }

  export type workflowsScalarWhereWithAggregatesInput = {
    AND?: workflowsScalarWhereWithAggregatesInput | workflowsScalarWhereWithAggregatesInput[]
    OR?: workflowsScalarWhereWithAggregatesInput[]
    NOT?: workflowsScalarWhereWithAggregatesInput | workflowsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"workflows"> | number
    name?: StringWithAggregatesFilter<"workflows"> | string
    description?: StringNullableWithAggregatesFilter<"workflows"> | string | null
  }

  export type assetsCreateInput = {
    name: string
    type?: string | null
    serial_number?: string | null
    status?: $Enums.assets_status | null
    users?: usersCreateNestedOneWithoutAssetsInput
  }

  export type assetsUncheckedCreateInput = {
    id?: number
    name: string
    type?: string | null
    serial_number?: string | null
    assigned_to?: number | null
    status?: $Enums.assets_status | null
  }

  export type assetsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    serial_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumassets_statusFieldUpdateOperationsInput | $Enums.assets_status | null
    users?: usersUpdateOneWithoutAssetsNestedInput
  }

  export type assetsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    serial_number?: NullableStringFieldUpdateOperationsInput | string | null
    assigned_to?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableEnumassets_statusFieldUpdateOperationsInput | $Enums.assets_status | null
  }

  export type assetsCreateManyInput = {
    id?: number
    name: string
    type?: string | null
    serial_number?: string | null
    assigned_to?: number | null
    status?: $Enums.assets_status | null
  }

  export type assetsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    serial_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumassets_statusFieldUpdateOperationsInput | $Enums.assets_status | null
  }

  export type assetsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    serial_number?: NullableStringFieldUpdateOperationsInput | string | null
    assigned_to?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableEnumassets_statusFieldUpdateOperationsInput | $Enums.assets_status | null
  }

  export type budgetsCreateInput = {
    amount: Decimal | DecimalJsLike | number | string
    description?: string | null
    created_at?: Date | string | null
    projects: projectsCreateNestedOneWithoutBudgetsInput
  }

  export type budgetsUncheckedCreateInput = {
    id?: number
    project_id: number
    amount: Decimal | DecimalJsLike | number | string
    description?: string | null
    created_at?: Date | string | null
  }

  export type budgetsUpdateInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: projectsUpdateOneRequiredWithoutBudgetsNestedInput
  }

  export type budgetsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type budgetsCreateManyInput = {
    id?: number
    project_id: number
    amount: Decimal | DecimalJsLike | number | string
    description?: string | null
    created_at?: Date | string | null
  }

  export type budgetsUpdateManyMutationInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type budgetsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type channel_membersCreateInput = {
    channels: channelsCreateNestedOneWithoutChannel_membersInput
    users: usersCreateNestedOneWithoutChannel_membersInput
  }

  export type channel_membersUncheckedCreateInput = {
    id?: number
    channel_id: number
    user_id: number
  }

  export type channel_membersUpdateInput = {
    channels?: channelsUpdateOneRequiredWithoutChannel_membersNestedInput
    users?: usersUpdateOneRequiredWithoutChannel_membersNestedInput
  }

  export type channel_membersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    channel_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type channel_membersCreateManyInput = {
    id?: number
    channel_id: number
    user_id: number
  }

  export type channel_membersUpdateManyMutationInput = {

  }

  export type channel_membersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    channel_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type channelsCreateInput = {
    name: string
    type?: $Enums.channels_type | null
    channel_members?: channel_membersCreateNestedManyWithoutChannelsInput
    teams?: teamsCreateNestedOneWithoutChannelsInput
    messages?: messagesCreateNestedManyWithoutChannelsInput
  }

  export type channelsUncheckedCreateInput = {
    id?: number
    team_id?: number | null
    name: string
    type?: $Enums.channels_type | null
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutChannelsInput
    messages?: messagesUncheckedCreateNestedManyWithoutChannelsInput
  }

  export type channelsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumchannels_typeFieldUpdateOperationsInput | $Enums.channels_type | null
    channel_members?: channel_membersUpdateManyWithoutChannelsNestedInput
    teams?: teamsUpdateOneWithoutChannelsNestedInput
    messages?: messagesUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumchannels_typeFieldUpdateOperationsInput | $Enums.channels_type | null
    channel_members?: channel_membersUncheckedUpdateManyWithoutChannelsNestedInput
    messages?: messagesUncheckedUpdateManyWithoutChannelsNestedInput
  }

  export type channelsCreateManyInput = {
    id?: number
    team_id?: number | null
    name: string
    type?: $Enums.channels_type | null
  }

  export type channelsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumchannels_typeFieldUpdateOperationsInput | $Enums.channels_type | null
  }

  export type channelsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumchannels_typeFieldUpdateOperationsInput | $Enums.channels_type | null
  }

  export type clientsCreateInput = {
    name: string
    email?: string | null
    phone?: string | null
    company?: string | null
    created_at?: Date | string | null
    leads?: leadsCreateNestedManyWithoutClientsInput
  }

  export type clientsUncheckedCreateInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    company?: string | null
    created_at?: Date | string | null
    leads?: leadsUncheckedCreateNestedManyWithoutClientsInput
  }

  export type clientsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    leads?: leadsUpdateManyWithoutClientsNestedInput
  }

  export type clientsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    leads?: leadsUncheckedUpdateManyWithoutClientsNestedInput
  }

  export type clientsCreateManyInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    company?: string | null
    created_at?: Date | string | null
  }

  export type clientsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type clientsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type contractsCreateInput = {
    description?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.contracts_status | null
    suppliers?: suppliersCreateNestedOneWithoutContractsInput
    projects?: projectsCreateNestedOneWithoutContractsInput
  }

  export type contractsUncheckedCreateInput = {
    id?: number
    supplier_id?: number | null
    project_id?: number | null
    description?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.contracts_status | null
  }

  export type contractsUpdateInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumcontracts_statusFieldUpdateOperationsInput | $Enums.contracts_status | null
    suppliers?: suppliersUpdateOneWithoutContractsNestedInput
    projects?: projectsUpdateOneWithoutContractsNestedInput
  }

  export type contractsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    supplier_id?: NullableIntFieldUpdateOperationsInput | number | null
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumcontracts_statusFieldUpdateOperationsInput | $Enums.contracts_status | null
  }

  export type contractsCreateManyInput = {
    id?: number
    supplier_id?: number | null
    project_id?: number | null
    description?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.contracts_status | null
  }

  export type contractsUpdateManyMutationInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumcontracts_statusFieldUpdateOperationsInput | $Enums.contracts_status | null
  }

  export type contractsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    supplier_id?: NullableIntFieldUpdateOperationsInput | number | null
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumcontracts_statusFieldUpdateOperationsInput | $Enums.contracts_status | null
  }

  export type costsCreateInput = {
    description?: string | null
    amount: Decimal | DecimalJsLike | number | string
    date?: Date | string | null
    projects: projectsCreateNestedOneWithoutCostsInput
  }

  export type costsUncheckedCreateInput = {
    id?: number
    project_id: number
    description?: string | null
    amount: Decimal | DecimalJsLike | number | string
    date?: Date | string | null
  }

  export type costsUpdateInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: projectsUpdateOneRequiredWithoutCostsNestedInput
  }

  export type costsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type costsCreateManyInput = {
    id?: number
    project_id: number
    description?: string | null
    amount: Decimal | DecimalJsLike | number | string
    date?: Date | string | null
  }

  export type costsUpdateManyMutationInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type costsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type documentsCreateInput = {
    name: string
    content?: string | null
    type?: $Enums.documents_type | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    projects?: projectsCreateNestedOneWithoutDocumentsInput
    users?: usersCreateNestedOneWithoutDocumentsInput
  }

  export type documentsUncheckedCreateInput = {
    id?: number
    project_id?: number | null
    name: string
    content?: string | null
    type?: $Enums.documents_type | null
    created_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type documentsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumdocuments_typeFieldUpdateOperationsInput | $Enums.documents_type | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: projectsUpdateOneWithoutDocumentsNestedInput
    users?: usersUpdateOneWithoutDocumentsNestedInput
  }

  export type documentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumdocuments_typeFieldUpdateOperationsInput | $Enums.documents_type | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type documentsCreateManyInput = {
    id?: number
    project_id?: number | null
    name: string
    content?: string | null
    type?: $Enums.documents_type | null
    created_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type documentsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumdocuments_typeFieldUpdateOperationsInput | $Enums.documents_type | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type documentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumdocuments_typeFieldUpdateOperationsInput | $Enums.documents_type | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type eventsCreateInput = {
    name: string
    description?: string | null
    start_datetime?: Date | string | null
    end_datetime?: Date | string | null
    type?: $Enums.events_type | null
    projects?: projectsCreateNestedOneWithoutEventsInput
  }

  export type eventsUncheckedCreateInput = {
    id?: number
    project_id?: number | null
    name: string
    description?: string | null
    start_datetime?: Date | string | null
    end_datetime?: Date | string | null
    type?: $Enums.events_type | null
  }

  export type eventsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_datetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_datetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableEnumevents_typeFieldUpdateOperationsInput | $Enums.events_type | null
    projects?: projectsUpdateOneWithoutEventsNestedInput
  }

  export type eventsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_datetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_datetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableEnumevents_typeFieldUpdateOperationsInput | $Enums.events_type | null
  }

  export type eventsCreateManyInput = {
    id?: number
    project_id?: number | null
    name: string
    description?: string | null
    start_datetime?: Date | string | null
    end_datetime?: Date | string | null
    type?: $Enums.events_type | null
  }

  export type eventsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_datetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_datetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableEnumevents_typeFieldUpdateOperationsInput | $Enums.events_type | null
  }

  export type eventsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_datetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_datetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableEnumevents_typeFieldUpdateOperationsInput | $Enums.events_type | null
  }

  export type hr_recordsCreateInput = {
    type?: $Enums.hr_records_type | null
    details?: string | null
    date?: Date | string | null
    users: usersCreateNestedOneWithoutHr_recordsInput
  }

  export type hr_recordsUncheckedCreateInput = {
    id?: number
    user_id: number
    type?: $Enums.hr_records_type | null
    details?: string | null
    date?: Date | string | null
  }

  export type hr_recordsUpdateInput = {
    type?: NullableEnumhr_records_typeFieldUpdateOperationsInput | $Enums.hr_records_type | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutHr_recordsNestedInput
  }

  export type hr_recordsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    type?: NullableEnumhr_records_typeFieldUpdateOperationsInput | $Enums.hr_records_type | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type hr_recordsCreateManyInput = {
    id?: number
    user_id: number
    type?: $Enums.hr_records_type | null
    details?: string | null
    date?: Date | string | null
  }

  export type hr_recordsUpdateManyMutationInput = {
    type?: NullableEnumhr_records_typeFieldUpdateOperationsInput | $Enums.hr_records_type | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type hr_recordsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    type?: NullableEnumhr_records_typeFieldUpdateOperationsInput | $Enums.hr_records_type | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type leadsCreateInput = {
    status?: $Enums.leads_status | null
    notes?: string | null
    created_at?: Date | string | null
    clients?: clientsCreateNestedOneWithoutLeadsInput
    projects?: projectsCreateNestedOneWithoutLeadsInput
  }

  export type leadsUncheckedCreateInput = {
    id?: number
    client_id?: number | null
    project_id?: number | null
    status?: $Enums.leads_status | null
    notes?: string | null
    created_at?: Date | string | null
  }

  export type leadsUpdateInput = {
    status?: NullableEnumleads_statusFieldUpdateOperationsInput | $Enums.leads_status | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clients?: clientsUpdateOneWithoutLeadsNestedInput
    projects?: projectsUpdateOneWithoutLeadsNestedInput
  }

  export type leadsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    client_id?: NullableIntFieldUpdateOperationsInput | number | null
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableEnumleads_statusFieldUpdateOperationsInput | $Enums.leads_status | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type leadsCreateManyInput = {
    id?: number
    client_id?: number | null
    project_id?: number | null
    status?: $Enums.leads_status | null
    notes?: string | null
    created_at?: Date | string | null
  }

  export type leadsUpdateManyMutationInput = {
    status?: NullableEnumleads_statusFieldUpdateOperationsInput | $Enums.leads_status | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type leadsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    client_id?: NullableIntFieldUpdateOperationsInput | number | null
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableEnumleads_statusFieldUpdateOperationsInput | $Enums.leads_status | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type messagesCreateInput = {
    content: string
    created_at?: Date | string | null
    channels: channelsCreateNestedOneWithoutMessagesInput
    users: usersCreateNestedOneWithoutMessagesInput
  }

  export type messagesUncheckedCreateInput = {
    id?: number
    channel_id: number
    user_id: number
    content: string
    created_at?: Date | string | null
  }

  export type messagesUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channels?: channelsUpdateOneRequiredWithoutMessagesNestedInput
    users?: usersUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type messagesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    channel_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type messagesCreateManyInput = {
    id?: number
    channel_id: number
    user_id: number
    content: string
    created_at?: Date | string | null
  }

  export type messagesUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type messagesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    channel_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type permissionsCreateInput = {
    permission: string
    users: usersCreateNestedOneWithoutPermissionsInput
    projects?: projectsCreateNestedOneWithoutPermissionsInput
  }

  export type permissionsUncheckedCreateInput = {
    id?: number
    user_id: number
    project_id?: number | null
    permission: string
  }

  export type permissionsUpdateInput = {
    permission?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutPermissionsNestedInput
    projects?: projectsUpdateOneWithoutPermissionsNestedInput
  }

  export type permissionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    permission?: StringFieldUpdateOperationsInput | string
  }

  export type permissionsCreateManyInput = {
    id?: number
    user_id: number
    project_id?: number | null
    permission: string
  }

  export type permissionsUpdateManyMutationInput = {
    permission?: StringFieldUpdateOperationsInput | string
  }

  export type permissionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    permission?: StringFieldUpdateOperationsInput | string
  }

  export type project_resourcesCreateInput = {
    assigned_from?: Date | string | null
    assigned_to?: Date | string | null
    projects: projectsCreateNestedOneWithoutProject_resourcesInput
    resources: resourcesCreateNestedOneWithoutProject_resourcesInput
  }

  export type project_resourcesUncheckedCreateInput = {
    id?: number
    project_id: number
    resource_id: number
    assigned_from?: Date | string | null
    assigned_to?: Date | string | null
  }

  export type project_resourcesUpdateInput = {
    assigned_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigned_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: projectsUpdateOneRequiredWithoutProject_resourcesNestedInput
    resources?: resourcesUpdateOneRequiredWithoutProject_resourcesNestedInput
  }

  export type project_resourcesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    resource_id?: IntFieldUpdateOperationsInput | number
    assigned_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigned_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type project_resourcesCreateManyInput = {
    id?: number
    project_id: number
    resource_id: number
    assigned_from?: Date | string | null
    assigned_to?: Date | string | null
  }

  export type project_resourcesUpdateManyMutationInput = {
    assigned_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigned_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type project_resourcesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    resource_id?: IntFieldUpdateOperationsInput | number
    assigned_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigned_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type projectsCreateInput = {
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsCreateNestedManyWithoutProjectsInput
    contracts?: contractsCreateNestedManyWithoutProjectsInput
    costs?: costsCreateNestedManyWithoutProjectsInput
    documents?: documentsCreateNestedManyWithoutProjectsInput
    events?: eventsCreateNestedManyWithoutProjectsInput
    leads?: leadsCreateNestedManyWithoutProjectsInput
    permissions?: permissionsCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesCreateNestedManyWithoutProjectsInput
    teams?: teamsCreateNestedOneWithoutProjectsInput
    reports?: reportsCreateNestedManyWithoutProjectsInput
    sprints?: sprintsCreateNestedManyWithoutProjectsInput
    tasks?: tasksCreateNestedManyWithoutProjectsInput
    tickets?: ticketsCreateNestedManyWithoutProjectsInput
  }

  export type projectsUncheckedCreateInput = {
    id?: number
    team_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsUncheckedCreateNestedManyWithoutProjectsInput
    contracts?: contractsUncheckedCreateNestedManyWithoutProjectsInput
    costs?: costsUncheckedCreateNestedManyWithoutProjectsInput
    documents?: documentsUncheckedCreateNestedManyWithoutProjectsInput
    events?: eventsUncheckedCreateNestedManyWithoutProjectsInput
    leads?: leadsUncheckedCreateNestedManyWithoutProjectsInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutProjectsInput
    reports?: reportsUncheckedCreateNestedManyWithoutProjectsInput
    sprints?: sprintsUncheckedCreateNestedManyWithoutProjectsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutProjectsInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type projectsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUpdateManyWithoutProjectsNestedInput
    costs?: costsUpdateManyWithoutProjectsNestedInput
    documents?: documentsUpdateManyWithoutProjectsNestedInput
    events?: eventsUpdateManyWithoutProjectsNestedInput
    leads?: leadsUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUpdateManyWithoutProjectsNestedInput
    teams?: teamsUpdateOneWithoutProjectsNestedInput
    reports?: reportsUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUncheckedUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUncheckedUpdateManyWithoutProjectsNestedInput
    costs?: costsUncheckedUpdateManyWithoutProjectsNestedInput
    documents?: documentsUncheckedUpdateManyWithoutProjectsNestedInput
    events?: eventsUncheckedUpdateManyWithoutProjectsNestedInput
    leads?: leadsUncheckedUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUncheckedUpdateManyWithoutProjectsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUncheckedUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type projectsCreateManyInput = {
    id?: number
    team_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
  }

  export type projectsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type projectsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsCreateInput = {
    type?: $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
    projects?: projectsCreateNestedOneWithoutReportsInput
    teams?: teamsCreateNestedOneWithoutReportsInput
    users?: usersCreateNestedOneWithoutReportsInput
  }

  export type reportsUncheckedCreateInput = {
    id?: number
    project_id?: number | null
    team_id?: number | null
    user_id?: number | null
    type?: $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
  }

  export type reportsUpdateInput = {
    type?: NullableEnumreports_typeFieldUpdateOperationsInput | $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: projectsUpdateOneWithoutReportsNestedInput
    teams?: teamsUpdateOneWithoutReportsNestedInput
    users?: usersUpdateOneWithoutReportsNestedInput
  }

  export type reportsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumreports_typeFieldUpdateOperationsInput | $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsCreateManyInput = {
    id?: number
    project_id?: number | null
    team_id?: number | null
    user_id?: number | null
    type?: $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
  }

  export type reportsUpdateManyMutationInput = {
    type?: NullableEnumreports_typeFieldUpdateOperationsInput | $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumreports_typeFieldUpdateOperationsInput | $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type resourcesCreateInput = {
    name: string
    type?: $Enums.resources_type | null
    availability?: $Enums.resources_availability | null
    project_resources?: project_resourcesCreateNestedManyWithoutResourcesInput
    users?: usersCreateNestedOneWithoutResourcesInput
    teams?: teamsCreateNestedOneWithoutResourcesInput
  }

  export type resourcesUncheckedCreateInput = {
    id?: number
    name: string
    type?: $Enums.resources_type | null
    user_id?: number | null
    team_id?: number | null
    availability?: $Enums.resources_availability | null
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutResourcesInput
  }

  export type resourcesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumresources_typeFieldUpdateOperationsInput | $Enums.resources_type | null
    availability?: NullableEnumresources_availabilityFieldUpdateOperationsInput | $Enums.resources_availability | null
    project_resources?: project_resourcesUpdateManyWithoutResourcesNestedInput
    users?: usersUpdateOneWithoutResourcesNestedInput
    teams?: teamsUpdateOneWithoutResourcesNestedInput
  }

  export type resourcesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumresources_typeFieldUpdateOperationsInput | $Enums.resources_type | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: NullableEnumresources_availabilityFieldUpdateOperationsInput | $Enums.resources_availability | null
    project_resources?: project_resourcesUncheckedUpdateManyWithoutResourcesNestedInput
  }

  export type resourcesCreateManyInput = {
    id?: number
    name: string
    type?: $Enums.resources_type | null
    user_id?: number | null
    team_id?: number | null
    availability?: $Enums.resources_availability | null
  }

  export type resourcesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumresources_typeFieldUpdateOperationsInput | $Enums.resources_type | null
    availability?: NullableEnumresources_availabilityFieldUpdateOperationsInput | $Enums.resources_availability | null
  }

  export type resourcesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumresources_typeFieldUpdateOperationsInput | $Enums.resources_type | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: NullableEnumresources_availabilityFieldUpdateOperationsInput | $Enums.resources_availability | null
  }

  export type sprint_tasksCreateInput = {
    sprints: sprintsCreateNestedOneWithoutSprint_tasksInput
    tasks: tasksCreateNestedOneWithoutSprint_tasksInput
  }

  export type sprint_tasksUncheckedCreateInput = {
    id?: number
    sprint_id: number
    task_id: number
  }

  export type sprint_tasksUpdateInput = {
    sprints?: sprintsUpdateOneRequiredWithoutSprint_tasksNestedInput
    tasks?: tasksUpdateOneRequiredWithoutSprint_tasksNestedInput
  }

  export type sprint_tasksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sprint_id?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
  }

  export type sprint_tasksCreateManyInput = {
    id?: number
    sprint_id: number
    task_id: number
  }

  export type sprint_tasksUpdateManyMutationInput = {

  }

  export type sprint_tasksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sprint_id?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
  }

  export type sprintsCreateInput = {
    name: string
    start_date?: Date | string | null
    end_date?: Date | string | null
    goal?: string | null
    status?: $Enums.sprints_status | null
    sprint_tasks?: sprint_tasksCreateNestedManyWithoutSprintsInput
    projects: projectsCreateNestedOneWithoutSprintsInput
  }

  export type sprintsUncheckedCreateInput = {
    id?: number
    project_id: number
    name: string
    start_date?: Date | string | null
    end_date?: Date | string | null
    goal?: string | null
    status?: $Enums.sprints_status | null
    sprint_tasks?: sprint_tasksUncheckedCreateNestedManyWithoutSprintsInput
  }

  export type sprintsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumsprints_statusFieldUpdateOperationsInput | $Enums.sprints_status | null
    sprint_tasks?: sprint_tasksUpdateManyWithoutSprintsNestedInput
    projects?: projectsUpdateOneRequiredWithoutSprintsNestedInput
  }

  export type sprintsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumsprints_statusFieldUpdateOperationsInput | $Enums.sprints_status | null
    sprint_tasks?: sprint_tasksUncheckedUpdateManyWithoutSprintsNestedInput
  }

  export type sprintsCreateManyInput = {
    id?: number
    project_id: number
    name: string
    start_date?: Date | string | null
    end_date?: Date | string | null
    goal?: string | null
    status?: $Enums.sprints_status | null
  }

  export type sprintsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumsprints_statusFieldUpdateOperationsInput | $Enums.sprints_status | null
  }

  export type sprintsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumsprints_statusFieldUpdateOperationsInput | $Enums.sprints_status | null
  }

  export type suppliersCreateInput = {
    name: string
    contact_info?: string | null
    contracts?: contractsCreateNestedManyWithoutSuppliersInput
  }

  export type suppliersUncheckedCreateInput = {
    id?: number
    name: string
    contact_info?: string | null
    contracts?: contractsUncheckedCreateNestedManyWithoutSuppliersInput
  }

  export type suppliersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_info?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: contractsUpdateManyWithoutSuppliersNestedInput
  }

  export type suppliersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_info?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: contractsUncheckedUpdateManyWithoutSuppliersNestedInput
  }

  export type suppliersCreateManyInput = {
    id?: number
    name: string
    contact_info?: string | null
  }

  export type suppliersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_info?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type suppliersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_info?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type task_assigneesCreateInput = {
    tasks: tasksCreateNestedOneWithoutTask_assigneesInput
    users: usersCreateNestedOneWithoutTask_assigneesInput
  }

  export type task_assigneesUncheckedCreateInput = {
    id?: number
    task_id: number
    user_id: number
  }

  export type task_assigneesUpdateInput = {
    tasks?: tasksUpdateOneRequiredWithoutTask_assigneesNestedInput
    users?: usersUpdateOneRequiredWithoutTask_assigneesNestedInput
  }

  export type task_assigneesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type task_assigneesCreateManyInput = {
    id?: number
    task_id: number
    user_id: number
  }

  export type task_assigneesUpdateManyMutationInput = {

  }

  export type task_assigneesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type task_label_linksCreateInput = {
    tasks: tasksCreateNestedOneWithoutTask_label_linksInput
    task_labels: task_labelsCreateNestedOneWithoutTask_label_linksInput
  }

  export type task_label_linksUncheckedCreateInput = {
    id?: number
    task_id: number
    label_id: number
  }

  export type task_label_linksUpdateInput = {
    tasks?: tasksUpdateOneRequiredWithoutTask_label_linksNestedInput
    task_labels?: task_labelsUpdateOneRequiredWithoutTask_label_linksNestedInput
  }

  export type task_label_linksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
    label_id?: IntFieldUpdateOperationsInput | number
  }

  export type task_label_linksCreateManyInput = {
    id?: number
    task_id: number
    label_id: number
  }

  export type task_label_linksUpdateManyMutationInput = {

  }

  export type task_label_linksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
    label_id?: IntFieldUpdateOperationsInput | number
  }

  export type task_labelsCreateInput = {
    name: string
    color?: string | null
    task_label_links?: task_label_linksCreateNestedManyWithoutTask_labelsInput
  }

  export type task_labelsUncheckedCreateInput = {
    id?: number
    name: string
    color?: string | null
    task_label_links?: task_label_linksUncheckedCreateNestedManyWithoutTask_labelsInput
  }

  export type task_labelsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    task_label_links?: task_label_linksUpdateManyWithoutTask_labelsNestedInput
  }

  export type task_labelsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    task_label_links?: task_label_linksUncheckedUpdateManyWithoutTask_labelsNestedInput
  }

  export type task_labelsCreateManyInput = {
    id?: number
    name: string
    color?: string | null
  }

  export type task_labelsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type task_labelsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tasksCreateInput = {
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sprint_tasks?: sprint_tasksCreateNestedManyWithoutTasksInput
    task_assignees?: task_assigneesCreateNestedManyWithoutTasksInput
    task_label_links?: task_label_linksCreateNestedManyWithoutTasksInput
    projects: projectsCreateNestedOneWithoutTasksInput
    tasks?: tasksCreateNestedOneWithoutOther_tasksInput
    other_tasks?: tasksCreateNestedManyWithoutTasksInput
    users?: usersCreateNestedOneWithoutTasksInput
  }

  export type tasksUncheckedCreateInput = {
    id?: number
    project_id: number
    parent_task_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sprint_tasks?: sprint_tasksUncheckedCreateNestedManyWithoutTasksInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutTasksInput
    task_label_links?: task_label_linksUncheckedCreateNestedManyWithoutTasksInput
    other_tasks?: tasksUncheckedCreateNestedManyWithoutTasksInput
  }

  export type tasksUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sprint_tasks?: sprint_tasksUpdateManyWithoutTasksNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutTasksNestedInput
    task_label_links?: task_label_linksUpdateManyWithoutTasksNestedInput
    projects?: projectsUpdateOneRequiredWithoutTasksNestedInput
    tasks?: tasksUpdateOneWithoutOther_tasksNestedInput
    other_tasks?: tasksUpdateManyWithoutTasksNestedInput
    users?: usersUpdateOneWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    parent_task_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sprint_tasks?: sprint_tasksUncheckedUpdateManyWithoutTasksNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutTasksNestedInput
    task_label_links?: task_label_linksUncheckedUpdateManyWithoutTasksNestedInput
    other_tasks?: tasksUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type tasksCreateManyInput = {
    id?: number
    project_id: number
    parent_task_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type tasksUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tasksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    parent_task_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type team_membersCreateInput = {
    role?: $Enums.team_members_role | null
    teams: teamsCreateNestedOneWithoutTeam_membersInput
    users: usersCreateNestedOneWithoutTeam_membersInput
  }

  export type team_membersUncheckedCreateInput = {
    id?: number
    team_id: number
    user_id: number
    role?: $Enums.team_members_role | null
  }

  export type team_membersUpdateInput = {
    role?: NullableEnumteam_members_roleFieldUpdateOperationsInput | $Enums.team_members_role | null
    teams?: teamsUpdateOneRequiredWithoutTeam_membersNestedInput
    users?: usersUpdateOneRequiredWithoutTeam_membersNestedInput
  }

  export type team_membersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    role?: NullableEnumteam_members_roleFieldUpdateOperationsInput | $Enums.team_members_role | null
  }

  export type team_membersCreateManyInput = {
    id?: number
    team_id: number
    user_id: number
    role?: $Enums.team_members_role | null
  }

  export type team_membersUpdateManyMutationInput = {
    role?: NullableEnumteam_members_roleFieldUpdateOperationsInput | $Enums.team_members_role | null
  }

  export type team_membersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    role?: NullableEnumteam_members_roleFieldUpdateOperationsInput | $Enums.team_members_role | null
  }

  export type teamsCreateInput = {
    name: string
    logo?: string | null
    plan?: string | null
    created_at?: Date | string | null
    channels?: channelsCreateNestedManyWithoutTeamsInput
    projects?: projectsCreateNestedManyWithoutTeamsInput
    reports?: reportsCreateNestedManyWithoutTeamsInput
    resources?: resourcesCreateNestedManyWithoutTeamsInput
    team_members?: team_membersCreateNestedManyWithoutTeamsInput
  }

  export type teamsUncheckedCreateInput = {
    id?: number
    name: string
    logo?: string | null
    plan?: string | null
    created_at?: Date | string | null
    channels?: channelsUncheckedCreateNestedManyWithoutTeamsInput
    projects?: projectsUncheckedCreateNestedManyWithoutTeamsInput
    reports?: reportsUncheckedCreateNestedManyWithoutTeamsInput
    resources?: resourcesUncheckedCreateNestedManyWithoutTeamsInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type teamsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channels?: channelsUpdateManyWithoutTeamsNestedInput
    projects?: projectsUpdateManyWithoutTeamsNestedInput
    reports?: reportsUpdateManyWithoutTeamsNestedInput
    resources?: resourcesUpdateManyWithoutTeamsNestedInput
    team_members?: team_membersUpdateManyWithoutTeamsNestedInput
  }

  export type teamsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channels?: channelsUncheckedUpdateManyWithoutTeamsNestedInput
    projects?: projectsUncheckedUpdateManyWithoutTeamsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutTeamsNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutTeamsNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type teamsCreateManyInput = {
    id?: number
    name: string
    logo?: string | null
    plan?: string | null
    created_at?: Date | string | null
  }

  export type teamsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticket_commentsCreateInput = {
    comment: string
    created_at?: Date | string | null
    tickets: ticketsCreateNestedOneWithoutTicket_commentsInput
    users: usersCreateNestedOneWithoutTicket_commentsInput
  }

  export type ticket_commentsUncheckedCreateInput = {
    id?: number
    ticket_id: number
    user_id: number
    comment: string
    created_at?: Date | string | null
  }

  export type ticket_commentsUpdateInput = {
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: ticketsUpdateOneRequiredWithoutTicket_commentsNestedInput
    users?: usersUpdateOneRequiredWithoutTicket_commentsNestedInput
  }

  export type ticket_commentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticket_commentsCreateManyInput = {
    id?: number
    ticket_id: number
    user_id: number
    comment: string
    created_at?: Date | string | null
  }

  export type ticket_commentsUpdateManyMutationInput = {
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticket_commentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticket_historyCreateInput = {
    action: string
    performed_at?: Date | string | null
    details?: string | null
    tickets: ticketsCreateNestedOneWithoutTicket_historyInput
    users?: usersCreateNestedOneWithoutTicket_historyInput
  }

  export type ticket_historyUncheckedCreateInput = {
    id?: number
    ticket_id: number
    action: string
    performed_by?: number | null
    performed_at?: Date | string | null
    details?: string | null
  }

  export type ticket_historyUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    performed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    tickets?: ticketsUpdateOneRequiredWithoutTicket_historyNestedInput
    users?: usersUpdateOneWithoutTicket_historyNestedInput
  }

  export type ticket_historyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    performed_by?: NullableIntFieldUpdateOperationsInput | number | null
    performed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ticket_historyCreateManyInput = {
    id?: number
    ticket_id: number
    action: string
    performed_by?: number | null
    performed_at?: Date | string | null
    details?: string | null
  }

  export type ticket_historyUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    performed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ticket_historyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    performed_by?: NullableIntFieldUpdateOperationsInput | number | null
    performed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ticket_workflowCreateInput = {
    tickets: ticketsCreateNestedOneWithoutTicket_workflowInput
    workflows: workflowsCreateNestedOneWithoutTicket_workflowInput
    workflow_steps?: workflow_stepsCreateNestedOneWithoutTicket_workflowInput
  }

  export type ticket_workflowUncheckedCreateInput = {
    id?: number
    ticket_id: number
    workflow_id: number
    current_step?: number | null
  }

  export type ticket_workflowUpdateInput = {
    tickets?: ticketsUpdateOneRequiredWithoutTicket_workflowNestedInput
    workflows?: workflowsUpdateOneRequiredWithoutTicket_workflowNestedInput
    workflow_steps?: workflow_stepsUpdateOneWithoutTicket_workflowNestedInput
  }

  export type ticket_workflowUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    workflow_id?: IntFieldUpdateOperationsInput | number
    current_step?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ticket_workflowCreateManyInput = {
    id?: number
    ticket_id: number
    workflow_id: number
    current_step?: number | null
  }

  export type ticket_workflowUpdateManyMutationInput = {

  }

  export type ticket_workflowUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    workflow_id?: IntFieldUpdateOperationsInput | number
    current_step?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ticketsCreateInput = {
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    ticket_comments?: ticket_commentsCreateNestedManyWithoutTicketsInput
    ticket_history?: ticket_historyCreateNestedManyWithoutTicketsInput
    ticket_workflow?: ticket_workflowCreateNestedManyWithoutTicketsInput
    projects?: projectsCreateNestedOneWithoutTicketsInput
    users_tickets_created_byTousers?: usersCreateNestedOneWithoutTickets_tickets_created_byTousersInput
    users_tickets_assigned_toTousers?: usersCreateNestedOneWithoutTickets_tickets_assigned_toTousersInput
  }

  export type ticketsUncheckedCreateInput = {
    id?: number
    project_id?: number | null
    created_by?: number | null
    assigned_to?: number | null
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutTicketsInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutTicketsInput
    ticket_workflow?: ticket_workflowUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type ticketsUpdateInput = {
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_comments?: ticket_commentsUpdateManyWithoutTicketsNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutTicketsNestedInput
    ticket_workflow?: ticket_workflowUpdateManyWithoutTicketsNestedInput
    projects?: projectsUpdateOneWithoutTicketsNestedInput
    users_tickets_created_byTousers?: usersUpdateOneWithoutTickets_tickets_created_byTousersNestedInput
    users_tickets_assigned_toTousers?: usersUpdateOneWithoutTickets_tickets_assigned_toTousersNestedInput
  }

  export type ticketsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    assigned_to?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutTicketsNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutTicketsNestedInput
    ticket_workflow?: ticket_workflowUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type ticketsCreateManyInput = {
    id?: number
    project_id?: number | null
    created_by?: number | null
    assigned_to?: number | null
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ticketsUpdateManyMutationInput = {
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticketsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    assigned_to?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersCreateInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsCreateNestedManyWithoutUsersInput
    messages?: messagesCreateNestedManyWithoutUsersInput
    permissions?: permissionsCreateNestedManyWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
    resources?: resourcesCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesCreateNestedManyWithoutUsersInput
    tasks?: tasksCreateNestedManyWithoutUsersInput
    team_members?: team_membersCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsUncheckedCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsUncheckedCreateNestedManyWithoutUsersInput
    messages?: messagesUncheckedCreateNestedManyWithoutUsersInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutUsersInput
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
    resources?: resourcesUncheckedCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutUsersInput
    tasks?: tasksUncheckedCreateNestedManyWithoutUsersInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUpdateManyWithoutUsersNestedInput
    messages?: messagesUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUpdateManyWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
    resources?: resourcesUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutUsersNestedInput
    tasks?: tasksUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUncheckedUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUncheckedUpdateManyWithoutUsersNestedInput
    messages?: messagesUncheckedUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutUsersNestedInput
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutUsersNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
  }

  export type usersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
  }

  export type workflow_stepsCreateInput = {
    step_order: number
    name: string
    action?: string | null
    ticket_workflow?: ticket_workflowCreateNestedManyWithoutWorkflow_stepsInput
    workflows: workflowsCreateNestedOneWithoutWorkflow_stepsInput
  }

  export type workflow_stepsUncheckedCreateInput = {
    id?: number
    workflow_id: number
    step_order: number
    name: string
    action?: string | null
    ticket_workflow?: ticket_workflowUncheckedCreateNestedManyWithoutWorkflow_stepsInput
  }

  export type workflow_stepsUpdateInput = {
    step_order?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_workflow?: ticket_workflowUpdateManyWithoutWorkflow_stepsNestedInput
    workflows?: workflowsUpdateOneRequiredWithoutWorkflow_stepsNestedInput
  }

  export type workflow_stepsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workflow_id?: IntFieldUpdateOperationsInput | number
    step_order?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_workflow?: ticket_workflowUncheckedUpdateManyWithoutWorkflow_stepsNestedInput
  }

  export type workflow_stepsCreateManyInput = {
    id?: number
    workflow_id: number
    step_order: number
    name: string
    action?: string | null
  }

  export type workflow_stepsUpdateManyMutationInput = {
    step_order?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type workflow_stepsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workflow_id?: IntFieldUpdateOperationsInput | number
    step_order?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type workflowsCreateInput = {
    name: string
    description?: string | null
    ticket_workflow?: ticket_workflowCreateNestedManyWithoutWorkflowsInput
    workflow_steps?: workflow_stepsCreateNestedManyWithoutWorkflowsInput
  }

  export type workflowsUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    ticket_workflow?: ticket_workflowUncheckedCreateNestedManyWithoutWorkflowsInput
    workflow_steps?: workflow_stepsUncheckedCreateNestedManyWithoutWorkflowsInput
  }

  export type workflowsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_workflow?: ticket_workflowUpdateManyWithoutWorkflowsNestedInput
    workflow_steps?: workflow_stepsUpdateManyWithoutWorkflowsNestedInput
  }

  export type workflowsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_workflow?: ticket_workflowUncheckedUpdateManyWithoutWorkflowsNestedInput
    workflow_steps?: workflow_stepsUncheckedUpdateManyWithoutWorkflowsNestedInput
  }

  export type workflowsCreateManyInput = {
    id?: number
    name: string
    description?: string | null
  }

  export type workflowsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type workflowsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type Enumassets_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.assets_status | Enumassets_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.assets_status[] | null
    notIn?: $Enums.assets_status[] | null
    not?: NestedEnumassets_statusNullableFilter<$PrismaModel> | $Enums.assets_status | null
  }

  export type UsersNullableScalarRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type assetsOrderByRelevanceInput = {
    fields: assetsOrderByRelevanceFieldEnum | assetsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type assetsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    serial_number?: SortOrder
    assigned_to?: SortOrder
    status?: SortOrder
  }

  export type assetsAvgOrderByAggregateInput = {
    id?: SortOrder
    assigned_to?: SortOrder
  }

  export type assetsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    serial_number?: SortOrder
    assigned_to?: SortOrder
    status?: SortOrder
  }

  export type assetsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    serial_number?: SortOrder
    assigned_to?: SortOrder
    status?: SortOrder
  }

  export type assetsSumOrderByAggregateInput = {
    id?: SortOrder
    assigned_to?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type Enumassets_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.assets_status | Enumassets_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.assets_status[] | null
    notIn?: $Enums.assets_status[] | null
    not?: NestedEnumassets_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.assets_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumassets_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumassets_statusNullableFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ProjectsScalarRelationFilter = {
    is?: projectsWhereInput
    isNot?: projectsWhereInput
  }

  export type budgetsOrderByRelevanceInput = {
    fields: budgetsOrderByRelevanceFieldEnum | budgetsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type budgetsCountOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type budgetsAvgOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    amount?: SortOrder
  }

  export type budgetsMaxOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type budgetsMinOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type budgetsSumOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    amount?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ChannelsScalarRelationFilter = {
    is?: channelsWhereInput
    isNot?: channelsWhereInput
  }

  export type UsersScalarRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type channel_membersCountOrderByAggregateInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
  }

  export type channel_membersAvgOrderByAggregateInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
  }

  export type channel_membersMaxOrderByAggregateInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
  }

  export type channel_membersMinOrderByAggregateInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
  }

  export type channel_membersSumOrderByAggregateInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
  }

  export type Enumchannels_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.channels_type | Enumchannels_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.channels_type[] | null
    notIn?: $Enums.channels_type[] | null
    not?: NestedEnumchannels_typeNullableFilter<$PrismaModel> | $Enums.channels_type | null
  }

  export type Channel_membersListRelationFilter = {
    every?: channel_membersWhereInput
    some?: channel_membersWhereInput
    none?: channel_membersWhereInput
  }

  export type TeamsNullableScalarRelationFilter = {
    is?: teamsWhereInput | null
    isNot?: teamsWhereInput | null
  }

  export type MessagesListRelationFilter = {
    every?: messagesWhereInput
    some?: messagesWhereInput
    none?: messagesWhereInput
  }

  export type channel_membersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type messagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type channelsOrderByRelevanceInput = {
    fields: channelsOrderByRelevanceFieldEnum | channelsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type channelsCountOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    name?: SortOrder
    type?: SortOrder
  }

  export type channelsAvgOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
  }

  export type channelsMaxOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    name?: SortOrder
    type?: SortOrder
  }

  export type channelsMinOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    name?: SortOrder
    type?: SortOrder
  }

  export type channelsSumOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
  }

  export type Enumchannels_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.channels_type | Enumchannels_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.channels_type[] | null
    notIn?: $Enums.channels_type[] | null
    not?: NestedEnumchannels_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.channels_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumchannels_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumchannels_typeNullableFilter<$PrismaModel>
  }

  export type LeadsListRelationFilter = {
    every?: leadsWhereInput
    some?: leadsWhereInput
    none?: leadsWhereInput
  }

  export type leadsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type clientsOrderByRelevanceInput = {
    fields: clientsOrderByRelevanceFieldEnum | clientsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type clientsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    company?: SortOrder
    created_at?: SortOrder
  }

  export type clientsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type clientsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    company?: SortOrder
    created_at?: SortOrder
  }

  export type clientsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    company?: SortOrder
    created_at?: SortOrder
  }

  export type clientsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type Enumcontracts_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.contracts_status | Enumcontracts_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.contracts_status[] | null
    notIn?: $Enums.contracts_status[] | null
    not?: NestedEnumcontracts_statusNullableFilter<$PrismaModel> | $Enums.contracts_status | null
  }

  export type SuppliersNullableScalarRelationFilter = {
    is?: suppliersWhereInput | null
    isNot?: suppliersWhereInput | null
  }

  export type ProjectsNullableScalarRelationFilter = {
    is?: projectsWhereInput | null
    isNot?: projectsWhereInput | null
  }

  export type contractsOrderByRelevanceInput = {
    fields: contractsOrderByRelevanceFieldEnum | contractsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type contractsCountOrderByAggregateInput = {
    id?: SortOrder
    supplier_id?: SortOrder
    project_id?: SortOrder
    description?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    amount?: SortOrder
    status?: SortOrder
  }

  export type contractsAvgOrderByAggregateInput = {
    id?: SortOrder
    supplier_id?: SortOrder
    project_id?: SortOrder
    amount?: SortOrder
  }

  export type contractsMaxOrderByAggregateInput = {
    id?: SortOrder
    supplier_id?: SortOrder
    project_id?: SortOrder
    description?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    amount?: SortOrder
    status?: SortOrder
  }

  export type contractsMinOrderByAggregateInput = {
    id?: SortOrder
    supplier_id?: SortOrder
    project_id?: SortOrder
    description?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    amount?: SortOrder
    status?: SortOrder
  }

  export type contractsSumOrderByAggregateInput = {
    id?: SortOrder
    supplier_id?: SortOrder
    project_id?: SortOrder
    amount?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type Enumcontracts_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.contracts_status | Enumcontracts_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.contracts_status[] | null
    notIn?: $Enums.contracts_status[] | null
    not?: NestedEnumcontracts_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.contracts_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumcontracts_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumcontracts_statusNullableFilter<$PrismaModel>
  }

  export type costsOrderByRelevanceInput = {
    fields: costsOrderByRelevanceFieldEnum | costsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type costsCountOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    date?: SortOrder
  }

  export type costsAvgOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    amount?: SortOrder
  }

  export type costsMaxOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    date?: SortOrder
  }

  export type costsMinOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    date?: SortOrder
  }

  export type costsSumOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    amount?: SortOrder
  }

  export type Enumdocuments_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.documents_type | Enumdocuments_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.documents_type[] | null
    notIn?: $Enums.documents_type[] | null
    not?: NestedEnumdocuments_typeNullableFilter<$PrismaModel> | $Enums.documents_type | null
  }

  export type documentsOrderByRelevanceInput = {
    fields: documentsOrderByRelevanceFieldEnum | documentsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type documentsCountOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    name?: SortOrder
    content?: SortOrder
    type?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type documentsAvgOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    created_by?: SortOrder
  }

  export type documentsMaxOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    name?: SortOrder
    content?: SortOrder
    type?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type documentsMinOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    name?: SortOrder
    content?: SortOrder
    type?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type documentsSumOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    created_by?: SortOrder
  }

  export type Enumdocuments_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.documents_type | Enumdocuments_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.documents_type[] | null
    notIn?: $Enums.documents_type[] | null
    not?: NestedEnumdocuments_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.documents_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumdocuments_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumdocuments_typeNullableFilter<$PrismaModel>
  }

  export type Enumevents_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.events_type | Enumevents_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.events_type[] | null
    notIn?: $Enums.events_type[] | null
    not?: NestedEnumevents_typeNullableFilter<$PrismaModel> | $Enums.events_type | null
  }

  export type eventsOrderByRelevanceInput = {
    fields: eventsOrderByRelevanceFieldEnum | eventsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type eventsCountOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    start_datetime?: SortOrder
    end_datetime?: SortOrder
    type?: SortOrder
  }

  export type eventsAvgOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
  }

  export type eventsMaxOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    start_datetime?: SortOrder
    end_datetime?: SortOrder
    type?: SortOrder
  }

  export type eventsMinOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    start_datetime?: SortOrder
    end_datetime?: SortOrder
    type?: SortOrder
  }

  export type eventsSumOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
  }

  export type Enumevents_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.events_type | Enumevents_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.events_type[] | null
    notIn?: $Enums.events_type[] | null
    not?: NestedEnumevents_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.events_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumevents_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumevents_typeNullableFilter<$PrismaModel>
  }

  export type Enumhr_records_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.hr_records_type | Enumhr_records_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.hr_records_type[] | null
    notIn?: $Enums.hr_records_type[] | null
    not?: NestedEnumhr_records_typeNullableFilter<$PrismaModel> | $Enums.hr_records_type | null
  }

  export type hr_recordsOrderByRelevanceInput = {
    fields: hr_recordsOrderByRelevanceFieldEnum | hr_recordsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type hr_recordsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    details?: SortOrder
    date?: SortOrder
  }

  export type hr_recordsAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type hr_recordsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    details?: SortOrder
    date?: SortOrder
  }

  export type hr_recordsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    details?: SortOrder
    date?: SortOrder
  }

  export type hr_recordsSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type Enumhr_records_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.hr_records_type | Enumhr_records_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.hr_records_type[] | null
    notIn?: $Enums.hr_records_type[] | null
    not?: NestedEnumhr_records_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.hr_records_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumhr_records_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumhr_records_typeNullableFilter<$PrismaModel>
  }

  export type Enumleads_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.leads_status | Enumleads_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.leads_status[] | null
    notIn?: $Enums.leads_status[] | null
    not?: NestedEnumleads_statusNullableFilter<$PrismaModel> | $Enums.leads_status | null
  }

  export type ClientsNullableScalarRelationFilter = {
    is?: clientsWhereInput | null
    isNot?: clientsWhereInput | null
  }

  export type leadsOrderByRelevanceInput = {
    fields: leadsOrderByRelevanceFieldEnum | leadsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type leadsCountOrderByAggregateInput = {
    id?: SortOrder
    client_id?: SortOrder
    project_id?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
  }

  export type leadsAvgOrderByAggregateInput = {
    id?: SortOrder
    client_id?: SortOrder
    project_id?: SortOrder
  }

  export type leadsMaxOrderByAggregateInput = {
    id?: SortOrder
    client_id?: SortOrder
    project_id?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
  }

  export type leadsMinOrderByAggregateInput = {
    id?: SortOrder
    client_id?: SortOrder
    project_id?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
  }

  export type leadsSumOrderByAggregateInput = {
    id?: SortOrder
    client_id?: SortOrder
    project_id?: SortOrder
  }

  export type Enumleads_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.leads_status | Enumleads_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.leads_status[] | null
    notIn?: $Enums.leads_status[] | null
    not?: NestedEnumleads_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.leads_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumleads_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumleads_statusNullableFilter<$PrismaModel>
  }

  export type messagesOrderByRelevanceInput = {
    fields: messagesOrderByRelevanceFieldEnum | messagesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type messagesCountOrderByAggregateInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
  }

  export type messagesAvgOrderByAggregateInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
  }

  export type messagesMaxOrderByAggregateInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
  }

  export type messagesMinOrderByAggregateInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
  }

  export type messagesSumOrderByAggregateInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
  }

  export type permissionsOrderByRelevanceInput = {
    fields: permissionsOrderByRelevanceFieldEnum | permissionsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type permissionsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    project_id?: SortOrder
    permission?: SortOrder
  }

  export type permissionsAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    project_id?: SortOrder
  }

  export type permissionsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    project_id?: SortOrder
    permission?: SortOrder
  }

  export type permissionsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    project_id?: SortOrder
    permission?: SortOrder
  }

  export type permissionsSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    project_id?: SortOrder
  }

  export type ResourcesScalarRelationFilter = {
    is?: resourcesWhereInput
    isNot?: resourcesWhereInput
  }

  export type project_resourcesCountOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    resource_id?: SortOrder
    assigned_from?: SortOrder
    assigned_to?: SortOrder
  }

  export type project_resourcesAvgOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    resource_id?: SortOrder
  }

  export type project_resourcesMaxOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    resource_id?: SortOrder
    assigned_from?: SortOrder
    assigned_to?: SortOrder
  }

  export type project_resourcesMinOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    resource_id?: SortOrder
    assigned_from?: SortOrder
    assigned_to?: SortOrder
  }

  export type project_resourcesSumOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    resource_id?: SortOrder
  }

  export type Enumprojects_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.projects_status | Enumprojects_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.projects_status[] | null
    notIn?: $Enums.projects_status[] | null
    not?: NestedEnumprojects_statusNullableFilter<$PrismaModel> | $Enums.projects_status | null
  }

  export type BudgetsListRelationFilter = {
    every?: budgetsWhereInput
    some?: budgetsWhereInput
    none?: budgetsWhereInput
  }

  export type ContractsListRelationFilter = {
    every?: contractsWhereInput
    some?: contractsWhereInput
    none?: contractsWhereInput
  }

  export type CostsListRelationFilter = {
    every?: costsWhereInput
    some?: costsWhereInput
    none?: costsWhereInput
  }

  export type DocumentsListRelationFilter = {
    every?: documentsWhereInput
    some?: documentsWhereInput
    none?: documentsWhereInput
  }

  export type EventsListRelationFilter = {
    every?: eventsWhereInput
    some?: eventsWhereInput
    none?: eventsWhereInput
  }

  export type PermissionsListRelationFilter = {
    every?: permissionsWhereInput
    some?: permissionsWhereInput
    none?: permissionsWhereInput
  }

  export type Project_resourcesListRelationFilter = {
    every?: project_resourcesWhereInput
    some?: project_resourcesWhereInput
    none?: project_resourcesWhereInput
  }

  export type ReportsListRelationFilter = {
    every?: reportsWhereInput
    some?: reportsWhereInput
    none?: reportsWhereInput
  }

  export type SprintsListRelationFilter = {
    every?: sprintsWhereInput
    some?: sprintsWhereInput
    none?: sprintsWhereInput
  }

  export type TasksListRelationFilter = {
    every?: tasksWhereInput
    some?: tasksWhereInput
    none?: tasksWhereInput
  }

  export type TicketsListRelationFilter = {
    every?: ticketsWhereInput
    some?: ticketsWhereInput
    none?: ticketsWhereInput
  }

  export type budgetsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type contractsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type costsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type documentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type eventsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type permissionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type project_resourcesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reportsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type sprintsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tasksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ticketsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type projectsOrderByRelevanceInput = {
    fields: projectsOrderByRelevanceFieldEnum | projectsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type projectsCountOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    created_at?: SortOrder
  }

  export type projectsAvgOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
  }

  export type projectsMaxOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    created_at?: SortOrder
  }

  export type projectsMinOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    created_at?: SortOrder
  }

  export type projectsSumOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
  }

  export type Enumprojects_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.projects_status | Enumprojects_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.projects_status[] | null
    notIn?: $Enums.projects_status[] | null
    not?: NestedEnumprojects_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.projects_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumprojects_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumprojects_statusNullableFilter<$PrismaModel>
  }

  export type Enumreports_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.reports_type | Enumreports_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.reports_type[] | null
    notIn?: $Enums.reports_type[] | null
    not?: NestedEnumreports_typeNullableFilter<$PrismaModel> | $Enums.reports_type | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type reportsCountOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    data?: SortOrder
    created_at?: SortOrder
  }

  export type reportsAvgOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
  }

  export type reportsMaxOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    created_at?: SortOrder
  }

  export type reportsMinOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    created_at?: SortOrder
  }

  export type reportsSumOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
  }

  export type Enumreports_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.reports_type | Enumreports_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.reports_type[] | null
    notIn?: $Enums.reports_type[] | null
    not?: NestedEnumreports_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.reports_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumreports_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumreports_typeNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type Enumresources_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.resources_type | Enumresources_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.resources_type[] | null
    notIn?: $Enums.resources_type[] | null
    not?: NestedEnumresources_typeNullableFilter<$PrismaModel> | $Enums.resources_type | null
  }

  export type Enumresources_availabilityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.resources_availability | Enumresources_availabilityFieldRefInput<$PrismaModel> | null
    in?: $Enums.resources_availability[] | null
    notIn?: $Enums.resources_availability[] | null
    not?: NestedEnumresources_availabilityNullableFilter<$PrismaModel> | $Enums.resources_availability | null
  }

  export type resourcesOrderByRelevanceInput = {
    fields: resourcesOrderByRelevanceFieldEnum | resourcesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type resourcesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
    team_id?: SortOrder
    availability?: SortOrder
  }

  export type resourcesAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    team_id?: SortOrder
  }

  export type resourcesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
    team_id?: SortOrder
    availability?: SortOrder
  }

  export type resourcesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
    team_id?: SortOrder
    availability?: SortOrder
  }

  export type resourcesSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    team_id?: SortOrder
  }

  export type Enumresources_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.resources_type | Enumresources_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.resources_type[] | null
    notIn?: $Enums.resources_type[] | null
    not?: NestedEnumresources_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.resources_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumresources_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumresources_typeNullableFilter<$PrismaModel>
  }

  export type Enumresources_availabilityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.resources_availability | Enumresources_availabilityFieldRefInput<$PrismaModel> | null
    in?: $Enums.resources_availability[] | null
    notIn?: $Enums.resources_availability[] | null
    not?: NestedEnumresources_availabilityNullableWithAggregatesFilter<$PrismaModel> | $Enums.resources_availability | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumresources_availabilityNullableFilter<$PrismaModel>
    _max?: NestedEnumresources_availabilityNullableFilter<$PrismaModel>
  }

  export type SprintsScalarRelationFilter = {
    is?: sprintsWhereInput
    isNot?: sprintsWhereInput
  }

  export type TasksScalarRelationFilter = {
    is?: tasksWhereInput
    isNot?: tasksWhereInput
  }

  export type sprint_tasksCountOrderByAggregateInput = {
    id?: SortOrder
    sprint_id?: SortOrder
    task_id?: SortOrder
  }

  export type sprint_tasksAvgOrderByAggregateInput = {
    id?: SortOrder
    sprint_id?: SortOrder
    task_id?: SortOrder
  }

  export type sprint_tasksMaxOrderByAggregateInput = {
    id?: SortOrder
    sprint_id?: SortOrder
    task_id?: SortOrder
  }

  export type sprint_tasksMinOrderByAggregateInput = {
    id?: SortOrder
    sprint_id?: SortOrder
    task_id?: SortOrder
  }

  export type sprint_tasksSumOrderByAggregateInput = {
    id?: SortOrder
    sprint_id?: SortOrder
    task_id?: SortOrder
  }

  export type Enumsprints_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.sprints_status | Enumsprints_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.sprints_status[] | null
    notIn?: $Enums.sprints_status[] | null
    not?: NestedEnumsprints_statusNullableFilter<$PrismaModel> | $Enums.sprints_status | null
  }

  export type Sprint_tasksListRelationFilter = {
    every?: sprint_tasksWhereInput
    some?: sprint_tasksWhereInput
    none?: sprint_tasksWhereInput
  }

  export type sprint_tasksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type sprintsOrderByRelevanceInput = {
    fields: sprintsOrderByRelevanceFieldEnum | sprintsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type sprintsCountOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    name?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    goal?: SortOrder
    status?: SortOrder
  }

  export type sprintsAvgOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
  }

  export type sprintsMaxOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    name?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    goal?: SortOrder
    status?: SortOrder
  }

  export type sprintsMinOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    name?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    goal?: SortOrder
    status?: SortOrder
  }

  export type sprintsSumOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
  }

  export type Enumsprints_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.sprints_status | Enumsprints_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.sprints_status[] | null
    notIn?: $Enums.sprints_status[] | null
    not?: NestedEnumsprints_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.sprints_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumsprints_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumsprints_statusNullableFilter<$PrismaModel>
  }

  export type suppliersOrderByRelevanceInput = {
    fields: suppliersOrderByRelevanceFieldEnum | suppliersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type suppliersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contact_info?: SortOrder
  }

  export type suppliersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type suppliersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contact_info?: SortOrder
  }

  export type suppliersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contact_info?: SortOrder
  }

  export type suppliersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type task_assigneesCountOrderByAggregateInput = {
    id?: SortOrder
    task_id?: SortOrder
    user_id?: SortOrder
  }

  export type task_assigneesAvgOrderByAggregateInput = {
    id?: SortOrder
    task_id?: SortOrder
    user_id?: SortOrder
  }

  export type task_assigneesMaxOrderByAggregateInput = {
    id?: SortOrder
    task_id?: SortOrder
    user_id?: SortOrder
  }

  export type task_assigneesMinOrderByAggregateInput = {
    id?: SortOrder
    task_id?: SortOrder
    user_id?: SortOrder
  }

  export type task_assigneesSumOrderByAggregateInput = {
    id?: SortOrder
    task_id?: SortOrder
    user_id?: SortOrder
  }

  export type Task_labelsScalarRelationFilter = {
    is?: task_labelsWhereInput
    isNot?: task_labelsWhereInput
  }

  export type task_label_linksCountOrderByAggregateInput = {
    id?: SortOrder
    task_id?: SortOrder
    label_id?: SortOrder
  }

  export type task_label_linksAvgOrderByAggregateInput = {
    id?: SortOrder
    task_id?: SortOrder
    label_id?: SortOrder
  }

  export type task_label_linksMaxOrderByAggregateInput = {
    id?: SortOrder
    task_id?: SortOrder
    label_id?: SortOrder
  }

  export type task_label_linksMinOrderByAggregateInput = {
    id?: SortOrder
    task_id?: SortOrder
    label_id?: SortOrder
  }

  export type task_label_linksSumOrderByAggregateInput = {
    id?: SortOrder
    task_id?: SortOrder
    label_id?: SortOrder
  }

  export type Task_label_linksListRelationFilter = {
    every?: task_label_linksWhereInput
    some?: task_label_linksWhereInput
    none?: task_label_linksWhereInput
  }

  export type task_label_linksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type task_labelsOrderByRelevanceInput = {
    fields: task_labelsOrderByRelevanceFieldEnum | task_labelsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type task_labelsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type task_labelsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type task_labelsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type task_labelsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type task_labelsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Enumtasks_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.tasks_status | Enumtasks_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.tasks_status[] | null
    notIn?: $Enums.tasks_status[] | null
    not?: NestedEnumtasks_statusNullableFilter<$PrismaModel> | $Enums.tasks_status | null
  }

  export type Enumtasks_priorityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.tasks_priority | Enumtasks_priorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.tasks_priority[] | null
    notIn?: $Enums.tasks_priority[] | null
    not?: NestedEnumtasks_priorityNullableFilter<$PrismaModel> | $Enums.tasks_priority | null
  }

  export type Task_assigneesListRelationFilter = {
    every?: task_assigneesWhereInput
    some?: task_assigneesWhereInput
    none?: task_assigneesWhereInput
  }

  export type TasksNullableScalarRelationFilter = {
    is?: tasksWhereInput | null
    isNot?: tasksWhereInput | null
  }

  export type task_assigneesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tasksOrderByRelevanceInput = {
    fields: tasksOrderByRelevanceFieldEnum | tasksOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type tasksCountOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    parent_task_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    due_date?: SortOrder
    wip_limit?: SortOrder
    swimlane?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type tasksAvgOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    parent_task_id?: SortOrder
    wip_limit?: SortOrder
    created_by?: SortOrder
  }

  export type tasksMaxOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    parent_task_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    due_date?: SortOrder
    wip_limit?: SortOrder
    swimlane?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type tasksMinOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    parent_task_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    due_date?: SortOrder
    wip_limit?: SortOrder
    swimlane?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type tasksSumOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    parent_task_id?: SortOrder
    wip_limit?: SortOrder
    created_by?: SortOrder
  }

  export type Enumtasks_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.tasks_status | Enumtasks_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.tasks_status[] | null
    notIn?: $Enums.tasks_status[] | null
    not?: NestedEnumtasks_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.tasks_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumtasks_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumtasks_statusNullableFilter<$PrismaModel>
  }

  export type Enumtasks_priorityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.tasks_priority | Enumtasks_priorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.tasks_priority[] | null
    notIn?: $Enums.tasks_priority[] | null
    not?: NestedEnumtasks_priorityNullableWithAggregatesFilter<$PrismaModel> | $Enums.tasks_priority | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumtasks_priorityNullableFilter<$PrismaModel>
    _max?: NestedEnumtasks_priorityNullableFilter<$PrismaModel>
  }

  export type Enumteam_members_roleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.team_members_role | Enumteam_members_roleFieldRefInput<$PrismaModel> | null
    in?: $Enums.team_members_role[] | null
    notIn?: $Enums.team_members_role[] | null
    not?: NestedEnumteam_members_roleNullableFilter<$PrismaModel> | $Enums.team_members_role | null
  }

  export type TeamsScalarRelationFilter = {
    is?: teamsWhereInput
    isNot?: teamsWhereInput
  }

  export type team_membersCountOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
    role?: SortOrder
  }

  export type team_membersAvgOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
  }

  export type team_membersMaxOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
    role?: SortOrder
  }

  export type team_membersMinOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
    role?: SortOrder
  }

  export type team_membersSumOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
  }

  export type Enumteam_members_roleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.team_members_role | Enumteam_members_roleFieldRefInput<$PrismaModel> | null
    in?: $Enums.team_members_role[] | null
    notIn?: $Enums.team_members_role[] | null
    not?: NestedEnumteam_members_roleNullableWithAggregatesFilter<$PrismaModel> | $Enums.team_members_role | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumteam_members_roleNullableFilter<$PrismaModel>
    _max?: NestedEnumteam_members_roleNullableFilter<$PrismaModel>
  }

  export type ChannelsListRelationFilter = {
    every?: channelsWhereInput
    some?: channelsWhereInput
    none?: channelsWhereInput
  }

  export type ProjectsListRelationFilter = {
    every?: projectsWhereInput
    some?: projectsWhereInput
    none?: projectsWhereInput
  }

  export type ResourcesListRelationFilter = {
    every?: resourcesWhereInput
    some?: resourcesWhereInput
    none?: resourcesWhereInput
  }

  export type Team_membersListRelationFilter = {
    every?: team_membersWhereInput
    some?: team_membersWhereInput
    none?: team_membersWhereInput
  }

  export type channelsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type projectsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type resourcesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type team_membersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type teamsOrderByRelevanceInput = {
    fields: teamsOrderByRelevanceFieldEnum | teamsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type teamsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    plan?: SortOrder
    created_at?: SortOrder
  }

  export type teamsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type teamsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    plan?: SortOrder
    created_at?: SortOrder
  }

  export type teamsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    plan?: SortOrder
    created_at?: SortOrder
  }

  export type teamsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TicketsScalarRelationFilter = {
    is?: ticketsWhereInput
    isNot?: ticketsWhereInput
  }

  export type ticket_commentsOrderByRelevanceInput = {
    fields: ticket_commentsOrderByRelevanceFieldEnum | ticket_commentsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ticket_commentsCountOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    user_id?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
  }

  export type ticket_commentsAvgOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    user_id?: SortOrder
  }

  export type ticket_commentsMaxOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    user_id?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
  }

  export type ticket_commentsMinOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    user_id?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
  }

  export type ticket_commentsSumOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    user_id?: SortOrder
  }

  export type ticket_historyOrderByRelevanceInput = {
    fields: ticket_historyOrderByRelevanceFieldEnum | ticket_historyOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ticket_historyCountOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    action?: SortOrder
    performed_by?: SortOrder
    performed_at?: SortOrder
    details?: SortOrder
  }

  export type ticket_historyAvgOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    performed_by?: SortOrder
  }

  export type ticket_historyMaxOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    action?: SortOrder
    performed_by?: SortOrder
    performed_at?: SortOrder
    details?: SortOrder
  }

  export type ticket_historyMinOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    action?: SortOrder
    performed_by?: SortOrder
    performed_at?: SortOrder
    details?: SortOrder
  }

  export type ticket_historySumOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    performed_by?: SortOrder
  }

  export type WorkflowsScalarRelationFilter = {
    is?: workflowsWhereInput
    isNot?: workflowsWhereInput
  }

  export type Workflow_stepsNullableScalarRelationFilter = {
    is?: workflow_stepsWhereInput | null
    isNot?: workflow_stepsWhereInput | null
  }

  export type ticket_workflowCountOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    workflow_id?: SortOrder
    current_step?: SortOrder
  }

  export type ticket_workflowAvgOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    workflow_id?: SortOrder
    current_step?: SortOrder
  }

  export type ticket_workflowMaxOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    workflow_id?: SortOrder
    current_step?: SortOrder
  }

  export type ticket_workflowMinOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    workflow_id?: SortOrder
    current_step?: SortOrder
  }

  export type ticket_workflowSumOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    workflow_id?: SortOrder
    current_step?: SortOrder
  }

  export type Enumtickets_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.tickets_type | Enumtickets_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.tickets_type[] | null
    notIn?: $Enums.tickets_type[] | null
    not?: NestedEnumtickets_typeNullableFilter<$PrismaModel> | $Enums.tickets_type | null
  }

  export type Enumtickets_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.tickets_status | Enumtickets_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.tickets_status[] | null
    notIn?: $Enums.tickets_status[] | null
    not?: NestedEnumtickets_statusNullableFilter<$PrismaModel> | $Enums.tickets_status | null
  }

  export type Enumtickets_priorityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.tickets_priority | Enumtickets_priorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.tickets_priority[] | null
    notIn?: $Enums.tickets_priority[] | null
    not?: NestedEnumtickets_priorityNullableFilter<$PrismaModel> | $Enums.tickets_priority | null
  }

  export type Ticket_commentsListRelationFilter = {
    every?: ticket_commentsWhereInput
    some?: ticket_commentsWhereInput
    none?: ticket_commentsWhereInput
  }

  export type Ticket_historyListRelationFilter = {
    every?: ticket_historyWhereInput
    some?: ticket_historyWhereInput
    none?: ticket_historyWhereInput
  }

  export type Ticket_workflowListRelationFilter = {
    every?: ticket_workflowWhereInput
    some?: ticket_workflowWhereInput
    none?: ticket_workflowWhereInput
  }

  export type ticket_commentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ticket_historyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ticket_workflowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ticketsOrderByRelevanceInput = {
    fields: ticketsOrderByRelevanceFieldEnum | ticketsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ticketsCountOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    created_by?: SortOrder
    assigned_to?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    sla_hours?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ticketsAvgOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    created_by?: SortOrder
    assigned_to?: SortOrder
    sla_hours?: SortOrder
  }

  export type ticketsMaxOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    created_by?: SortOrder
    assigned_to?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    sla_hours?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ticketsMinOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    created_by?: SortOrder
    assigned_to?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    sla_hours?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ticketsSumOrderByAggregateInput = {
    id?: SortOrder
    project_id?: SortOrder
    created_by?: SortOrder
    assigned_to?: SortOrder
    sla_hours?: SortOrder
  }

  export type Enumtickets_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.tickets_type | Enumtickets_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.tickets_type[] | null
    notIn?: $Enums.tickets_type[] | null
    not?: NestedEnumtickets_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.tickets_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumtickets_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumtickets_typeNullableFilter<$PrismaModel>
  }

  export type Enumtickets_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.tickets_status | Enumtickets_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.tickets_status[] | null
    notIn?: $Enums.tickets_status[] | null
    not?: NestedEnumtickets_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.tickets_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumtickets_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumtickets_statusNullableFilter<$PrismaModel>
  }

  export type Enumtickets_priorityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.tickets_priority | Enumtickets_priorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.tickets_priority[] | null
    notIn?: $Enums.tickets_priority[] | null
    not?: NestedEnumtickets_priorityNullableWithAggregatesFilter<$PrismaModel> | $Enums.tickets_priority | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumtickets_priorityNullableFilter<$PrismaModel>
    _max?: NestedEnumtickets_priorityNullableFilter<$PrismaModel>
  }

  export type Enumusers_roleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel> | null
    in?: $Enums.users_role[] | null
    notIn?: $Enums.users_role[] | null
    not?: NestedEnumusers_roleNullableFilter<$PrismaModel> | $Enums.users_role | null
  }

  export type AssetsListRelationFilter = {
    every?: assetsWhereInput
    some?: assetsWhereInput
    none?: assetsWhereInput
  }

  export type Hr_recordsListRelationFilter = {
    every?: hr_recordsWhereInput
    some?: hr_recordsWhereInput
    none?: hr_recordsWhereInput
  }

  export type assetsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type hr_recordsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersOrderByRelevanceInput = {
    fields: usersOrderByRelevanceFieldEnum | usersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    avatar?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    last_name?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    avatar?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    last_name?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    avatar?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    last_name?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Enumusers_roleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel> | null
    in?: $Enums.users_role[] | null
    notIn?: $Enums.users_role[] | null
    not?: NestedEnumusers_roleNullableWithAggregatesFilter<$PrismaModel> | $Enums.users_role | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumusers_roleNullableFilter<$PrismaModel>
    _max?: NestedEnumusers_roleNullableFilter<$PrismaModel>
  }

  export type workflow_stepsOrderByRelevanceInput = {
    fields: workflow_stepsOrderByRelevanceFieldEnum | workflow_stepsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type workflow_stepsCountOrderByAggregateInput = {
    id?: SortOrder
    workflow_id?: SortOrder
    step_order?: SortOrder
    name?: SortOrder
    action?: SortOrder
  }

  export type workflow_stepsAvgOrderByAggregateInput = {
    id?: SortOrder
    workflow_id?: SortOrder
    step_order?: SortOrder
  }

  export type workflow_stepsMaxOrderByAggregateInput = {
    id?: SortOrder
    workflow_id?: SortOrder
    step_order?: SortOrder
    name?: SortOrder
    action?: SortOrder
  }

  export type workflow_stepsMinOrderByAggregateInput = {
    id?: SortOrder
    workflow_id?: SortOrder
    step_order?: SortOrder
    name?: SortOrder
    action?: SortOrder
  }

  export type workflow_stepsSumOrderByAggregateInput = {
    id?: SortOrder
    workflow_id?: SortOrder
    step_order?: SortOrder
  }

  export type Workflow_stepsListRelationFilter = {
    every?: workflow_stepsWhereInput
    some?: workflow_stepsWhereInput
    none?: workflow_stepsWhereInput
  }

  export type workflow_stepsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type workflowsOrderByRelevanceInput = {
    fields: workflowsOrderByRelevanceFieldEnum | workflowsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type workflowsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type workflowsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type workflowsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type workflowsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type workflowsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersCreateNestedOneWithoutAssetsInput = {
    create?: XOR<usersCreateWithoutAssetsInput, usersUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: usersCreateOrConnectWithoutAssetsInput
    connect?: usersWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableEnumassets_statusFieldUpdateOperationsInput = {
    set?: $Enums.assets_status | null
  }

  export type usersUpdateOneWithoutAssetsNestedInput = {
    create?: XOR<usersCreateWithoutAssetsInput, usersUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: usersCreateOrConnectWithoutAssetsInput
    upsert?: usersUpsertWithoutAssetsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutAssetsInput, usersUpdateWithoutAssetsInput>, usersUncheckedUpdateWithoutAssetsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type projectsCreateNestedOneWithoutBudgetsInput = {
    create?: XOR<projectsCreateWithoutBudgetsInput, projectsUncheckedCreateWithoutBudgetsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutBudgetsInput
    connect?: projectsWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type projectsUpdateOneRequiredWithoutBudgetsNestedInput = {
    create?: XOR<projectsCreateWithoutBudgetsInput, projectsUncheckedCreateWithoutBudgetsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutBudgetsInput
    upsert?: projectsUpsertWithoutBudgetsInput
    connect?: projectsWhereUniqueInput
    update?: XOR<XOR<projectsUpdateToOneWithWhereWithoutBudgetsInput, projectsUpdateWithoutBudgetsInput>, projectsUncheckedUpdateWithoutBudgetsInput>
  }

  export type channelsCreateNestedOneWithoutChannel_membersInput = {
    create?: XOR<channelsCreateWithoutChannel_membersInput, channelsUncheckedCreateWithoutChannel_membersInput>
    connectOrCreate?: channelsCreateOrConnectWithoutChannel_membersInput
    connect?: channelsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutChannel_membersInput = {
    create?: XOR<usersCreateWithoutChannel_membersInput, usersUncheckedCreateWithoutChannel_membersInput>
    connectOrCreate?: usersCreateOrConnectWithoutChannel_membersInput
    connect?: usersWhereUniqueInput
  }

  export type channelsUpdateOneRequiredWithoutChannel_membersNestedInput = {
    create?: XOR<channelsCreateWithoutChannel_membersInput, channelsUncheckedCreateWithoutChannel_membersInput>
    connectOrCreate?: channelsCreateOrConnectWithoutChannel_membersInput
    upsert?: channelsUpsertWithoutChannel_membersInput
    connect?: channelsWhereUniqueInput
    update?: XOR<XOR<channelsUpdateToOneWithWhereWithoutChannel_membersInput, channelsUpdateWithoutChannel_membersInput>, channelsUncheckedUpdateWithoutChannel_membersInput>
  }

  export type usersUpdateOneRequiredWithoutChannel_membersNestedInput = {
    create?: XOR<usersCreateWithoutChannel_membersInput, usersUncheckedCreateWithoutChannel_membersInput>
    connectOrCreate?: usersCreateOrConnectWithoutChannel_membersInput
    upsert?: usersUpsertWithoutChannel_membersInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutChannel_membersInput, usersUpdateWithoutChannel_membersInput>, usersUncheckedUpdateWithoutChannel_membersInput>
  }

  export type channel_membersCreateNestedManyWithoutChannelsInput = {
    create?: XOR<channel_membersCreateWithoutChannelsInput, channel_membersUncheckedCreateWithoutChannelsInput> | channel_membersCreateWithoutChannelsInput[] | channel_membersUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: channel_membersCreateOrConnectWithoutChannelsInput | channel_membersCreateOrConnectWithoutChannelsInput[]
    createMany?: channel_membersCreateManyChannelsInputEnvelope
    connect?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
  }

  export type teamsCreateNestedOneWithoutChannelsInput = {
    create?: XOR<teamsCreateWithoutChannelsInput, teamsUncheckedCreateWithoutChannelsInput>
    connectOrCreate?: teamsCreateOrConnectWithoutChannelsInput
    connect?: teamsWhereUniqueInput
  }

  export type messagesCreateNestedManyWithoutChannelsInput = {
    create?: XOR<messagesCreateWithoutChannelsInput, messagesUncheckedCreateWithoutChannelsInput> | messagesCreateWithoutChannelsInput[] | messagesUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: messagesCreateOrConnectWithoutChannelsInput | messagesCreateOrConnectWithoutChannelsInput[]
    createMany?: messagesCreateManyChannelsInputEnvelope
    connect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
  }

  export type channel_membersUncheckedCreateNestedManyWithoutChannelsInput = {
    create?: XOR<channel_membersCreateWithoutChannelsInput, channel_membersUncheckedCreateWithoutChannelsInput> | channel_membersCreateWithoutChannelsInput[] | channel_membersUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: channel_membersCreateOrConnectWithoutChannelsInput | channel_membersCreateOrConnectWithoutChannelsInput[]
    createMany?: channel_membersCreateManyChannelsInputEnvelope
    connect?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
  }

  export type messagesUncheckedCreateNestedManyWithoutChannelsInput = {
    create?: XOR<messagesCreateWithoutChannelsInput, messagesUncheckedCreateWithoutChannelsInput> | messagesCreateWithoutChannelsInput[] | messagesUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: messagesCreateOrConnectWithoutChannelsInput | messagesCreateOrConnectWithoutChannelsInput[]
    createMany?: messagesCreateManyChannelsInputEnvelope
    connect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
  }

  export type NullableEnumchannels_typeFieldUpdateOperationsInput = {
    set?: $Enums.channels_type | null
  }

  export type channel_membersUpdateManyWithoutChannelsNestedInput = {
    create?: XOR<channel_membersCreateWithoutChannelsInput, channel_membersUncheckedCreateWithoutChannelsInput> | channel_membersCreateWithoutChannelsInput[] | channel_membersUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: channel_membersCreateOrConnectWithoutChannelsInput | channel_membersCreateOrConnectWithoutChannelsInput[]
    upsert?: channel_membersUpsertWithWhereUniqueWithoutChannelsInput | channel_membersUpsertWithWhereUniqueWithoutChannelsInput[]
    createMany?: channel_membersCreateManyChannelsInputEnvelope
    set?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    disconnect?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    delete?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    connect?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    update?: channel_membersUpdateWithWhereUniqueWithoutChannelsInput | channel_membersUpdateWithWhereUniqueWithoutChannelsInput[]
    updateMany?: channel_membersUpdateManyWithWhereWithoutChannelsInput | channel_membersUpdateManyWithWhereWithoutChannelsInput[]
    deleteMany?: channel_membersScalarWhereInput | channel_membersScalarWhereInput[]
  }

  export type teamsUpdateOneWithoutChannelsNestedInput = {
    create?: XOR<teamsCreateWithoutChannelsInput, teamsUncheckedCreateWithoutChannelsInput>
    connectOrCreate?: teamsCreateOrConnectWithoutChannelsInput
    upsert?: teamsUpsertWithoutChannelsInput
    disconnect?: teamsWhereInput | boolean
    delete?: teamsWhereInput | boolean
    connect?: teamsWhereUniqueInput
    update?: XOR<XOR<teamsUpdateToOneWithWhereWithoutChannelsInput, teamsUpdateWithoutChannelsInput>, teamsUncheckedUpdateWithoutChannelsInput>
  }

  export type messagesUpdateManyWithoutChannelsNestedInput = {
    create?: XOR<messagesCreateWithoutChannelsInput, messagesUncheckedCreateWithoutChannelsInput> | messagesCreateWithoutChannelsInput[] | messagesUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: messagesCreateOrConnectWithoutChannelsInput | messagesCreateOrConnectWithoutChannelsInput[]
    upsert?: messagesUpsertWithWhereUniqueWithoutChannelsInput | messagesUpsertWithWhereUniqueWithoutChannelsInput[]
    createMany?: messagesCreateManyChannelsInputEnvelope
    set?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    disconnect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    delete?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    connect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    update?: messagesUpdateWithWhereUniqueWithoutChannelsInput | messagesUpdateWithWhereUniqueWithoutChannelsInput[]
    updateMany?: messagesUpdateManyWithWhereWithoutChannelsInput | messagesUpdateManyWithWhereWithoutChannelsInput[]
    deleteMany?: messagesScalarWhereInput | messagesScalarWhereInput[]
  }

  export type channel_membersUncheckedUpdateManyWithoutChannelsNestedInput = {
    create?: XOR<channel_membersCreateWithoutChannelsInput, channel_membersUncheckedCreateWithoutChannelsInput> | channel_membersCreateWithoutChannelsInput[] | channel_membersUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: channel_membersCreateOrConnectWithoutChannelsInput | channel_membersCreateOrConnectWithoutChannelsInput[]
    upsert?: channel_membersUpsertWithWhereUniqueWithoutChannelsInput | channel_membersUpsertWithWhereUniqueWithoutChannelsInput[]
    createMany?: channel_membersCreateManyChannelsInputEnvelope
    set?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    disconnect?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    delete?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    connect?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    update?: channel_membersUpdateWithWhereUniqueWithoutChannelsInput | channel_membersUpdateWithWhereUniqueWithoutChannelsInput[]
    updateMany?: channel_membersUpdateManyWithWhereWithoutChannelsInput | channel_membersUpdateManyWithWhereWithoutChannelsInput[]
    deleteMany?: channel_membersScalarWhereInput | channel_membersScalarWhereInput[]
  }

  export type messagesUncheckedUpdateManyWithoutChannelsNestedInput = {
    create?: XOR<messagesCreateWithoutChannelsInput, messagesUncheckedCreateWithoutChannelsInput> | messagesCreateWithoutChannelsInput[] | messagesUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: messagesCreateOrConnectWithoutChannelsInput | messagesCreateOrConnectWithoutChannelsInput[]
    upsert?: messagesUpsertWithWhereUniqueWithoutChannelsInput | messagesUpsertWithWhereUniqueWithoutChannelsInput[]
    createMany?: messagesCreateManyChannelsInputEnvelope
    set?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    disconnect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    delete?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    connect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    update?: messagesUpdateWithWhereUniqueWithoutChannelsInput | messagesUpdateWithWhereUniqueWithoutChannelsInput[]
    updateMany?: messagesUpdateManyWithWhereWithoutChannelsInput | messagesUpdateManyWithWhereWithoutChannelsInput[]
    deleteMany?: messagesScalarWhereInput | messagesScalarWhereInput[]
  }

  export type leadsCreateNestedManyWithoutClientsInput = {
    create?: XOR<leadsCreateWithoutClientsInput, leadsUncheckedCreateWithoutClientsInput> | leadsCreateWithoutClientsInput[] | leadsUncheckedCreateWithoutClientsInput[]
    connectOrCreate?: leadsCreateOrConnectWithoutClientsInput | leadsCreateOrConnectWithoutClientsInput[]
    createMany?: leadsCreateManyClientsInputEnvelope
    connect?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
  }

  export type leadsUncheckedCreateNestedManyWithoutClientsInput = {
    create?: XOR<leadsCreateWithoutClientsInput, leadsUncheckedCreateWithoutClientsInput> | leadsCreateWithoutClientsInput[] | leadsUncheckedCreateWithoutClientsInput[]
    connectOrCreate?: leadsCreateOrConnectWithoutClientsInput | leadsCreateOrConnectWithoutClientsInput[]
    createMany?: leadsCreateManyClientsInputEnvelope
    connect?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
  }

  export type leadsUpdateManyWithoutClientsNestedInput = {
    create?: XOR<leadsCreateWithoutClientsInput, leadsUncheckedCreateWithoutClientsInput> | leadsCreateWithoutClientsInput[] | leadsUncheckedCreateWithoutClientsInput[]
    connectOrCreate?: leadsCreateOrConnectWithoutClientsInput | leadsCreateOrConnectWithoutClientsInput[]
    upsert?: leadsUpsertWithWhereUniqueWithoutClientsInput | leadsUpsertWithWhereUniqueWithoutClientsInput[]
    createMany?: leadsCreateManyClientsInputEnvelope
    set?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    disconnect?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    delete?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    connect?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    update?: leadsUpdateWithWhereUniqueWithoutClientsInput | leadsUpdateWithWhereUniqueWithoutClientsInput[]
    updateMany?: leadsUpdateManyWithWhereWithoutClientsInput | leadsUpdateManyWithWhereWithoutClientsInput[]
    deleteMany?: leadsScalarWhereInput | leadsScalarWhereInput[]
  }

  export type leadsUncheckedUpdateManyWithoutClientsNestedInput = {
    create?: XOR<leadsCreateWithoutClientsInput, leadsUncheckedCreateWithoutClientsInput> | leadsCreateWithoutClientsInput[] | leadsUncheckedCreateWithoutClientsInput[]
    connectOrCreate?: leadsCreateOrConnectWithoutClientsInput | leadsCreateOrConnectWithoutClientsInput[]
    upsert?: leadsUpsertWithWhereUniqueWithoutClientsInput | leadsUpsertWithWhereUniqueWithoutClientsInput[]
    createMany?: leadsCreateManyClientsInputEnvelope
    set?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    disconnect?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    delete?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    connect?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    update?: leadsUpdateWithWhereUniqueWithoutClientsInput | leadsUpdateWithWhereUniqueWithoutClientsInput[]
    updateMany?: leadsUpdateManyWithWhereWithoutClientsInput | leadsUpdateManyWithWhereWithoutClientsInput[]
    deleteMany?: leadsScalarWhereInput | leadsScalarWhereInput[]
  }

  export type suppliersCreateNestedOneWithoutContractsInput = {
    create?: XOR<suppliersCreateWithoutContractsInput, suppliersUncheckedCreateWithoutContractsInput>
    connectOrCreate?: suppliersCreateOrConnectWithoutContractsInput
    connect?: suppliersWhereUniqueInput
  }

  export type projectsCreateNestedOneWithoutContractsInput = {
    create?: XOR<projectsCreateWithoutContractsInput, projectsUncheckedCreateWithoutContractsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutContractsInput
    connect?: projectsWhereUniqueInput
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableEnumcontracts_statusFieldUpdateOperationsInput = {
    set?: $Enums.contracts_status | null
  }

  export type suppliersUpdateOneWithoutContractsNestedInput = {
    create?: XOR<suppliersCreateWithoutContractsInput, suppliersUncheckedCreateWithoutContractsInput>
    connectOrCreate?: suppliersCreateOrConnectWithoutContractsInput
    upsert?: suppliersUpsertWithoutContractsInput
    disconnect?: suppliersWhereInput | boolean
    delete?: suppliersWhereInput | boolean
    connect?: suppliersWhereUniqueInput
    update?: XOR<XOR<suppliersUpdateToOneWithWhereWithoutContractsInput, suppliersUpdateWithoutContractsInput>, suppliersUncheckedUpdateWithoutContractsInput>
  }

  export type projectsUpdateOneWithoutContractsNestedInput = {
    create?: XOR<projectsCreateWithoutContractsInput, projectsUncheckedCreateWithoutContractsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutContractsInput
    upsert?: projectsUpsertWithoutContractsInput
    disconnect?: projectsWhereInput | boolean
    delete?: projectsWhereInput | boolean
    connect?: projectsWhereUniqueInput
    update?: XOR<XOR<projectsUpdateToOneWithWhereWithoutContractsInput, projectsUpdateWithoutContractsInput>, projectsUncheckedUpdateWithoutContractsInput>
  }

  export type projectsCreateNestedOneWithoutCostsInput = {
    create?: XOR<projectsCreateWithoutCostsInput, projectsUncheckedCreateWithoutCostsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutCostsInput
    connect?: projectsWhereUniqueInput
  }

  export type projectsUpdateOneRequiredWithoutCostsNestedInput = {
    create?: XOR<projectsCreateWithoutCostsInput, projectsUncheckedCreateWithoutCostsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutCostsInput
    upsert?: projectsUpsertWithoutCostsInput
    connect?: projectsWhereUniqueInput
    update?: XOR<XOR<projectsUpdateToOneWithWhereWithoutCostsInput, projectsUpdateWithoutCostsInput>, projectsUncheckedUpdateWithoutCostsInput>
  }

  export type projectsCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<projectsCreateWithoutDocumentsInput, projectsUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutDocumentsInput
    connect?: projectsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<usersCreateWithoutDocumentsInput, usersUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutDocumentsInput
    connect?: usersWhereUniqueInput
  }

  export type NullableEnumdocuments_typeFieldUpdateOperationsInput = {
    set?: $Enums.documents_type | null
  }

  export type projectsUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<projectsCreateWithoutDocumentsInput, projectsUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutDocumentsInput
    upsert?: projectsUpsertWithoutDocumentsInput
    disconnect?: projectsWhereInput | boolean
    delete?: projectsWhereInput | boolean
    connect?: projectsWhereUniqueInput
    update?: XOR<XOR<projectsUpdateToOneWithWhereWithoutDocumentsInput, projectsUpdateWithoutDocumentsInput>, projectsUncheckedUpdateWithoutDocumentsInput>
  }

  export type usersUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<usersCreateWithoutDocumentsInput, usersUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutDocumentsInput
    upsert?: usersUpsertWithoutDocumentsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutDocumentsInput, usersUpdateWithoutDocumentsInput>, usersUncheckedUpdateWithoutDocumentsInput>
  }

  export type projectsCreateNestedOneWithoutEventsInput = {
    create?: XOR<projectsCreateWithoutEventsInput, projectsUncheckedCreateWithoutEventsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutEventsInput
    connect?: projectsWhereUniqueInput
  }

  export type NullableEnumevents_typeFieldUpdateOperationsInput = {
    set?: $Enums.events_type | null
  }

  export type projectsUpdateOneWithoutEventsNestedInput = {
    create?: XOR<projectsCreateWithoutEventsInput, projectsUncheckedCreateWithoutEventsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutEventsInput
    upsert?: projectsUpsertWithoutEventsInput
    disconnect?: projectsWhereInput | boolean
    delete?: projectsWhereInput | boolean
    connect?: projectsWhereUniqueInput
    update?: XOR<XOR<projectsUpdateToOneWithWhereWithoutEventsInput, projectsUpdateWithoutEventsInput>, projectsUncheckedUpdateWithoutEventsInput>
  }

  export type usersCreateNestedOneWithoutHr_recordsInput = {
    create?: XOR<usersCreateWithoutHr_recordsInput, usersUncheckedCreateWithoutHr_recordsInput>
    connectOrCreate?: usersCreateOrConnectWithoutHr_recordsInput
    connect?: usersWhereUniqueInput
  }

  export type NullableEnumhr_records_typeFieldUpdateOperationsInput = {
    set?: $Enums.hr_records_type | null
  }

  export type usersUpdateOneRequiredWithoutHr_recordsNestedInput = {
    create?: XOR<usersCreateWithoutHr_recordsInput, usersUncheckedCreateWithoutHr_recordsInput>
    connectOrCreate?: usersCreateOrConnectWithoutHr_recordsInput
    upsert?: usersUpsertWithoutHr_recordsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutHr_recordsInput, usersUpdateWithoutHr_recordsInput>, usersUncheckedUpdateWithoutHr_recordsInput>
  }

  export type clientsCreateNestedOneWithoutLeadsInput = {
    create?: XOR<clientsCreateWithoutLeadsInput, clientsUncheckedCreateWithoutLeadsInput>
    connectOrCreate?: clientsCreateOrConnectWithoutLeadsInput
    connect?: clientsWhereUniqueInput
  }

  export type projectsCreateNestedOneWithoutLeadsInput = {
    create?: XOR<projectsCreateWithoutLeadsInput, projectsUncheckedCreateWithoutLeadsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutLeadsInput
    connect?: projectsWhereUniqueInput
  }

  export type NullableEnumleads_statusFieldUpdateOperationsInput = {
    set?: $Enums.leads_status | null
  }

  export type clientsUpdateOneWithoutLeadsNestedInput = {
    create?: XOR<clientsCreateWithoutLeadsInput, clientsUncheckedCreateWithoutLeadsInput>
    connectOrCreate?: clientsCreateOrConnectWithoutLeadsInput
    upsert?: clientsUpsertWithoutLeadsInput
    disconnect?: clientsWhereInput | boolean
    delete?: clientsWhereInput | boolean
    connect?: clientsWhereUniqueInput
    update?: XOR<XOR<clientsUpdateToOneWithWhereWithoutLeadsInput, clientsUpdateWithoutLeadsInput>, clientsUncheckedUpdateWithoutLeadsInput>
  }

  export type projectsUpdateOneWithoutLeadsNestedInput = {
    create?: XOR<projectsCreateWithoutLeadsInput, projectsUncheckedCreateWithoutLeadsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutLeadsInput
    upsert?: projectsUpsertWithoutLeadsInput
    disconnect?: projectsWhereInput | boolean
    delete?: projectsWhereInput | boolean
    connect?: projectsWhereUniqueInput
    update?: XOR<XOR<projectsUpdateToOneWithWhereWithoutLeadsInput, projectsUpdateWithoutLeadsInput>, projectsUncheckedUpdateWithoutLeadsInput>
  }

  export type channelsCreateNestedOneWithoutMessagesInput = {
    create?: XOR<channelsCreateWithoutMessagesInput, channelsUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: channelsCreateOrConnectWithoutMessagesInput
    connect?: channelsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutMessagesInput = {
    create?: XOR<usersCreateWithoutMessagesInput, usersUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: usersCreateOrConnectWithoutMessagesInput
    connect?: usersWhereUniqueInput
  }

  export type channelsUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<channelsCreateWithoutMessagesInput, channelsUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: channelsCreateOrConnectWithoutMessagesInput
    upsert?: channelsUpsertWithoutMessagesInput
    connect?: channelsWhereUniqueInput
    update?: XOR<XOR<channelsUpdateToOneWithWhereWithoutMessagesInput, channelsUpdateWithoutMessagesInput>, channelsUncheckedUpdateWithoutMessagesInput>
  }

  export type usersUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<usersCreateWithoutMessagesInput, usersUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: usersCreateOrConnectWithoutMessagesInput
    upsert?: usersUpsertWithoutMessagesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutMessagesInput, usersUpdateWithoutMessagesInput>, usersUncheckedUpdateWithoutMessagesInput>
  }

  export type usersCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<usersCreateWithoutPermissionsInput, usersUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutPermissionsInput
    connect?: usersWhereUniqueInput
  }

  export type projectsCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<projectsCreateWithoutPermissionsInput, projectsUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutPermissionsInput
    connect?: projectsWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<usersCreateWithoutPermissionsInput, usersUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutPermissionsInput
    upsert?: usersUpsertWithoutPermissionsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutPermissionsInput, usersUpdateWithoutPermissionsInput>, usersUncheckedUpdateWithoutPermissionsInput>
  }

  export type projectsUpdateOneWithoutPermissionsNestedInput = {
    create?: XOR<projectsCreateWithoutPermissionsInput, projectsUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutPermissionsInput
    upsert?: projectsUpsertWithoutPermissionsInput
    disconnect?: projectsWhereInput | boolean
    delete?: projectsWhereInput | boolean
    connect?: projectsWhereUniqueInput
    update?: XOR<XOR<projectsUpdateToOneWithWhereWithoutPermissionsInput, projectsUpdateWithoutPermissionsInput>, projectsUncheckedUpdateWithoutPermissionsInput>
  }

  export type projectsCreateNestedOneWithoutProject_resourcesInput = {
    create?: XOR<projectsCreateWithoutProject_resourcesInput, projectsUncheckedCreateWithoutProject_resourcesInput>
    connectOrCreate?: projectsCreateOrConnectWithoutProject_resourcesInput
    connect?: projectsWhereUniqueInput
  }

  export type resourcesCreateNestedOneWithoutProject_resourcesInput = {
    create?: XOR<resourcesCreateWithoutProject_resourcesInput, resourcesUncheckedCreateWithoutProject_resourcesInput>
    connectOrCreate?: resourcesCreateOrConnectWithoutProject_resourcesInput
    connect?: resourcesWhereUniqueInput
  }

  export type projectsUpdateOneRequiredWithoutProject_resourcesNestedInput = {
    create?: XOR<projectsCreateWithoutProject_resourcesInput, projectsUncheckedCreateWithoutProject_resourcesInput>
    connectOrCreate?: projectsCreateOrConnectWithoutProject_resourcesInput
    upsert?: projectsUpsertWithoutProject_resourcesInput
    connect?: projectsWhereUniqueInput
    update?: XOR<XOR<projectsUpdateToOneWithWhereWithoutProject_resourcesInput, projectsUpdateWithoutProject_resourcesInput>, projectsUncheckedUpdateWithoutProject_resourcesInput>
  }

  export type resourcesUpdateOneRequiredWithoutProject_resourcesNestedInput = {
    create?: XOR<resourcesCreateWithoutProject_resourcesInput, resourcesUncheckedCreateWithoutProject_resourcesInput>
    connectOrCreate?: resourcesCreateOrConnectWithoutProject_resourcesInput
    upsert?: resourcesUpsertWithoutProject_resourcesInput
    connect?: resourcesWhereUniqueInput
    update?: XOR<XOR<resourcesUpdateToOneWithWhereWithoutProject_resourcesInput, resourcesUpdateWithoutProject_resourcesInput>, resourcesUncheckedUpdateWithoutProject_resourcesInput>
  }

  export type budgetsCreateNestedManyWithoutProjectsInput = {
    create?: XOR<budgetsCreateWithoutProjectsInput, budgetsUncheckedCreateWithoutProjectsInput> | budgetsCreateWithoutProjectsInput[] | budgetsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: budgetsCreateOrConnectWithoutProjectsInput | budgetsCreateOrConnectWithoutProjectsInput[]
    createMany?: budgetsCreateManyProjectsInputEnvelope
    connect?: budgetsWhereUniqueInput | budgetsWhereUniqueInput[]
  }

  export type contractsCreateNestedManyWithoutProjectsInput = {
    create?: XOR<contractsCreateWithoutProjectsInput, contractsUncheckedCreateWithoutProjectsInput> | contractsCreateWithoutProjectsInput[] | contractsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: contractsCreateOrConnectWithoutProjectsInput | contractsCreateOrConnectWithoutProjectsInput[]
    createMany?: contractsCreateManyProjectsInputEnvelope
    connect?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
  }

  export type costsCreateNestedManyWithoutProjectsInput = {
    create?: XOR<costsCreateWithoutProjectsInput, costsUncheckedCreateWithoutProjectsInput> | costsCreateWithoutProjectsInput[] | costsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: costsCreateOrConnectWithoutProjectsInput | costsCreateOrConnectWithoutProjectsInput[]
    createMany?: costsCreateManyProjectsInputEnvelope
    connect?: costsWhereUniqueInput | costsWhereUniqueInput[]
  }

  export type documentsCreateNestedManyWithoutProjectsInput = {
    create?: XOR<documentsCreateWithoutProjectsInput, documentsUncheckedCreateWithoutProjectsInput> | documentsCreateWithoutProjectsInput[] | documentsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: documentsCreateOrConnectWithoutProjectsInput | documentsCreateOrConnectWithoutProjectsInput[]
    createMany?: documentsCreateManyProjectsInputEnvelope
    connect?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
  }

  export type eventsCreateNestedManyWithoutProjectsInput = {
    create?: XOR<eventsCreateWithoutProjectsInput, eventsUncheckedCreateWithoutProjectsInput> | eventsCreateWithoutProjectsInput[] | eventsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: eventsCreateOrConnectWithoutProjectsInput | eventsCreateOrConnectWithoutProjectsInput[]
    createMany?: eventsCreateManyProjectsInputEnvelope
    connect?: eventsWhereUniqueInput | eventsWhereUniqueInput[]
  }

  export type leadsCreateNestedManyWithoutProjectsInput = {
    create?: XOR<leadsCreateWithoutProjectsInput, leadsUncheckedCreateWithoutProjectsInput> | leadsCreateWithoutProjectsInput[] | leadsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: leadsCreateOrConnectWithoutProjectsInput | leadsCreateOrConnectWithoutProjectsInput[]
    createMany?: leadsCreateManyProjectsInputEnvelope
    connect?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
  }

  export type permissionsCreateNestedManyWithoutProjectsInput = {
    create?: XOR<permissionsCreateWithoutProjectsInput, permissionsUncheckedCreateWithoutProjectsInput> | permissionsCreateWithoutProjectsInput[] | permissionsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: permissionsCreateOrConnectWithoutProjectsInput | permissionsCreateOrConnectWithoutProjectsInput[]
    createMany?: permissionsCreateManyProjectsInputEnvelope
    connect?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
  }

  export type project_resourcesCreateNestedManyWithoutProjectsInput = {
    create?: XOR<project_resourcesCreateWithoutProjectsInput, project_resourcesUncheckedCreateWithoutProjectsInput> | project_resourcesCreateWithoutProjectsInput[] | project_resourcesUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: project_resourcesCreateOrConnectWithoutProjectsInput | project_resourcesCreateOrConnectWithoutProjectsInput[]
    createMany?: project_resourcesCreateManyProjectsInputEnvelope
    connect?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
  }

  export type teamsCreateNestedOneWithoutProjectsInput = {
    create?: XOR<teamsCreateWithoutProjectsInput, teamsUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: teamsCreateOrConnectWithoutProjectsInput
    connect?: teamsWhereUniqueInput
  }

  export type reportsCreateNestedManyWithoutProjectsInput = {
    create?: XOR<reportsCreateWithoutProjectsInput, reportsUncheckedCreateWithoutProjectsInput> | reportsCreateWithoutProjectsInput[] | reportsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutProjectsInput | reportsCreateOrConnectWithoutProjectsInput[]
    createMany?: reportsCreateManyProjectsInputEnvelope
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
  }

  export type sprintsCreateNestedManyWithoutProjectsInput = {
    create?: XOR<sprintsCreateWithoutProjectsInput, sprintsUncheckedCreateWithoutProjectsInput> | sprintsCreateWithoutProjectsInput[] | sprintsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: sprintsCreateOrConnectWithoutProjectsInput | sprintsCreateOrConnectWithoutProjectsInput[]
    createMany?: sprintsCreateManyProjectsInputEnvelope
    connect?: sprintsWhereUniqueInput | sprintsWhereUniqueInput[]
  }

  export type tasksCreateNestedManyWithoutProjectsInput = {
    create?: XOR<tasksCreateWithoutProjectsInput, tasksUncheckedCreateWithoutProjectsInput> | tasksCreateWithoutProjectsInput[] | tasksUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutProjectsInput | tasksCreateOrConnectWithoutProjectsInput[]
    createMany?: tasksCreateManyProjectsInputEnvelope
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
  }

  export type ticketsCreateNestedManyWithoutProjectsInput = {
    create?: XOR<ticketsCreateWithoutProjectsInput, ticketsUncheckedCreateWithoutProjectsInput> | ticketsCreateWithoutProjectsInput[] | ticketsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutProjectsInput | ticketsCreateOrConnectWithoutProjectsInput[]
    createMany?: ticketsCreateManyProjectsInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type budgetsUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<budgetsCreateWithoutProjectsInput, budgetsUncheckedCreateWithoutProjectsInput> | budgetsCreateWithoutProjectsInput[] | budgetsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: budgetsCreateOrConnectWithoutProjectsInput | budgetsCreateOrConnectWithoutProjectsInput[]
    createMany?: budgetsCreateManyProjectsInputEnvelope
    connect?: budgetsWhereUniqueInput | budgetsWhereUniqueInput[]
  }

  export type contractsUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<contractsCreateWithoutProjectsInput, contractsUncheckedCreateWithoutProjectsInput> | contractsCreateWithoutProjectsInput[] | contractsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: contractsCreateOrConnectWithoutProjectsInput | contractsCreateOrConnectWithoutProjectsInput[]
    createMany?: contractsCreateManyProjectsInputEnvelope
    connect?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
  }

  export type costsUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<costsCreateWithoutProjectsInput, costsUncheckedCreateWithoutProjectsInput> | costsCreateWithoutProjectsInput[] | costsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: costsCreateOrConnectWithoutProjectsInput | costsCreateOrConnectWithoutProjectsInput[]
    createMany?: costsCreateManyProjectsInputEnvelope
    connect?: costsWhereUniqueInput | costsWhereUniqueInput[]
  }

  export type documentsUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<documentsCreateWithoutProjectsInput, documentsUncheckedCreateWithoutProjectsInput> | documentsCreateWithoutProjectsInput[] | documentsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: documentsCreateOrConnectWithoutProjectsInput | documentsCreateOrConnectWithoutProjectsInput[]
    createMany?: documentsCreateManyProjectsInputEnvelope
    connect?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
  }

  export type eventsUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<eventsCreateWithoutProjectsInput, eventsUncheckedCreateWithoutProjectsInput> | eventsCreateWithoutProjectsInput[] | eventsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: eventsCreateOrConnectWithoutProjectsInput | eventsCreateOrConnectWithoutProjectsInput[]
    createMany?: eventsCreateManyProjectsInputEnvelope
    connect?: eventsWhereUniqueInput | eventsWhereUniqueInput[]
  }

  export type leadsUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<leadsCreateWithoutProjectsInput, leadsUncheckedCreateWithoutProjectsInput> | leadsCreateWithoutProjectsInput[] | leadsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: leadsCreateOrConnectWithoutProjectsInput | leadsCreateOrConnectWithoutProjectsInput[]
    createMany?: leadsCreateManyProjectsInputEnvelope
    connect?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
  }

  export type permissionsUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<permissionsCreateWithoutProjectsInput, permissionsUncheckedCreateWithoutProjectsInput> | permissionsCreateWithoutProjectsInput[] | permissionsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: permissionsCreateOrConnectWithoutProjectsInput | permissionsCreateOrConnectWithoutProjectsInput[]
    createMany?: permissionsCreateManyProjectsInputEnvelope
    connect?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
  }

  export type project_resourcesUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<project_resourcesCreateWithoutProjectsInput, project_resourcesUncheckedCreateWithoutProjectsInput> | project_resourcesCreateWithoutProjectsInput[] | project_resourcesUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: project_resourcesCreateOrConnectWithoutProjectsInput | project_resourcesCreateOrConnectWithoutProjectsInput[]
    createMany?: project_resourcesCreateManyProjectsInputEnvelope
    connect?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
  }

  export type reportsUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<reportsCreateWithoutProjectsInput, reportsUncheckedCreateWithoutProjectsInput> | reportsCreateWithoutProjectsInput[] | reportsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutProjectsInput | reportsCreateOrConnectWithoutProjectsInput[]
    createMany?: reportsCreateManyProjectsInputEnvelope
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
  }

  export type sprintsUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<sprintsCreateWithoutProjectsInput, sprintsUncheckedCreateWithoutProjectsInput> | sprintsCreateWithoutProjectsInput[] | sprintsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: sprintsCreateOrConnectWithoutProjectsInput | sprintsCreateOrConnectWithoutProjectsInput[]
    createMany?: sprintsCreateManyProjectsInputEnvelope
    connect?: sprintsWhereUniqueInput | sprintsWhereUniqueInput[]
  }

  export type tasksUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<tasksCreateWithoutProjectsInput, tasksUncheckedCreateWithoutProjectsInput> | tasksCreateWithoutProjectsInput[] | tasksUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutProjectsInput | tasksCreateOrConnectWithoutProjectsInput[]
    createMany?: tasksCreateManyProjectsInputEnvelope
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
  }

  export type ticketsUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<ticketsCreateWithoutProjectsInput, ticketsUncheckedCreateWithoutProjectsInput> | ticketsCreateWithoutProjectsInput[] | ticketsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutProjectsInput | ticketsCreateOrConnectWithoutProjectsInput[]
    createMany?: ticketsCreateManyProjectsInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type NullableEnumprojects_statusFieldUpdateOperationsInput = {
    set?: $Enums.projects_status | null
  }

  export type budgetsUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<budgetsCreateWithoutProjectsInput, budgetsUncheckedCreateWithoutProjectsInput> | budgetsCreateWithoutProjectsInput[] | budgetsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: budgetsCreateOrConnectWithoutProjectsInput | budgetsCreateOrConnectWithoutProjectsInput[]
    upsert?: budgetsUpsertWithWhereUniqueWithoutProjectsInput | budgetsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: budgetsCreateManyProjectsInputEnvelope
    set?: budgetsWhereUniqueInput | budgetsWhereUniqueInput[]
    disconnect?: budgetsWhereUniqueInput | budgetsWhereUniqueInput[]
    delete?: budgetsWhereUniqueInput | budgetsWhereUniqueInput[]
    connect?: budgetsWhereUniqueInput | budgetsWhereUniqueInput[]
    update?: budgetsUpdateWithWhereUniqueWithoutProjectsInput | budgetsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: budgetsUpdateManyWithWhereWithoutProjectsInput | budgetsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: budgetsScalarWhereInput | budgetsScalarWhereInput[]
  }

  export type contractsUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<contractsCreateWithoutProjectsInput, contractsUncheckedCreateWithoutProjectsInput> | contractsCreateWithoutProjectsInput[] | contractsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: contractsCreateOrConnectWithoutProjectsInput | contractsCreateOrConnectWithoutProjectsInput[]
    upsert?: contractsUpsertWithWhereUniqueWithoutProjectsInput | contractsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: contractsCreateManyProjectsInputEnvelope
    set?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    disconnect?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    delete?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    connect?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    update?: contractsUpdateWithWhereUniqueWithoutProjectsInput | contractsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: contractsUpdateManyWithWhereWithoutProjectsInput | contractsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: contractsScalarWhereInput | contractsScalarWhereInput[]
  }

  export type costsUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<costsCreateWithoutProjectsInput, costsUncheckedCreateWithoutProjectsInput> | costsCreateWithoutProjectsInput[] | costsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: costsCreateOrConnectWithoutProjectsInput | costsCreateOrConnectWithoutProjectsInput[]
    upsert?: costsUpsertWithWhereUniqueWithoutProjectsInput | costsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: costsCreateManyProjectsInputEnvelope
    set?: costsWhereUniqueInput | costsWhereUniqueInput[]
    disconnect?: costsWhereUniqueInput | costsWhereUniqueInput[]
    delete?: costsWhereUniqueInput | costsWhereUniqueInput[]
    connect?: costsWhereUniqueInput | costsWhereUniqueInput[]
    update?: costsUpdateWithWhereUniqueWithoutProjectsInput | costsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: costsUpdateManyWithWhereWithoutProjectsInput | costsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: costsScalarWhereInput | costsScalarWhereInput[]
  }

  export type documentsUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<documentsCreateWithoutProjectsInput, documentsUncheckedCreateWithoutProjectsInput> | documentsCreateWithoutProjectsInput[] | documentsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: documentsCreateOrConnectWithoutProjectsInput | documentsCreateOrConnectWithoutProjectsInput[]
    upsert?: documentsUpsertWithWhereUniqueWithoutProjectsInput | documentsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: documentsCreateManyProjectsInputEnvelope
    set?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    disconnect?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    delete?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    connect?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    update?: documentsUpdateWithWhereUniqueWithoutProjectsInput | documentsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: documentsUpdateManyWithWhereWithoutProjectsInput | documentsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: documentsScalarWhereInput | documentsScalarWhereInput[]
  }

  export type eventsUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<eventsCreateWithoutProjectsInput, eventsUncheckedCreateWithoutProjectsInput> | eventsCreateWithoutProjectsInput[] | eventsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: eventsCreateOrConnectWithoutProjectsInput | eventsCreateOrConnectWithoutProjectsInput[]
    upsert?: eventsUpsertWithWhereUniqueWithoutProjectsInput | eventsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: eventsCreateManyProjectsInputEnvelope
    set?: eventsWhereUniqueInput | eventsWhereUniqueInput[]
    disconnect?: eventsWhereUniqueInput | eventsWhereUniqueInput[]
    delete?: eventsWhereUniqueInput | eventsWhereUniqueInput[]
    connect?: eventsWhereUniqueInput | eventsWhereUniqueInput[]
    update?: eventsUpdateWithWhereUniqueWithoutProjectsInput | eventsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: eventsUpdateManyWithWhereWithoutProjectsInput | eventsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: eventsScalarWhereInput | eventsScalarWhereInput[]
  }

  export type leadsUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<leadsCreateWithoutProjectsInput, leadsUncheckedCreateWithoutProjectsInput> | leadsCreateWithoutProjectsInput[] | leadsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: leadsCreateOrConnectWithoutProjectsInput | leadsCreateOrConnectWithoutProjectsInput[]
    upsert?: leadsUpsertWithWhereUniqueWithoutProjectsInput | leadsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: leadsCreateManyProjectsInputEnvelope
    set?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    disconnect?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    delete?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    connect?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    update?: leadsUpdateWithWhereUniqueWithoutProjectsInput | leadsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: leadsUpdateManyWithWhereWithoutProjectsInput | leadsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: leadsScalarWhereInput | leadsScalarWhereInput[]
  }

  export type permissionsUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<permissionsCreateWithoutProjectsInput, permissionsUncheckedCreateWithoutProjectsInput> | permissionsCreateWithoutProjectsInput[] | permissionsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: permissionsCreateOrConnectWithoutProjectsInput | permissionsCreateOrConnectWithoutProjectsInput[]
    upsert?: permissionsUpsertWithWhereUniqueWithoutProjectsInput | permissionsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: permissionsCreateManyProjectsInputEnvelope
    set?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    disconnect?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    delete?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    connect?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    update?: permissionsUpdateWithWhereUniqueWithoutProjectsInput | permissionsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: permissionsUpdateManyWithWhereWithoutProjectsInput | permissionsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: permissionsScalarWhereInput | permissionsScalarWhereInput[]
  }

  export type project_resourcesUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<project_resourcesCreateWithoutProjectsInput, project_resourcesUncheckedCreateWithoutProjectsInput> | project_resourcesCreateWithoutProjectsInput[] | project_resourcesUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: project_resourcesCreateOrConnectWithoutProjectsInput | project_resourcesCreateOrConnectWithoutProjectsInput[]
    upsert?: project_resourcesUpsertWithWhereUniqueWithoutProjectsInput | project_resourcesUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: project_resourcesCreateManyProjectsInputEnvelope
    set?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    disconnect?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    delete?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    connect?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    update?: project_resourcesUpdateWithWhereUniqueWithoutProjectsInput | project_resourcesUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: project_resourcesUpdateManyWithWhereWithoutProjectsInput | project_resourcesUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: project_resourcesScalarWhereInput | project_resourcesScalarWhereInput[]
  }

  export type teamsUpdateOneWithoutProjectsNestedInput = {
    create?: XOR<teamsCreateWithoutProjectsInput, teamsUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: teamsCreateOrConnectWithoutProjectsInput
    upsert?: teamsUpsertWithoutProjectsInput
    disconnect?: teamsWhereInput | boolean
    delete?: teamsWhereInput | boolean
    connect?: teamsWhereUniqueInput
    update?: XOR<XOR<teamsUpdateToOneWithWhereWithoutProjectsInput, teamsUpdateWithoutProjectsInput>, teamsUncheckedUpdateWithoutProjectsInput>
  }

  export type reportsUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<reportsCreateWithoutProjectsInput, reportsUncheckedCreateWithoutProjectsInput> | reportsCreateWithoutProjectsInput[] | reportsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutProjectsInput | reportsCreateOrConnectWithoutProjectsInput[]
    upsert?: reportsUpsertWithWhereUniqueWithoutProjectsInput | reportsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: reportsCreateManyProjectsInputEnvelope
    set?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    disconnect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    delete?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    update?: reportsUpdateWithWhereUniqueWithoutProjectsInput | reportsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: reportsUpdateManyWithWhereWithoutProjectsInput | reportsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: reportsScalarWhereInput | reportsScalarWhereInput[]
  }

  export type sprintsUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<sprintsCreateWithoutProjectsInput, sprintsUncheckedCreateWithoutProjectsInput> | sprintsCreateWithoutProjectsInput[] | sprintsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: sprintsCreateOrConnectWithoutProjectsInput | sprintsCreateOrConnectWithoutProjectsInput[]
    upsert?: sprintsUpsertWithWhereUniqueWithoutProjectsInput | sprintsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: sprintsCreateManyProjectsInputEnvelope
    set?: sprintsWhereUniqueInput | sprintsWhereUniqueInput[]
    disconnect?: sprintsWhereUniqueInput | sprintsWhereUniqueInput[]
    delete?: sprintsWhereUniqueInput | sprintsWhereUniqueInput[]
    connect?: sprintsWhereUniqueInput | sprintsWhereUniqueInput[]
    update?: sprintsUpdateWithWhereUniqueWithoutProjectsInput | sprintsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: sprintsUpdateManyWithWhereWithoutProjectsInput | sprintsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: sprintsScalarWhereInput | sprintsScalarWhereInput[]
  }

  export type tasksUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<tasksCreateWithoutProjectsInput, tasksUncheckedCreateWithoutProjectsInput> | tasksCreateWithoutProjectsInput[] | tasksUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutProjectsInput | tasksCreateOrConnectWithoutProjectsInput[]
    upsert?: tasksUpsertWithWhereUniqueWithoutProjectsInput | tasksUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: tasksCreateManyProjectsInputEnvelope
    set?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    disconnect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    delete?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    update?: tasksUpdateWithWhereUniqueWithoutProjectsInput | tasksUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: tasksUpdateManyWithWhereWithoutProjectsInput | tasksUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: tasksScalarWhereInput | tasksScalarWhereInput[]
  }

  export type ticketsUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<ticketsCreateWithoutProjectsInput, ticketsUncheckedCreateWithoutProjectsInput> | ticketsCreateWithoutProjectsInput[] | ticketsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutProjectsInput | ticketsCreateOrConnectWithoutProjectsInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutProjectsInput | ticketsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: ticketsCreateManyProjectsInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutProjectsInput | ticketsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutProjectsInput | ticketsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type budgetsUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<budgetsCreateWithoutProjectsInput, budgetsUncheckedCreateWithoutProjectsInput> | budgetsCreateWithoutProjectsInput[] | budgetsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: budgetsCreateOrConnectWithoutProjectsInput | budgetsCreateOrConnectWithoutProjectsInput[]
    upsert?: budgetsUpsertWithWhereUniqueWithoutProjectsInput | budgetsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: budgetsCreateManyProjectsInputEnvelope
    set?: budgetsWhereUniqueInput | budgetsWhereUniqueInput[]
    disconnect?: budgetsWhereUniqueInput | budgetsWhereUniqueInput[]
    delete?: budgetsWhereUniqueInput | budgetsWhereUniqueInput[]
    connect?: budgetsWhereUniqueInput | budgetsWhereUniqueInput[]
    update?: budgetsUpdateWithWhereUniqueWithoutProjectsInput | budgetsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: budgetsUpdateManyWithWhereWithoutProjectsInput | budgetsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: budgetsScalarWhereInput | budgetsScalarWhereInput[]
  }

  export type contractsUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<contractsCreateWithoutProjectsInput, contractsUncheckedCreateWithoutProjectsInput> | contractsCreateWithoutProjectsInput[] | contractsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: contractsCreateOrConnectWithoutProjectsInput | contractsCreateOrConnectWithoutProjectsInput[]
    upsert?: contractsUpsertWithWhereUniqueWithoutProjectsInput | contractsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: contractsCreateManyProjectsInputEnvelope
    set?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    disconnect?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    delete?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    connect?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    update?: contractsUpdateWithWhereUniqueWithoutProjectsInput | contractsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: contractsUpdateManyWithWhereWithoutProjectsInput | contractsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: contractsScalarWhereInput | contractsScalarWhereInput[]
  }

  export type costsUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<costsCreateWithoutProjectsInput, costsUncheckedCreateWithoutProjectsInput> | costsCreateWithoutProjectsInput[] | costsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: costsCreateOrConnectWithoutProjectsInput | costsCreateOrConnectWithoutProjectsInput[]
    upsert?: costsUpsertWithWhereUniqueWithoutProjectsInput | costsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: costsCreateManyProjectsInputEnvelope
    set?: costsWhereUniqueInput | costsWhereUniqueInput[]
    disconnect?: costsWhereUniqueInput | costsWhereUniqueInput[]
    delete?: costsWhereUniqueInput | costsWhereUniqueInput[]
    connect?: costsWhereUniqueInput | costsWhereUniqueInput[]
    update?: costsUpdateWithWhereUniqueWithoutProjectsInput | costsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: costsUpdateManyWithWhereWithoutProjectsInput | costsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: costsScalarWhereInput | costsScalarWhereInput[]
  }

  export type documentsUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<documentsCreateWithoutProjectsInput, documentsUncheckedCreateWithoutProjectsInput> | documentsCreateWithoutProjectsInput[] | documentsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: documentsCreateOrConnectWithoutProjectsInput | documentsCreateOrConnectWithoutProjectsInput[]
    upsert?: documentsUpsertWithWhereUniqueWithoutProjectsInput | documentsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: documentsCreateManyProjectsInputEnvelope
    set?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    disconnect?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    delete?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    connect?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    update?: documentsUpdateWithWhereUniqueWithoutProjectsInput | documentsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: documentsUpdateManyWithWhereWithoutProjectsInput | documentsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: documentsScalarWhereInput | documentsScalarWhereInput[]
  }

  export type eventsUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<eventsCreateWithoutProjectsInput, eventsUncheckedCreateWithoutProjectsInput> | eventsCreateWithoutProjectsInput[] | eventsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: eventsCreateOrConnectWithoutProjectsInput | eventsCreateOrConnectWithoutProjectsInput[]
    upsert?: eventsUpsertWithWhereUniqueWithoutProjectsInput | eventsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: eventsCreateManyProjectsInputEnvelope
    set?: eventsWhereUniqueInput | eventsWhereUniqueInput[]
    disconnect?: eventsWhereUniqueInput | eventsWhereUniqueInput[]
    delete?: eventsWhereUniqueInput | eventsWhereUniqueInput[]
    connect?: eventsWhereUniqueInput | eventsWhereUniqueInput[]
    update?: eventsUpdateWithWhereUniqueWithoutProjectsInput | eventsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: eventsUpdateManyWithWhereWithoutProjectsInput | eventsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: eventsScalarWhereInput | eventsScalarWhereInput[]
  }

  export type leadsUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<leadsCreateWithoutProjectsInput, leadsUncheckedCreateWithoutProjectsInput> | leadsCreateWithoutProjectsInput[] | leadsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: leadsCreateOrConnectWithoutProjectsInput | leadsCreateOrConnectWithoutProjectsInput[]
    upsert?: leadsUpsertWithWhereUniqueWithoutProjectsInput | leadsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: leadsCreateManyProjectsInputEnvelope
    set?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    disconnect?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    delete?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    connect?: leadsWhereUniqueInput | leadsWhereUniqueInput[]
    update?: leadsUpdateWithWhereUniqueWithoutProjectsInput | leadsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: leadsUpdateManyWithWhereWithoutProjectsInput | leadsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: leadsScalarWhereInput | leadsScalarWhereInput[]
  }

  export type permissionsUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<permissionsCreateWithoutProjectsInput, permissionsUncheckedCreateWithoutProjectsInput> | permissionsCreateWithoutProjectsInput[] | permissionsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: permissionsCreateOrConnectWithoutProjectsInput | permissionsCreateOrConnectWithoutProjectsInput[]
    upsert?: permissionsUpsertWithWhereUniqueWithoutProjectsInput | permissionsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: permissionsCreateManyProjectsInputEnvelope
    set?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    disconnect?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    delete?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    connect?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    update?: permissionsUpdateWithWhereUniqueWithoutProjectsInput | permissionsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: permissionsUpdateManyWithWhereWithoutProjectsInput | permissionsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: permissionsScalarWhereInput | permissionsScalarWhereInput[]
  }

  export type project_resourcesUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<project_resourcesCreateWithoutProjectsInput, project_resourcesUncheckedCreateWithoutProjectsInput> | project_resourcesCreateWithoutProjectsInput[] | project_resourcesUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: project_resourcesCreateOrConnectWithoutProjectsInput | project_resourcesCreateOrConnectWithoutProjectsInput[]
    upsert?: project_resourcesUpsertWithWhereUniqueWithoutProjectsInput | project_resourcesUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: project_resourcesCreateManyProjectsInputEnvelope
    set?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    disconnect?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    delete?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    connect?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    update?: project_resourcesUpdateWithWhereUniqueWithoutProjectsInput | project_resourcesUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: project_resourcesUpdateManyWithWhereWithoutProjectsInput | project_resourcesUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: project_resourcesScalarWhereInput | project_resourcesScalarWhereInput[]
  }

  export type reportsUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<reportsCreateWithoutProjectsInput, reportsUncheckedCreateWithoutProjectsInput> | reportsCreateWithoutProjectsInput[] | reportsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutProjectsInput | reportsCreateOrConnectWithoutProjectsInput[]
    upsert?: reportsUpsertWithWhereUniqueWithoutProjectsInput | reportsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: reportsCreateManyProjectsInputEnvelope
    set?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    disconnect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    delete?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    update?: reportsUpdateWithWhereUniqueWithoutProjectsInput | reportsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: reportsUpdateManyWithWhereWithoutProjectsInput | reportsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: reportsScalarWhereInput | reportsScalarWhereInput[]
  }

  export type sprintsUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<sprintsCreateWithoutProjectsInput, sprintsUncheckedCreateWithoutProjectsInput> | sprintsCreateWithoutProjectsInput[] | sprintsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: sprintsCreateOrConnectWithoutProjectsInput | sprintsCreateOrConnectWithoutProjectsInput[]
    upsert?: sprintsUpsertWithWhereUniqueWithoutProjectsInput | sprintsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: sprintsCreateManyProjectsInputEnvelope
    set?: sprintsWhereUniqueInput | sprintsWhereUniqueInput[]
    disconnect?: sprintsWhereUniqueInput | sprintsWhereUniqueInput[]
    delete?: sprintsWhereUniqueInput | sprintsWhereUniqueInput[]
    connect?: sprintsWhereUniqueInput | sprintsWhereUniqueInput[]
    update?: sprintsUpdateWithWhereUniqueWithoutProjectsInput | sprintsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: sprintsUpdateManyWithWhereWithoutProjectsInput | sprintsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: sprintsScalarWhereInput | sprintsScalarWhereInput[]
  }

  export type tasksUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<tasksCreateWithoutProjectsInput, tasksUncheckedCreateWithoutProjectsInput> | tasksCreateWithoutProjectsInput[] | tasksUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutProjectsInput | tasksCreateOrConnectWithoutProjectsInput[]
    upsert?: tasksUpsertWithWhereUniqueWithoutProjectsInput | tasksUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: tasksCreateManyProjectsInputEnvelope
    set?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    disconnect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    delete?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    update?: tasksUpdateWithWhereUniqueWithoutProjectsInput | tasksUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: tasksUpdateManyWithWhereWithoutProjectsInput | tasksUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: tasksScalarWhereInput | tasksScalarWhereInput[]
  }

  export type ticketsUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<ticketsCreateWithoutProjectsInput, ticketsUncheckedCreateWithoutProjectsInput> | ticketsCreateWithoutProjectsInput[] | ticketsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutProjectsInput | ticketsCreateOrConnectWithoutProjectsInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutProjectsInput | ticketsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: ticketsCreateManyProjectsInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutProjectsInput | ticketsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutProjectsInput | ticketsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type projectsCreateNestedOneWithoutReportsInput = {
    create?: XOR<projectsCreateWithoutReportsInput, projectsUncheckedCreateWithoutReportsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutReportsInput
    connect?: projectsWhereUniqueInput
  }

  export type teamsCreateNestedOneWithoutReportsInput = {
    create?: XOR<teamsCreateWithoutReportsInput, teamsUncheckedCreateWithoutReportsInput>
    connectOrCreate?: teamsCreateOrConnectWithoutReportsInput
    connect?: teamsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutReportsInput = {
    create?: XOR<usersCreateWithoutReportsInput, usersUncheckedCreateWithoutReportsInput>
    connectOrCreate?: usersCreateOrConnectWithoutReportsInput
    connect?: usersWhereUniqueInput
  }

  export type NullableEnumreports_typeFieldUpdateOperationsInput = {
    set?: $Enums.reports_type | null
  }

  export type projectsUpdateOneWithoutReportsNestedInput = {
    create?: XOR<projectsCreateWithoutReportsInput, projectsUncheckedCreateWithoutReportsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutReportsInput
    upsert?: projectsUpsertWithoutReportsInput
    disconnect?: projectsWhereInput | boolean
    delete?: projectsWhereInput | boolean
    connect?: projectsWhereUniqueInput
    update?: XOR<XOR<projectsUpdateToOneWithWhereWithoutReportsInput, projectsUpdateWithoutReportsInput>, projectsUncheckedUpdateWithoutReportsInput>
  }

  export type teamsUpdateOneWithoutReportsNestedInput = {
    create?: XOR<teamsCreateWithoutReportsInput, teamsUncheckedCreateWithoutReportsInput>
    connectOrCreate?: teamsCreateOrConnectWithoutReportsInput
    upsert?: teamsUpsertWithoutReportsInput
    disconnect?: teamsWhereInput | boolean
    delete?: teamsWhereInput | boolean
    connect?: teamsWhereUniqueInput
    update?: XOR<XOR<teamsUpdateToOneWithWhereWithoutReportsInput, teamsUpdateWithoutReportsInput>, teamsUncheckedUpdateWithoutReportsInput>
  }

  export type usersUpdateOneWithoutReportsNestedInput = {
    create?: XOR<usersCreateWithoutReportsInput, usersUncheckedCreateWithoutReportsInput>
    connectOrCreate?: usersCreateOrConnectWithoutReportsInput
    upsert?: usersUpsertWithoutReportsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutReportsInput, usersUpdateWithoutReportsInput>, usersUncheckedUpdateWithoutReportsInput>
  }

  export type project_resourcesCreateNestedManyWithoutResourcesInput = {
    create?: XOR<project_resourcesCreateWithoutResourcesInput, project_resourcesUncheckedCreateWithoutResourcesInput> | project_resourcesCreateWithoutResourcesInput[] | project_resourcesUncheckedCreateWithoutResourcesInput[]
    connectOrCreate?: project_resourcesCreateOrConnectWithoutResourcesInput | project_resourcesCreateOrConnectWithoutResourcesInput[]
    createMany?: project_resourcesCreateManyResourcesInputEnvelope
    connect?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
  }

  export type usersCreateNestedOneWithoutResourcesInput = {
    create?: XOR<usersCreateWithoutResourcesInput, usersUncheckedCreateWithoutResourcesInput>
    connectOrCreate?: usersCreateOrConnectWithoutResourcesInput
    connect?: usersWhereUniqueInput
  }

  export type teamsCreateNestedOneWithoutResourcesInput = {
    create?: XOR<teamsCreateWithoutResourcesInput, teamsUncheckedCreateWithoutResourcesInput>
    connectOrCreate?: teamsCreateOrConnectWithoutResourcesInput
    connect?: teamsWhereUniqueInput
  }

  export type project_resourcesUncheckedCreateNestedManyWithoutResourcesInput = {
    create?: XOR<project_resourcesCreateWithoutResourcesInput, project_resourcesUncheckedCreateWithoutResourcesInput> | project_resourcesCreateWithoutResourcesInput[] | project_resourcesUncheckedCreateWithoutResourcesInput[]
    connectOrCreate?: project_resourcesCreateOrConnectWithoutResourcesInput | project_resourcesCreateOrConnectWithoutResourcesInput[]
    createMany?: project_resourcesCreateManyResourcesInputEnvelope
    connect?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
  }

  export type NullableEnumresources_typeFieldUpdateOperationsInput = {
    set?: $Enums.resources_type | null
  }

  export type NullableEnumresources_availabilityFieldUpdateOperationsInput = {
    set?: $Enums.resources_availability | null
  }

  export type project_resourcesUpdateManyWithoutResourcesNestedInput = {
    create?: XOR<project_resourcesCreateWithoutResourcesInput, project_resourcesUncheckedCreateWithoutResourcesInput> | project_resourcesCreateWithoutResourcesInput[] | project_resourcesUncheckedCreateWithoutResourcesInput[]
    connectOrCreate?: project_resourcesCreateOrConnectWithoutResourcesInput | project_resourcesCreateOrConnectWithoutResourcesInput[]
    upsert?: project_resourcesUpsertWithWhereUniqueWithoutResourcesInput | project_resourcesUpsertWithWhereUniqueWithoutResourcesInput[]
    createMany?: project_resourcesCreateManyResourcesInputEnvelope
    set?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    disconnect?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    delete?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    connect?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    update?: project_resourcesUpdateWithWhereUniqueWithoutResourcesInput | project_resourcesUpdateWithWhereUniqueWithoutResourcesInput[]
    updateMany?: project_resourcesUpdateManyWithWhereWithoutResourcesInput | project_resourcesUpdateManyWithWhereWithoutResourcesInput[]
    deleteMany?: project_resourcesScalarWhereInput | project_resourcesScalarWhereInput[]
  }

  export type usersUpdateOneWithoutResourcesNestedInput = {
    create?: XOR<usersCreateWithoutResourcesInput, usersUncheckedCreateWithoutResourcesInput>
    connectOrCreate?: usersCreateOrConnectWithoutResourcesInput
    upsert?: usersUpsertWithoutResourcesInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutResourcesInput, usersUpdateWithoutResourcesInput>, usersUncheckedUpdateWithoutResourcesInput>
  }

  export type teamsUpdateOneWithoutResourcesNestedInput = {
    create?: XOR<teamsCreateWithoutResourcesInput, teamsUncheckedCreateWithoutResourcesInput>
    connectOrCreate?: teamsCreateOrConnectWithoutResourcesInput
    upsert?: teamsUpsertWithoutResourcesInput
    disconnect?: teamsWhereInput | boolean
    delete?: teamsWhereInput | boolean
    connect?: teamsWhereUniqueInput
    update?: XOR<XOR<teamsUpdateToOneWithWhereWithoutResourcesInput, teamsUpdateWithoutResourcesInput>, teamsUncheckedUpdateWithoutResourcesInput>
  }

  export type project_resourcesUncheckedUpdateManyWithoutResourcesNestedInput = {
    create?: XOR<project_resourcesCreateWithoutResourcesInput, project_resourcesUncheckedCreateWithoutResourcesInput> | project_resourcesCreateWithoutResourcesInput[] | project_resourcesUncheckedCreateWithoutResourcesInput[]
    connectOrCreate?: project_resourcesCreateOrConnectWithoutResourcesInput | project_resourcesCreateOrConnectWithoutResourcesInput[]
    upsert?: project_resourcesUpsertWithWhereUniqueWithoutResourcesInput | project_resourcesUpsertWithWhereUniqueWithoutResourcesInput[]
    createMany?: project_resourcesCreateManyResourcesInputEnvelope
    set?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    disconnect?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    delete?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    connect?: project_resourcesWhereUniqueInput | project_resourcesWhereUniqueInput[]
    update?: project_resourcesUpdateWithWhereUniqueWithoutResourcesInput | project_resourcesUpdateWithWhereUniqueWithoutResourcesInput[]
    updateMany?: project_resourcesUpdateManyWithWhereWithoutResourcesInput | project_resourcesUpdateManyWithWhereWithoutResourcesInput[]
    deleteMany?: project_resourcesScalarWhereInput | project_resourcesScalarWhereInput[]
  }

  export type sprintsCreateNestedOneWithoutSprint_tasksInput = {
    create?: XOR<sprintsCreateWithoutSprint_tasksInput, sprintsUncheckedCreateWithoutSprint_tasksInput>
    connectOrCreate?: sprintsCreateOrConnectWithoutSprint_tasksInput
    connect?: sprintsWhereUniqueInput
  }

  export type tasksCreateNestedOneWithoutSprint_tasksInput = {
    create?: XOR<tasksCreateWithoutSprint_tasksInput, tasksUncheckedCreateWithoutSprint_tasksInput>
    connectOrCreate?: tasksCreateOrConnectWithoutSprint_tasksInput
    connect?: tasksWhereUniqueInput
  }

  export type sprintsUpdateOneRequiredWithoutSprint_tasksNestedInput = {
    create?: XOR<sprintsCreateWithoutSprint_tasksInput, sprintsUncheckedCreateWithoutSprint_tasksInput>
    connectOrCreate?: sprintsCreateOrConnectWithoutSprint_tasksInput
    upsert?: sprintsUpsertWithoutSprint_tasksInput
    connect?: sprintsWhereUniqueInput
    update?: XOR<XOR<sprintsUpdateToOneWithWhereWithoutSprint_tasksInput, sprintsUpdateWithoutSprint_tasksInput>, sprintsUncheckedUpdateWithoutSprint_tasksInput>
  }

  export type tasksUpdateOneRequiredWithoutSprint_tasksNestedInput = {
    create?: XOR<tasksCreateWithoutSprint_tasksInput, tasksUncheckedCreateWithoutSprint_tasksInput>
    connectOrCreate?: tasksCreateOrConnectWithoutSprint_tasksInput
    upsert?: tasksUpsertWithoutSprint_tasksInput
    connect?: tasksWhereUniqueInput
    update?: XOR<XOR<tasksUpdateToOneWithWhereWithoutSprint_tasksInput, tasksUpdateWithoutSprint_tasksInput>, tasksUncheckedUpdateWithoutSprint_tasksInput>
  }

  export type sprint_tasksCreateNestedManyWithoutSprintsInput = {
    create?: XOR<sprint_tasksCreateWithoutSprintsInput, sprint_tasksUncheckedCreateWithoutSprintsInput> | sprint_tasksCreateWithoutSprintsInput[] | sprint_tasksUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: sprint_tasksCreateOrConnectWithoutSprintsInput | sprint_tasksCreateOrConnectWithoutSprintsInput[]
    createMany?: sprint_tasksCreateManySprintsInputEnvelope
    connect?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
  }

  export type projectsCreateNestedOneWithoutSprintsInput = {
    create?: XOR<projectsCreateWithoutSprintsInput, projectsUncheckedCreateWithoutSprintsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutSprintsInput
    connect?: projectsWhereUniqueInput
  }

  export type sprint_tasksUncheckedCreateNestedManyWithoutSprintsInput = {
    create?: XOR<sprint_tasksCreateWithoutSprintsInput, sprint_tasksUncheckedCreateWithoutSprintsInput> | sprint_tasksCreateWithoutSprintsInput[] | sprint_tasksUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: sprint_tasksCreateOrConnectWithoutSprintsInput | sprint_tasksCreateOrConnectWithoutSprintsInput[]
    createMany?: sprint_tasksCreateManySprintsInputEnvelope
    connect?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
  }

  export type NullableEnumsprints_statusFieldUpdateOperationsInput = {
    set?: $Enums.sprints_status | null
  }

  export type sprint_tasksUpdateManyWithoutSprintsNestedInput = {
    create?: XOR<sprint_tasksCreateWithoutSprintsInput, sprint_tasksUncheckedCreateWithoutSprintsInput> | sprint_tasksCreateWithoutSprintsInput[] | sprint_tasksUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: sprint_tasksCreateOrConnectWithoutSprintsInput | sprint_tasksCreateOrConnectWithoutSprintsInput[]
    upsert?: sprint_tasksUpsertWithWhereUniqueWithoutSprintsInput | sprint_tasksUpsertWithWhereUniqueWithoutSprintsInput[]
    createMany?: sprint_tasksCreateManySprintsInputEnvelope
    set?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    disconnect?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    delete?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    connect?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    update?: sprint_tasksUpdateWithWhereUniqueWithoutSprintsInput | sprint_tasksUpdateWithWhereUniqueWithoutSprintsInput[]
    updateMany?: sprint_tasksUpdateManyWithWhereWithoutSprintsInput | sprint_tasksUpdateManyWithWhereWithoutSprintsInput[]
    deleteMany?: sprint_tasksScalarWhereInput | sprint_tasksScalarWhereInput[]
  }

  export type projectsUpdateOneRequiredWithoutSprintsNestedInput = {
    create?: XOR<projectsCreateWithoutSprintsInput, projectsUncheckedCreateWithoutSprintsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutSprintsInput
    upsert?: projectsUpsertWithoutSprintsInput
    connect?: projectsWhereUniqueInput
    update?: XOR<XOR<projectsUpdateToOneWithWhereWithoutSprintsInput, projectsUpdateWithoutSprintsInput>, projectsUncheckedUpdateWithoutSprintsInput>
  }

  export type sprint_tasksUncheckedUpdateManyWithoutSprintsNestedInput = {
    create?: XOR<sprint_tasksCreateWithoutSprintsInput, sprint_tasksUncheckedCreateWithoutSprintsInput> | sprint_tasksCreateWithoutSprintsInput[] | sprint_tasksUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: sprint_tasksCreateOrConnectWithoutSprintsInput | sprint_tasksCreateOrConnectWithoutSprintsInput[]
    upsert?: sprint_tasksUpsertWithWhereUniqueWithoutSprintsInput | sprint_tasksUpsertWithWhereUniqueWithoutSprintsInput[]
    createMany?: sprint_tasksCreateManySprintsInputEnvelope
    set?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    disconnect?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    delete?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    connect?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    update?: sprint_tasksUpdateWithWhereUniqueWithoutSprintsInput | sprint_tasksUpdateWithWhereUniqueWithoutSprintsInput[]
    updateMany?: sprint_tasksUpdateManyWithWhereWithoutSprintsInput | sprint_tasksUpdateManyWithWhereWithoutSprintsInput[]
    deleteMany?: sprint_tasksScalarWhereInput | sprint_tasksScalarWhereInput[]
  }

  export type contractsCreateNestedManyWithoutSuppliersInput = {
    create?: XOR<contractsCreateWithoutSuppliersInput, contractsUncheckedCreateWithoutSuppliersInput> | contractsCreateWithoutSuppliersInput[] | contractsUncheckedCreateWithoutSuppliersInput[]
    connectOrCreate?: contractsCreateOrConnectWithoutSuppliersInput | contractsCreateOrConnectWithoutSuppliersInput[]
    createMany?: contractsCreateManySuppliersInputEnvelope
    connect?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
  }

  export type contractsUncheckedCreateNestedManyWithoutSuppliersInput = {
    create?: XOR<contractsCreateWithoutSuppliersInput, contractsUncheckedCreateWithoutSuppliersInput> | contractsCreateWithoutSuppliersInput[] | contractsUncheckedCreateWithoutSuppliersInput[]
    connectOrCreate?: contractsCreateOrConnectWithoutSuppliersInput | contractsCreateOrConnectWithoutSuppliersInput[]
    createMany?: contractsCreateManySuppliersInputEnvelope
    connect?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
  }

  export type contractsUpdateManyWithoutSuppliersNestedInput = {
    create?: XOR<contractsCreateWithoutSuppliersInput, contractsUncheckedCreateWithoutSuppliersInput> | contractsCreateWithoutSuppliersInput[] | contractsUncheckedCreateWithoutSuppliersInput[]
    connectOrCreate?: contractsCreateOrConnectWithoutSuppliersInput | contractsCreateOrConnectWithoutSuppliersInput[]
    upsert?: contractsUpsertWithWhereUniqueWithoutSuppliersInput | contractsUpsertWithWhereUniqueWithoutSuppliersInput[]
    createMany?: contractsCreateManySuppliersInputEnvelope
    set?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    disconnect?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    delete?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    connect?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    update?: contractsUpdateWithWhereUniqueWithoutSuppliersInput | contractsUpdateWithWhereUniqueWithoutSuppliersInput[]
    updateMany?: contractsUpdateManyWithWhereWithoutSuppliersInput | contractsUpdateManyWithWhereWithoutSuppliersInput[]
    deleteMany?: contractsScalarWhereInput | contractsScalarWhereInput[]
  }

  export type contractsUncheckedUpdateManyWithoutSuppliersNestedInput = {
    create?: XOR<contractsCreateWithoutSuppliersInput, contractsUncheckedCreateWithoutSuppliersInput> | contractsCreateWithoutSuppliersInput[] | contractsUncheckedCreateWithoutSuppliersInput[]
    connectOrCreate?: contractsCreateOrConnectWithoutSuppliersInput | contractsCreateOrConnectWithoutSuppliersInput[]
    upsert?: contractsUpsertWithWhereUniqueWithoutSuppliersInput | contractsUpsertWithWhereUniqueWithoutSuppliersInput[]
    createMany?: contractsCreateManySuppliersInputEnvelope
    set?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    disconnect?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    delete?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    connect?: contractsWhereUniqueInput | contractsWhereUniqueInput[]
    update?: contractsUpdateWithWhereUniqueWithoutSuppliersInput | contractsUpdateWithWhereUniqueWithoutSuppliersInput[]
    updateMany?: contractsUpdateManyWithWhereWithoutSuppliersInput | contractsUpdateManyWithWhereWithoutSuppliersInput[]
    deleteMany?: contractsScalarWhereInput | contractsScalarWhereInput[]
  }

  export type tasksCreateNestedOneWithoutTask_assigneesInput = {
    create?: XOR<tasksCreateWithoutTask_assigneesInput, tasksUncheckedCreateWithoutTask_assigneesInput>
    connectOrCreate?: tasksCreateOrConnectWithoutTask_assigneesInput
    connect?: tasksWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutTask_assigneesInput = {
    create?: XOR<usersCreateWithoutTask_assigneesInput, usersUncheckedCreateWithoutTask_assigneesInput>
    connectOrCreate?: usersCreateOrConnectWithoutTask_assigneesInput
    connect?: usersWhereUniqueInput
  }

  export type tasksUpdateOneRequiredWithoutTask_assigneesNestedInput = {
    create?: XOR<tasksCreateWithoutTask_assigneesInput, tasksUncheckedCreateWithoutTask_assigneesInput>
    connectOrCreate?: tasksCreateOrConnectWithoutTask_assigneesInput
    upsert?: tasksUpsertWithoutTask_assigneesInput
    connect?: tasksWhereUniqueInput
    update?: XOR<XOR<tasksUpdateToOneWithWhereWithoutTask_assigneesInput, tasksUpdateWithoutTask_assigneesInput>, tasksUncheckedUpdateWithoutTask_assigneesInput>
  }

  export type usersUpdateOneRequiredWithoutTask_assigneesNestedInput = {
    create?: XOR<usersCreateWithoutTask_assigneesInput, usersUncheckedCreateWithoutTask_assigneesInput>
    connectOrCreate?: usersCreateOrConnectWithoutTask_assigneesInput
    upsert?: usersUpsertWithoutTask_assigneesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutTask_assigneesInput, usersUpdateWithoutTask_assigneesInput>, usersUncheckedUpdateWithoutTask_assigneesInput>
  }

  export type tasksCreateNestedOneWithoutTask_label_linksInput = {
    create?: XOR<tasksCreateWithoutTask_label_linksInput, tasksUncheckedCreateWithoutTask_label_linksInput>
    connectOrCreate?: tasksCreateOrConnectWithoutTask_label_linksInput
    connect?: tasksWhereUniqueInput
  }

  export type task_labelsCreateNestedOneWithoutTask_label_linksInput = {
    create?: XOR<task_labelsCreateWithoutTask_label_linksInput, task_labelsUncheckedCreateWithoutTask_label_linksInput>
    connectOrCreate?: task_labelsCreateOrConnectWithoutTask_label_linksInput
    connect?: task_labelsWhereUniqueInput
  }

  export type tasksUpdateOneRequiredWithoutTask_label_linksNestedInput = {
    create?: XOR<tasksCreateWithoutTask_label_linksInput, tasksUncheckedCreateWithoutTask_label_linksInput>
    connectOrCreate?: tasksCreateOrConnectWithoutTask_label_linksInput
    upsert?: tasksUpsertWithoutTask_label_linksInput
    connect?: tasksWhereUniqueInput
    update?: XOR<XOR<tasksUpdateToOneWithWhereWithoutTask_label_linksInput, tasksUpdateWithoutTask_label_linksInput>, tasksUncheckedUpdateWithoutTask_label_linksInput>
  }

  export type task_labelsUpdateOneRequiredWithoutTask_label_linksNestedInput = {
    create?: XOR<task_labelsCreateWithoutTask_label_linksInput, task_labelsUncheckedCreateWithoutTask_label_linksInput>
    connectOrCreate?: task_labelsCreateOrConnectWithoutTask_label_linksInput
    upsert?: task_labelsUpsertWithoutTask_label_linksInput
    connect?: task_labelsWhereUniqueInput
    update?: XOR<XOR<task_labelsUpdateToOneWithWhereWithoutTask_label_linksInput, task_labelsUpdateWithoutTask_label_linksInput>, task_labelsUncheckedUpdateWithoutTask_label_linksInput>
  }

  export type task_label_linksCreateNestedManyWithoutTask_labelsInput = {
    create?: XOR<task_label_linksCreateWithoutTask_labelsInput, task_label_linksUncheckedCreateWithoutTask_labelsInput> | task_label_linksCreateWithoutTask_labelsInput[] | task_label_linksUncheckedCreateWithoutTask_labelsInput[]
    connectOrCreate?: task_label_linksCreateOrConnectWithoutTask_labelsInput | task_label_linksCreateOrConnectWithoutTask_labelsInput[]
    createMany?: task_label_linksCreateManyTask_labelsInputEnvelope
    connect?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
  }

  export type task_label_linksUncheckedCreateNestedManyWithoutTask_labelsInput = {
    create?: XOR<task_label_linksCreateWithoutTask_labelsInput, task_label_linksUncheckedCreateWithoutTask_labelsInput> | task_label_linksCreateWithoutTask_labelsInput[] | task_label_linksUncheckedCreateWithoutTask_labelsInput[]
    connectOrCreate?: task_label_linksCreateOrConnectWithoutTask_labelsInput | task_label_linksCreateOrConnectWithoutTask_labelsInput[]
    createMany?: task_label_linksCreateManyTask_labelsInputEnvelope
    connect?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
  }

  export type task_label_linksUpdateManyWithoutTask_labelsNestedInput = {
    create?: XOR<task_label_linksCreateWithoutTask_labelsInput, task_label_linksUncheckedCreateWithoutTask_labelsInput> | task_label_linksCreateWithoutTask_labelsInput[] | task_label_linksUncheckedCreateWithoutTask_labelsInput[]
    connectOrCreate?: task_label_linksCreateOrConnectWithoutTask_labelsInput | task_label_linksCreateOrConnectWithoutTask_labelsInput[]
    upsert?: task_label_linksUpsertWithWhereUniqueWithoutTask_labelsInput | task_label_linksUpsertWithWhereUniqueWithoutTask_labelsInput[]
    createMany?: task_label_linksCreateManyTask_labelsInputEnvelope
    set?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    disconnect?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    delete?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    connect?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    update?: task_label_linksUpdateWithWhereUniqueWithoutTask_labelsInput | task_label_linksUpdateWithWhereUniqueWithoutTask_labelsInput[]
    updateMany?: task_label_linksUpdateManyWithWhereWithoutTask_labelsInput | task_label_linksUpdateManyWithWhereWithoutTask_labelsInput[]
    deleteMany?: task_label_linksScalarWhereInput | task_label_linksScalarWhereInput[]
  }

  export type task_label_linksUncheckedUpdateManyWithoutTask_labelsNestedInput = {
    create?: XOR<task_label_linksCreateWithoutTask_labelsInput, task_label_linksUncheckedCreateWithoutTask_labelsInput> | task_label_linksCreateWithoutTask_labelsInput[] | task_label_linksUncheckedCreateWithoutTask_labelsInput[]
    connectOrCreate?: task_label_linksCreateOrConnectWithoutTask_labelsInput | task_label_linksCreateOrConnectWithoutTask_labelsInput[]
    upsert?: task_label_linksUpsertWithWhereUniqueWithoutTask_labelsInput | task_label_linksUpsertWithWhereUniqueWithoutTask_labelsInput[]
    createMany?: task_label_linksCreateManyTask_labelsInputEnvelope
    set?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    disconnect?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    delete?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    connect?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    update?: task_label_linksUpdateWithWhereUniqueWithoutTask_labelsInput | task_label_linksUpdateWithWhereUniqueWithoutTask_labelsInput[]
    updateMany?: task_label_linksUpdateManyWithWhereWithoutTask_labelsInput | task_label_linksUpdateManyWithWhereWithoutTask_labelsInput[]
    deleteMany?: task_label_linksScalarWhereInput | task_label_linksScalarWhereInput[]
  }

  export type sprint_tasksCreateNestedManyWithoutTasksInput = {
    create?: XOR<sprint_tasksCreateWithoutTasksInput, sprint_tasksUncheckedCreateWithoutTasksInput> | sprint_tasksCreateWithoutTasksInput[] | sprint_tasksUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: sprint_tasksCreateOrConnectWithoutTasksInput | sprint_tasksCreateOrConnectWithoutTasksInput[]
    createMany?: sprint_tasksCreateManyTasksInputEnvelope
    connect?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
  }

  export type task_assigneesCreateNestedManyWithoutTasksInput = {
    create?: XOR<task_assigneesCreateWithoutTasksInput, task_assigneesUncheckedCreateWithoutTasksInput> | task_assigneesCreateWithoutTasksInput[] | task_assigneesUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: task_assigneesCreateOrConnectWithoutTasksInput | task_assigneesCreateOrConnectWithoutTasksInput[]
    createMany?: task_assigneesCreateManyTasksInputEnvelope
    connect?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
  }

  export type task_label_linksCreateNestedManyWithoutTasksInput = {
    create?: XOR<task_label_linksCreateWithoutTasksInput, task_label_linksUncheckedCreateWithoutTasksInput> | task_label_linksCreateWithoutTasksInput[] | task_label_linksUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: task_label_linksCreateOrConnectWithoutTasksInput | task_label_linksCreateOrConnectWithoutTasksInput[]
    createMany?: task_label_linksCreateManyTasksInputEnvelope
    connect?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
  }

  export type projectsCreateNestedOneWithoutTasksInput = {
    create?: XOR<projectsCreateWithoutTasksInput, projectsUncheckedCreateWithoutTasksInput>
    connectOrCreate?: projectsCreateOrConnectWithoutTasksInput
    connect?: projectsWhereUniqueInput
  }

  export type tasksCreateNestedOneWithoutOther_tasksInput = {
    create?: XOR<tasksCreateWithoutOther_tasksInput, tasksUncheckedCreateWithoutOther_tasksInput>
    connectOrCreate?: tasksCreateOrConnectWithoutOther_tasksInput
    connect?: tasksWhereUniqueInput
  }

  export type tasksCreateNestedManyWithoutTasksInput = {
    create?: XOR<tasksCreateWithoutTasksInput, tasksUncheckedCreateWithoutTasksInput> | tasksCreateWithoutTasksInput[] | tasksUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutTasksInput | tasksCreateOrConnectWithoutTasksInput[]
    createMany?: tasksCreateManyTasksInputEnvelope
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
  }

  export type usersCreateNestedOneWithoutTasksInput = {
    create?: XOR<usersCreateWithoutTasksInput, usersUncheckedCreateWithoutTasksInput>
    connectOrCreate?: usersCreateOrConnectWithoutTasksInput
    connect?: usersWhereUniqueInput
  }

  export type sprint_tasksUncheckedCreateNestedManyWithoutTasksInput = {
    create?: XOR<sprint_tasksCreateWithoutTasksInput, sprint_tasksUncheckedCreateWithoutTasksInput> | sprint_tasksCreateWithoutTasksInput[] | sprint_tasksUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: sprint_tasksCreateOrConnectWithoutTasksInput | sprint_tasksCreateOrConnectWithoutTasksInput[]
    createMany?: sprint_tasksCreateManyTasksInputEnvelope
    connect?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
  }

  export type task_assigneesUncheckedCreateNestedManyWithoutTasksInput = {
    create?: XOR<task_assigneesCreateWithoutTasksInput, task_assigneesUncheckedCreateWithoutTasksInput> | task_assigneesCreateWithoutTasksInput[] | task_assigneesUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: task_assigneesCreateOrConnectWithoutTasksInput | task_assigneesCreateOrConnectWithoutTasksInput[]
    createMany?: task_assigneesCreateManyTasksInputEnvelope
    connect?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
  }

  export type task_label_linksUncheckedCreateNestedManyWithoutTasksInput = {
    create?: XOR<task_label_linksCreateWithoutTasksInput, task_label_linksUncheckedCreateWithoutTasksInput> | task_label_linksCreateWithoutTasksInput[] | task_label_linksUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: task_label_linksCreateOrConnectWithoutTasksInput | task_label_linksCreateOrConnectWithoutTasksInput[]
    createMany?: task_label_linksCreateManyTasksInputEnvelope
    connect?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
  }

  export type tasksUncheckedCreateNestedManyWithoutTasksInput = {
    create?: XOR<tasksCreateWithoutTasksInput, tasksUncheckedCreateWithoutTasksInput> | tasksCreateWithoutTasksInput[] | tasksUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutTasksInput | tasksCreateOrConnectWithoutTasksInput[]
    createMany?: tasksCreateManyTasksInputEnvelope
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
  }

  export type NullableEnumtasks_statusFieldUpdateOperationsInput = {
    set?: $Enums.tasks_status | null
  }

  export type NullableEnumtasks_priorityFieldUpdateOperationsInput = {
    set?: $Enums.tasks_priority | null
  }

  export type sprint_tasksUpdateManyWithoutTasksNestedInput = {
    create?: XOR<sprint_tasksCreateWithoutTasksInput, sprint_tasksUncheckedCreateWithoutTasksInput> | sprint_tasksCreateWithoutTasksInput[] | sprint_tasksUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: sprint_tasksCreateOrConnectWithoutTasksInput | sprint_tasksCreateOrConnectWithoutTasksInput[]
    upsert?: sprint_tasksUpsertWithWhereUniqueWithoutTasksInput | sprint_tasksUpsertWithWhereUniqueWithoutTasksInput[]
    createMany?: sprint_tasksCreateManyTasksInputEnvelope
    set?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    disconnect?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    delete?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    connect?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    update?: sprint_tasksUpdateWithWhereUniqueWithoutTasksInput | sprint_tasksUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: sprint_tasksUpdateManyWithWhereWithoutTasksInput | sprint_tasksUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: sprint_tasksScalarWhereInput | sprint_tasksScalarWhereInput[]
  }

  export type task_assigneesUpdateManyWithoutTasksNestedInput = {
    create?: XOR<task_assigneesCreateWithoutTasksInput, task_assigneesUncheckedCreateWithoutTasksInput> | task_assigneesCreateWithoutTasksInput[] | task_assigneesUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: task_assigneesCreateOrConnectWithoutTasksInput | task_assigneesCreateOrConnectWithoutTasksInput[]
    upsert?: task_assigneesUpsertWithWhereUniqueWithoutTasksInput | task_assigneesUpsertWithWhereUniqueWithoutTasksInput[]
    createMany?: task_assigneesCreateManyTasksInputEnvelope
    set?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    disconnect?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    delete?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    connect?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    update?: task_assigneesUpdateWithWhereUniqueWithoutTasksInput | task_assigneesUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: task_assigneesUpdateManyWithWhereWithoutTasksInput | task_assigneesUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: task_assigneesScalarWhereInput | task_assigneesScalarWhereInput[]
  }

  export type task_label_linksUpdateManyWithoutTasksNestedInput = {
    create?: XOR<task_label_linksCreateWithoutTasksInput, task_label_linksUncheckedCreateWithoutTasksInput> | task_label_linksCreateWithoutTasksInput[] | task_label_linksUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: task_label_linksCreateOrConnectWithoutTasksInput | task_label_linksCreateOrConnectWithoutTasksInput[]
    upsert?: task_label_linksUpsertWithWhereUniqueWithoutTasksInput | task_label_linksUpsertWithWhereUniqueWithoutTasksInput[]
    createMany?: task_label_linksCreateManyTasksInputEnvelope
    set?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    disconnect?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    delete?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    connect?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    update?: task_label_linksUpdateWithWhereUniqueWithoutTasksInput | task_label_linksUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: task_label_linksUpdateManyWithWhereWithoutTasksInput | task_label_linksUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: task_label_linksScalarWhereInput | task_label_linksScalarWhereInput[]
  }

  export type projectsUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<projectsCreateWithoutTasksInput, projectsUncheckedCreateWithoutTasksInput>
    connectOrCreate?: projectsCreateOrConnectWithoutTasksInput
    upsert?: projectsUpsertWithoutTasksInput
    connect?: projectsWhereUniqueInput
    update?: XOR<XOR<projectsUpdateToOneWithWhereWithoutTasksInput, projectsUpdateWithoutTasksInput>, projectsUncheckedUpdateWithoutTasksInput>
  }

  export type tasksUpdateOneWithoutOther_tasksNestedInput = {
    create?: XOR<tasksCreateWithoutOther_tasksInput, tasksUncheckedCreateWithoutOther_tasksInput>
    connectOrCreate?: tasksCreateOrConnectWithoutOther_tasksInput
    upsert?: tasksUpsertWithoutOther_tasksInput
    disconnect?: tasksWhereInput | boolean
    delete?: tasksWhereInput | boolean
    connect?: tasksWhereUniqueInput
    update?: XOR<XOR<tasksUpdateToOneWithWhereWithoutOther_tasksInput, tasksUpdateWithoutOther_tasksInput>, tasksUncheckedUpdateWithoutOther_tasksInput>
  }

  export type tasksUpdateManyWithoutTasksNestedInput = {
    create?: XOR<tasksCreateWithoutTasksInput, tasksUncheckedCreateWithoutTasksInput> | tasksCreateWithoutTasksInput[] | tasksUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutTasksInput | tasksCreateOrConnectWithoutTasksInput[]
    upsert?: tasksUpsertWithWhereUniqueWithoutTasksInput | tasksUpsertWithWhereUniqueWithoutTasksInput[]
    createMany?: tasksCreateManyTasksInputEnvelope
    set?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    disconnect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    delete?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    update?: tasksUpdateWithWhereUniqueWithoutTasksInput | tasksUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: tasksUpdateManyWithWhereWithoutTasksInput | tasksUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: tasksScalarWhereInput | tasksScalarWhereInput[]
  }

  export type usersUpdateOneWithoutTasksNestedInput = {
    create?: XOR<usersCreateWithoutTasksInput, usersUncheckedCreateWithoutTasksInput>
    connectOrCreate?: usersCreateOrConnectWithoutTasksInput
    upsert?: usersUpsertWithoutTasksInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutTasksInput, usersUpdateWithoutTasksInput>, usersUncheckedUpdateWithoutTasksInput>
  }

  export type sprint_tasksUncheckedUpdateManyWithoutTasksNestedInput = {
    create?: XOR<sprint_tasksCreateWithoutTasksInput, sprint_tasksUncheckedCreateWithoutTasksInput> | sprint_tasksCreateWithoutTasksInput[] | sprint_tasksUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: sprint_tasksCreateOrConnectWithoutTasksInput | sprint_tasksCreateOrConnectWithoutTasksInput[]
    upsert?: sprint_tasksUpsertWithWhereUniqueWithoutTasksInput | sprint_tasksUpsertWithWhereUniqueWithoutTasksInput[]
    createMany?: sprint_tasksCreateManyTasksInputEnvelope
    set?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    disconnect?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    delete?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    connect?: sprint_tasksWhereUniqueInput | sprint_tasksWhereUniqueInput[]
    update?: sprint_tasksUpdateWithWhereUniqueWithoutTasksInput | sprint_tasksUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: sprint_tasksUpdateManyWithWhereWithoutTasksInput | sprint_tasksUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: sprint_tasksScalarWhereInput | sprint_tasksScalarWhereInput[]
  }

  export type task_assigneesUncheckedUpdateManyWithoutTasksNestedInput = {
    create?: XOR<task_assigneesCreateWithoutTasksInput, task_assigneesUncheckedCreateWithoutTasksInput> | task_assigneesCreateWithoutTasksInput[] | task_assigneesUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: task_assigneesCreateOrConnectWithoutTasksInput | task_assigneesCreateOrConnectWithoutTasksInput[]
    upsert?: task_assigneesUpsertWithWhereUniqueWithoutTasksInput | task_assigneesUpsertWithWhereUniqueWithoutTasksInput[]
    createMany?: task_assigneesCreateManyTasksInputEnvelope
    set?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    disconnect?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    delete?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    connect?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    update?: task_assigneesUpdateWithWhereUniqueWithoutTasksInput | task_assigneesUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: task_assigneesUpdateManyWithWhereWithoutTasksInput | task_assigneesUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: task_assigneesScalarWhereInput | task_assigneesScalarWhereInput[]
  }

  export type task_label_linksUncheckedUpdateManyWithoutTasksNestedInput = {
    create?: XOR<task_label_linksCreateWithoutTasksInput, task_label_linksUncheckedCreateWithoutTasksInput> | task_label_linksCreateWithoutTasksInput[] | task_label_linksUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: task_label_linksCreateOrConnectWithoutTasksInput | task_label_linksCreateOrConnectWithoutTasksInput[]
    upsert?: task_label_linksUpsertWithWhereUniqueWithoutTasksInput | task_label_linksUpsertWithWhereUniqueWithoutTasksInput[]
    createMany?: task_label_linksCreateManyTasksInputEnvelope
    set?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    disconnect?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    delete?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    connect?: task_label_linksWhereUniqueInput | task_label_linksWhereUniqueInput[]
    update?: task_label_linksUpdateWithWhereUniqueWithoutTasksInput | task_label_linksUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: task_label_linksUpdateManyWithWhereWithoutTasksInput | task_label_linksUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: task_label_linksScalarWhereInput | task_label_linksScalarWhereInput[]
  }

  export type tasksUncheckedUpdateManyWithoutTasksNestedInput = {
    create?: XOR<tasksCreateWithoutTasksInput, tasksUncheckedCreateWithoutTasksInput> | tasksCreateWithoutTasksInput[] | tasksUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutTasksInput | tasksCreateOrConnectWithoutTasksInput[]
    upsert?: tasksUpsertWithWhereUniqueWithoutTasksInput | tasksUpsertWithWhereUniqueWithoutTasksInput[]
    createMany?: tasksCreateManyTasksInputEnvelope
    set?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    disconnect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    delete?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    update?: tasksUpdateWithWhereUniqueWithoutTasksInput | tasksUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: tasksUpdateManyWithWhereWithoutTasksInput | tasksUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: tasksScalarWhereInput | tasksScalarWhereInput[]
  }

  export type teamsCreateNestedOneWithoutTeam_membersInput = {
    create?: XOR<teamsCreateWithoutTeam_membersInput, teamsUncheckedCreateWithoutTeam_membersInput>
    connectOrCreate?: teamsCreateOrConnectWithoutTeam_membersInput
    connect?: teamsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutTeam_membersInput = {
    create?: XOR<usersCreateWithoutTeam_membersInput, usersUncheckedCreateWithoutTeam_membersInput>
    connectOrCreate?: usersCreateOrConnectWithoutTeam_membersInput
    connect?: usersWhereUniqueInput
  }

  export type NullableEnumteam_members_roleFieldUpdateOperationsInput = {
    set?: $Enums.team_members_role | null
  }

  export type teamsUpdateOneRequiredWithoutTeam_membersNestedInput = {
    create?: XOR<teamsCreateWithoutTeam_membersInput, teamsUncheckedCreateWithoutTeam_membersInput>
    connectOrCreate?: teamsCreateOrConnectWithoutTeam_membersInput
    upsert?: teamsUpsertWithoutTeam_membersInput
    connect?: teamsWhereUniqueInput
    update?: XOR<XOR<teamsUpdateToOneWithWhereWithoutTeam_membersInput, teamsUpdateWithoutTeam_membersInput>, teamsUncheckedUpdateWithoutTeam_membersInput>
  }

  export type usersUpdateOneRequiredWithoutTeam_membersNestedInput = {
    create?: XOR<usersCreateWithoutTeam_membersInput, usersUncheckedCreateWithoutTeam_membersInput>
    connectOrCreate?: usersCreateOrConnectWithoutTeam_membersInput
    upsert?: usersUpsertWithoutTeam_membersInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutTeam_membersInput, usersUpdateWithoutTeam_membersInput>, usersUncheckedUpdateWithoutTeam_membersInput>
  }

  export type channelsCreateNestedManyWithoutTeamsInput = {
    create?: XOR<channelsCreateWithoutTeamsInput, channelsUncheckedCreateWithoutTeamsInput> | channelsCreateWithoutTeamsInput[] | channelsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: channelsCreateOrConnectWithoutTeamsInput | channelsCreateOrConnectWithoutTeamsInput[]
    createMany?: channelsCreateManyTeamsInputEnvelope
    connect?: channelsWhereUniqueInput | channelsWhereUniqueInput[]
  }

  export type projectsCreateNestedManyWithoutTeamsInput = {
    create?: XOR<projectsCreateWithoutTeamsInput, projectsUncheckedCreateWithoutTeamsInput> | projectsCreateWithoutTeamsInput[] | projectsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: projectsCreateOrConnectWithoutTeamsInput | projectsCreateOrConnectWithoutTeamsInput[]
    createMany?: projectsCreateManyTeamsInputEnvelope
    connect?: projectsWhereUniqueInput | projectsWhereUniqueInput[]
  }

  export type reportsCreateNestedManyWithoutTeamsInput = {
    create?: XOR<reportsCreateWithoutTeamsInput, reportsUncheckedCreateWithoutTeamsInput> | reportsCreateWithoutTeamsInput[] | reportsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutTeamsInput | reportsCreateOrConnectWithoutTeamsInput[]
    createMany?: reportsCreateManyTeamsInputEnvelope
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
  }

  export type resourcesCreateNestedManyWithoutTeamsInput = {
    create?: XOR<resourcesCreateWithoutTeamsInput, resourcesUncheckedCreateWithoutTeamsInput> | resourcesCreateWithoutTeamsInput[] | resourcesUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: resourcesCreateOrConnectWithoutTeamsInput | resourcesCreateOrConnectWithoutTeamsInput[]
    createMany?: resourcesCreateManyTeamsInputEnvelope
    connect?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
  }

  export type team_membersCreateNestedManyWithoutTeamsInput = {
    create?: XOR<team_membersCreateWithoutTeamsInput, team_membersUncheckedCreateWithoutTeamsInput> | team_membersCreateWithoutTeamsInput[] | team_membersUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: team_membersCreateOrConnectWithoutTeamsInput | team_membersCreateOrConnectWithoutTeamsInput[]
    createMany?: team_membersCreateManyTeamsInputEnvelope
    connect?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
  }

  export type channelsUncheckedCreateNestedManyWithoutTeamsInput = {
    create?: XOR<channelsCreateWithoutTeamsInput, channelsUncheckedCreateWithoutTeamsInput> | channelsCreateWithoutTeamsInput[] | channelsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: channelsCreateOrConnectWithoutTeamsInput | channelsCreateOrConnectWithoutTeamsInput[]
    createMany?: channelsCreateManyTeamsInputEnvelope
    connect?: channelsWhereUniqueInput | channelsWhereUniqueInput[]
  }

  export type projectsUncheckedCreateNestedManyWithoutTeamsInput = {
    create?: XOR<projectsCreateWithoutTeamsInput, projectsUncheckedCreateWithoutTeamsInput> | projectsCreateWithoutTeamsInput[] | projectsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: projectsCreateOrConnectWithoutTeamsInput | projectsCreateOrConnectWithoutTeamsInput[]
    createMany?: projectsCreateManyTeamsInputEnvelope
    connect?: projectsWhereUniqueInput | projectsWhereUniqueInput[]
  }

  export type reportsUncheckedCreateNestedManyWithoutTeamsInput = {
    create?: XOR<reportsCreateWithoutTeamsInput, reportsUncheckedCreateWithoutTeamsInput> | reportsCreateWithoutTeamsInput[] | reportsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutTeamsInput | reportsCreateOrConnectWithoutTeamsInput[]
    createMany?: reportsCreateManyTeamsInputEnvelope
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
  }

  export type resourcesUncheckedCreateNestedManyWithoutTeamsInput = {
    create?: XOR<resourcesCreateWithoutTeamsInput, resourcesUncheckedCreateWithoutTeamsInput> | resourcesCreateWithoutTeamsInput[] | resourcesUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: resourcesCreateOrConnectWithoutTeamsInput | resourcesCreateOrConnectWithoutTeamsInput[]
    createMany?: resourcesCreateManyTeamsInputEnvelope
    connect?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
  }

  export type team_membersUncheckedCreateNestedManyWithoutTeamsInput = {
    create?: XOR<team_membersCreateWithoutTeamsInput, team_membersUncheckedCreateWithoutTeamsInput> | team_membersCreateWithoutTeamsInput[] | team_membersUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: team_membersCreateOrConnectWithoutTeamsInput | team_membersCreateOrConnectWithoutTeamsInput[]
    createMany?: team_membersCreateManyTeamsInputEnvelope
    connect?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
  }

  export type channelsUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<channelsCreateWithoutTeamsInput, channelsUncheckedCreateWithoutTeamsInput> | channelsCreateWithoutTeamsInput[] | channelsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: channelsCreateOrConnectWithoutTeamsInput | channelsCreateOrConnectWithoutTeamsInput[]
    upsert?: channelsUpsertWithWhereUniqueWithoutTeamsInput | channelsUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: channelsCreateManyTeamsInputEnvelope
    set?: channelsWhereUniqueInput | channelsWhereUniqueInput[]
    disconnect?: channelsWhereUniqueInput | channelsWhereUniqueInput[]
    delete?: channelsWhereUniqueInput | channelsWhereUniqueInput[]
    connect?: channelsWhereUniqueInput | channelsWhereUniqueInput[]
    update?: channelsUpdateWithWhereUniqueWithoutTeamsInput | channelsUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: channelsUpdateManyWithWhereWithoutTeamsInput | channelsUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: channelsScalarWhereInput | channelsScalarWhereInput[]
  }

  export type projectsUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<projectsCreateWithoutTeamsInput, projectsUncheckedCreateWithoutTeamsInput> | projectsCreateWithoutTeamsInput[] | projectsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: projectsCreateOrConnectWithoutTeamsInput | projectsCreateOrConnectWithoutTeamsInput[]
    upsert?: projectsUpsertWithWhereUniqueWithoutTeamsInput | projectsUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: projectsCreateManyTeamsInputEnvelope
    set?: projectsWhereUniqueInput | projectsWhereUniqueInput[]
    disconnect?: projectsWhereUniqueInput | projectsWhereUniqueInput[]
    delete?: projectsWhereUniqueInput | projectsWhereUniqueInput[]
    connect?: projectsWhereUniqueInput | projectsWhereUniqueInput[]
    update?: projectsUpdateWithWhereUniqueWithoutTeamsInput | projectsUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: projectsUpdateManyWithWhereWithoutTeamsInput | projectsUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: projectsScalarWhereInput | projectsScalarWhereInput[]
  }

  export type reportsUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<reportsCreateWithoutTeamsInput, reportsUncheckedCreateWithoutTeamsInput> | reportsCreateWithoutTeamsInput[] | reportsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutTeamsInput | reportsCreateOrConnectWithoutTeamsInput[]
    upsert?: reportsUpsertWithWhereUniqueWithoutTeamsInput | reportsUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: reportsCreateManyTeamsInputEnvelope
    set?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    disconnect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    delete?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    update?: reportsUpdateWithWhereUniqueWithoutTeamsInput | reportsUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: reportsUpdateManyWithWhereWithoutTeamsInput | reportsUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: reportsScalarWhereInput | reportsScalarWhereInput[]
  }

  export type resourcesUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<resourcesCreateWithoutTeamsInput, resourcesUncheckedCreateWithoutTeamsInput> | resourcesCreateWithoutTeamsInput[] | resourcesUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: resourcesCreateOrConnectWithoutTeamsInput | resourcesCreateOrConnectWithoutTeamsInput[]
    upsert?: resourcesUpsertWithWhereUniqueWithoutTeamsInput | resourcesUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: resourcesCreateManyTeamsInputEnvelope
    set?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    disconnect?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    delete?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    connect?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    update?: resourcesUpdateWithWhereUniqueWithoutTeamsInput | resourcesUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: resourcesUpdateManyWithWhereWithoutTeamsInput | resourcesUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: resourcesScalarWhereInput | resourcesScalarWhereInput[]
  }

  export type team_membersUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<team_membersCreateWithoutTeamsInput, team_membersUncheckedCreateWithoutTeamsInput> | team_membersCreateWithoutTeamsInput[] | team_membersUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: team_membersCreateOrConnectWithoutTeamsInput | team_membersCreateOrConnectWithoutTeamsInput[]
    upsert?: team_membersUpsertWithWhereUniqueWithoutTeamsInput | team_membersUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: team_membersCreateManyTeamsInputEnvelope
    set?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    disconnect?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    delete?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    connect?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    update?: team_membersUpdateWithWhereUniqueWithoutTeamsInput | team_membersUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: team_membersUpdateManyWithWhereWithoutTeamsInput | team_membersUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: team_membersScalarWhereInput | team_membersScalarWhereInput[]
  }

  export type channelsUncheckedUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<channelsCreateWithoutTeamsInput, channelsUncheckedCreateWithoutTeamsInput> | channelsCreateWithoutTeamsInput[] | channelsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: channelsCreateOrConnectWithoutTeamsInput | channelsCreateOrConnectWithoutTeamsInput[]
    upsert?: channelsUpsertWithWhereUniqueWithoutTeamsInput | channelsUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: channelsCreateManyTeamsInputEnvelope
    set?: channelsWhereUniqueInput | channelsWhereUniqueInput[]
    disconnect?: channelsWhereUniqueInput | channelsWhereUniqueInput[]
    delete?: channelsWhereUniqueInput | channelsWhereUniqueInput[]
    connect?: channelsWhereUniqueInput | channelsWhereUniqueInput[]
    update?: channelsUpdateWithWhereUniqueWithoutTeamsInput | channelsUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: channelsUpdateManyWithWhereWithoutTeamsInput | channelsUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: channelsScalarWhereInput | channelsScalarWhereInput[]
  }

  export type projectsUncheckedUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<projectsCreateWithoutTeamsInput, projectsUncheckedCreateWithoutTeamsInput> | projectsCreateWithoutTeamsInput[] | projectsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: projectsCreateOrConnectWithoutTeamsInput | projectsCreateOrConnectWithoutTeamsInput[]
    upsert?: projectsUpsertWithWhereUniqueWithoutTeamsInput | projectsUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: projectsCreateManyTeamsInputEnvelope
    set?: projectsWhereUniqueInput | projectsWhereUniqueInput[]
    disconnect?: projectsWhereUniqueInput | projectsWhereUniqueInput[]
    delete?: projectsWhereUniqueInput | projectsWhereUniqueInput[]
    connect?: projectsWhereUniqueInput | projectsWhereUniqueInput[]
    update?: projectsUpdateWithWhereUniqueWithoutTeamsInput | projectsUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: projectsUpdateManyWithWhereWithoutTeamsInput | projectsUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: projectsScalarWhereInput | projectsScalarWhereInput[]
  }

  export type reportsUncheckedUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<reportsCreateWithoutTeamsInput, reportsUncheckedCreateWithoutTeamsInput> | reportsCreateWithoutTeamsInput[] | reportsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutTeamsInput | reportsCreateOrConnectWithoutTeamsInput[]
    upsert?: reportsUpsertWithWhereUniqueWithoutTeamsInput | reportsUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: reportsCreateManyTeamsInputEnvelope
    set?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    disconnect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    delete?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    update?: reportsUpdateWithWhereUniqueWithoutTeamsInput | reportsUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: reportsUpdateManyWithWhereWithoutTeamsInput | reportsUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: reportsScalarWhereInput | reportsScalarWhereInput[]
  }

  export type resourcesUncheckedUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<resourcesCreateWithoutTeamsInput, resourcesUncheckedCreateWithoutTeamsInput> | resourcesCreateWithoutTeamsInput[] | resourcesUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: resourcesCreateOrConnectWithoutTeamsInput | resourcesCreateOrConnectWithoutTeamsInput[]
    upsert?: resourcesUpsertWithWhereUniqueWithoutTeamsInput | resourcesUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: resourcesCreateManyTeamsInputEnvelope
    set?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    disconnect?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    delete?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    connect?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    update?: resourcesUpdateWithWhereUniqueWithoutTeamsInput | resourcesUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: resourcesUpdateManyWithWhereWithoutTeamsInput | resourcesUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: resourcesScalarWhereInput | resourcesScalarWhereInput[]
  }

  export type team_membersUncheckedUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<team_membersCreateWithoutTeamsInput, team_membersUncheckedCreateWithoutTeamsInput> | team_membersCreateWithoutTeamsInput[] | team_membersUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: team_membersCreateOrConnectWithoutTeamsInput | team_membersCreateOrConnectWithoutTeamsInput[]
    upsert?: team_membersUpsertWithWhereUniqueWithoutTeamsInput | team_membersUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: team_membersCreateManyTeamsInputEnvelope
    set?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    disconnect?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    delete?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    connect?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    update?: team_membersUpdateWithWhereUniqueWithoutTeamsInput | team_membersUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: team_membersUpdateManyWithWhereWithoutTeamsInput | team_membersUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: team_membersScalarWhereInput | team_membersScalarWhereInput[]
  }

  export type ticketsCreateNestedOneWithoutTicket_commentsInput = {
    create?: XOR<ticketsCreateWithoutTicket_commentsInput, ticketsUncheckedCreateWithoutTicket_commentsInput>
    connectOrCreate?: ticketsCreateOrConnectWithoutTicket_commentsInput
    connect?: ticketsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutTicket_commentsInput = {
    create?: XOR<usersCreateWithoutTicket_commentsInput, usersUncheckedCreateWithoutTicket_commentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutTicket_commentsInput
    connect?: usersWhereUniqueInput
  }

  export type ticketsUpdateOneRequiredWithoutTicket_commentsNestedInput = {
    create?: XOR<ticketsCreateWithoutTicket_commentsInput, ticketsUncheckedCreateWithoutTicket_commentsInput>
    connectOrCreate?: ticketsCreateOrConnectWithoutTicket_commentsInput
    upsert?: ticketsUpsertWithoutTicket_commentsInput
    connect?: ticketsWhereUniqueInput
    update?: XOR<XOR<ticketsUpdateToOneWithWhereWithoutTicket_commentsInput, ticketsUpdateWithoutTicket_commentsInput>, ticketsUncheckedUpdateWithoutTicket_commentsInput>
  }

  export type usersUpdateOneRequiredWithoutTicket_commentsNestedInput = {
    create?: XOR<usersCreateWithoutTicket_commentsInput, usersUncheckedCreateWithoutTicket_commentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutTicket_commentsInput
    upsert?: usersUpsertWithoutTicket_commentsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutTicket_commentsInput, usersUpdateWithoutTicket_commentsInput>, usersUncheckedUpdateWithoutTicket_commentsInput>
  }

  export type ticketsCreateNestedOneWithoutTicket_historyInput = {
    create?: XOR<ticketsCreateWithoutTicket_historyInput, ticketsUncheckedCreateWithoutTicket_historyInput>
    connectOrCreate?: ticketsCreateOrConnectWithoutTicket_historyInput
    connect?: ticketsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutTicket_historyInput = {
    create?: XOR<usersCreateWithoutTicket_historyInput, usersUncheckedCreateWithoutTicket_historyInput>
    connectOrCreate?: usersCreateOrConnectWithoutTicket_historyInput
    connect?: usersWhereUniqueInput
  }

  export type ticketsUpdateOneRequiredWithoutTicket_historyNestedInput = {
    create?: XOR<ticketsCreateWithoutTicket_historyInput, ticketsUncheckedCreateWithoutTicket_historyInput>
    connectOrCreate?: ticketsCreateOrConnectWithoutTicket_historyInput
    upsert?: ticketsUpsertWithoutTicket_historyInput
    connect?: ticketsWhereUniqueInput
    update?: XOR<XOR<ticketsUpdateToOneWithWhereWithoutTicket_historyInput, ticketsUpdateWithoutTicket_historyInput>, ticketsUncheckedUpdateWithoutTicket_historyInput>
  }

  export type usersUpdateOneWithoutTicket_historyNestedInput = {
    create?: XOR<usersCreateWithoutTicket_historyInput, usersUncheckedCreateWithoutTicket_historyInput>
    connectOrCreate?: usersCreateOrConnectWithoutTicket_historyInput
    upsert?: usersUpsertWithoutTicket_historyInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutTicket_historyInput, usersUpdateWithoutTicket_historyInput>, usersUncheckedUpdateWithoutTicket_historyInput>
  }

  export type ticketsCreateNestedOneWithoutTicket_workflowInput = {
    create?: XOR<ticketsCreateWithoutTicket_workflowInput, ticketsUncheckedCreateWithoutTicket_workflowInput>
    connectOrCreate?: ticketsCreateOrConnectWithoutTicket_workflowInput
    connect?: ticketsWhereUniqueInput
  }

  export type workflowsCreateNestedOneWithoutTicket_workflowInput = {
    create?: XOR<workflowsCreateWithoutTicket_workflowInput, workflowsUncheckedCreateWithoutTicket_workflowInput>
    connectOrCreate?: workflowsCreateOrConnectWithoutTicket_workflowInput
    connect?: workflowsWhereUniqueInput
  }

  export type workflow_stepsCreateNestedOneWithoutTicket_workflowInput = {
    create?: XOR<workflow_stepsCreateWithoutTicket_workflowInput, workflow_stepsUncheckedCreateWithoutTicket_workflowInput>
    connectOrCreate?: workflow_stepsCreateOrConnectWithoutTicket_workflowInput
    connect?: workflow_stepsWhereUniqueInput
  }

  export type ticketsUpdateOneRequiredWithoutTicket_workflowNestedInput = {
    create?: XOR<ticketsCreateWithoutTicket_workflowInput, ticketsUncheckedCreateWithoutTicket_workflowInput>
    connectOrCreate?: ticketsCreateOrConnectWithoutTicket_workflowInput
    upsert?: ticketsUpsertWithoutTicket_workflowInput
    connect?: ticketsWhereUniqueInput
    update?: XOR<XOR<ticketsUpdateToOneWithWhereWithoutTicket_workflowInput, ticketsUpdateWithoutTicket_workflowInput>, ticketsUncheckedUpdateWithoutTicket_workflowInput>
  }

  export type workflowsUpdateOneRequiredWithoutTicket_workflowNestedInput = {
    create?: XOR<workflowsCreateWithoutTicket_workflowInput, workflowsUncheckedCreateWithoutTicket_workflowInput>
    connectOrCreate?: workflowsCreateOrConnectWithoutTicket_workflowInput
    upsert?: workflowsUpsertWithoutTicket_workflowInput
    connect?: workflowsWhereUniqueInput
    update?: XOR<XOR<workflowsUpdateToOneWithWhereWithoutTicket_workflowInput, workflowsUpdateWithoutTicket_workflowInput>, workflowsUncheckedUpdateWithoutTicket_workflowInput>
  }

  export type workflow_stepsUpdateOneWithoutTicket_workflowNestedInput = {
    create?: XOR<workflow_stepsCreateWithoutTicket_workflowInput, workflow_stepsUncheckedCreateWithoutTicket_workflowInput>
    connectOrCreate?: workflow_stepsCreateOrConnectWithoutTicket_workflowInput
    upsert?: workflow_stepsUpsertWithoutTicket_workflowInput
    disconnect?: workflow_stepsWhereInput | boolean
    delete?: workflow_stepsWhereInput | boolean
    connect?: workflow_stepsWhereUniqueInput
    update?: XOR<XOR<workflow_stepsUpdateToOneWithWhereWithoutTicket_workflowInput, workflow_stepsUpdateWithoutTicket_workflowInput>, workflow_stepsUncheckedUpdateWithoutTicket_workflowInput>
  }

  export type ticket_commentsCreateNestedManyWithoutTicketsInput = {
    create?: XOR<ticket_commentsCreateWithoutTicketsInput, ticket_commentsUncheckedCreateWithoutTicketsInput> | ticket_commentsCreateWithoutTicketsInput[] | ticket_commentsUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: ticket_commentsCreateOrConnectWithoutTicketsInput | ticket_commentsCreateOrConnectWithoutTicketsInput[]
    createMany?: ticket_commentsCreateManyTicketsInputEnvelope
    connect?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
  }

  export type ticket_historyCreateNestedManyWithoutTicketsInput = {
    create?: XOR<ticket_historyCreateWithoutTicketsInput, ticket_historyUncheckedCreateWithoutTicketsInput> | ticket_historyCreateWithoutTicketsInput[] | ticket_historyUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: ticket_historyCreateOrConnectWithoutTicketsInput | ticket_historyCreateOrConnectWithoutTicketsInput[]
    createMany?: ticket_historyCreateManyTicketsInputEnvelope
    connect?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
  }

  export type ticket_workflowCreateNestedManyWithoutTicketsInput = {
    create?: XOR<ticket_workflowCreateWithoutTicketsInput, ticket_workflowUncheckedCreateWithoutTicketsInput> | ticket_workflowCreateWithoutTicketsInput[] | ticket_workflowUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: ticket_workflowCreateOrConnectWithoutTicketsInput | ticket_workflowCreateOrConnectWithoutTicketsInput[]
    createMany?: ticket_workflowCreateManyTicketsInputEnvelope
    connect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
  }

  export type projectsCreateNestedOneWithoutTicketsInput = {
    create?: XOR<projectsCreateWithoutTicketsInput, projectsUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutTicketsInput
    connect?: projectsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutTickets_tickets_created_byTousersInput = {
    create?: XOR<usersCreateWithoutTickets_tickets_created_byTousersInput, usersUncheckedCreateWithoutTickets_tickets_created_byTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutTickets_tickets_created_byTousersInput
    connect?: usersWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutTickets_tickets_assigned_toTousersInput = {
    create?: XOR<usersCreateWithoutTickets_tickets_assigned_toTousersInput, usersUncheckedCreateWithoutTickets_tickets_assigned_toTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutTickets_tickets_assigned_toTousersInput
    connect?: usersWhereUniqueInput
  }

  export type ticket_commentsUncheckedCreateNestedManyWithoutTicketsInput = {
    create?: XOR<ticket_commentsCreateWithoutTicketsInput, ticket_commentsUncheckedCreateWithoutTicketsInput> | ticket_commentsCreateWithoutTicketsInput[] | ticket_commentsUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: ticket_commentsCreateOrConnectWithoutTicketsInput | ticket_commentsCreateOrConnectWithoutTicketsInput[]
    createMany?: ticket_commentsCreateManyTicketsInputEnvelope
    connect?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
  }

  export type ticket_historyUncheckedCreateNestedManyWithoutTicketsInput = {
    create?: XOR<ticket_historyCreateWithoutTicketsInput, ticket_historyUncheckedCreateWithoutTicketsInput> | ticket_historyCreateWithoutTicketsInput[] | ticket_historyUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: ticket_historyCreateOrConnectWithoutTicketsInput | ticket_historyCreateOrConnectWithoutTicketsInput[]
    createMany?: ticket_historyCreateManyTicketsInputEnvelope
    connect?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
  }

  export type ticket_workflowUncheckedCreateNestedManyWithoutTicketsInput = {
    create?: XOR<ticket_workflowCreateWithoutTicketsInput, ticket_workflowUncheckedCreateWithoutTicketsInput> | ticket_workflowCreateWithoutTicketsInput[] | ticket_workflowUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: ticket_workflowCreateOrConnectWithoutTicketsInput | ticket_workflowCreateOrConnectWithoutTicketsInput[]
    createMany?: ticket_workflowCreateManyTicketsInputEnvelope
    connect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
  }

  export type NullableEnumtickets_typeFieldUpdateOperationsInput = {
    set?: $Enums.tickets_type | null
  }

  export type NullableEnumtickets_statusFieldUpdateOperationsInput = {
    set?: $Enums.tickets_status | null
  }

  export type NullableEnumtickets_priorityFieldUpdateOperationsInput = {
    set?: $Enums.tickets_priority | null
  }

  export type ticket_commentsUpdateManyWithoutTicketsNestedInput = {
    create?: XOR<ticket_commentsCreateWithoutTicketsInput, ticket_commentsUncheckedCreateWithoutTicketsInput> | ticket_commentsCreateWithoutTicketsInput[] | ticket_commentsUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: ticket_commentsCreateOrConnectWithoutTicketsInput | ticket_commentsCreateOrConnectWithoutTicketsInput[]
    upsert?: ticket_commentsUpsertWithWhereUniqueWithoutTicketsInput | ticket_commentsUpsertWithWhereUniqueWithoutTicketsInput[]
    createMany?: ticket_commentsCreateManyTicketsInputEnvelope
    set?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    disconnect?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    delete?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    connect?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    update?: ticket_commentsUpdateWithWhereUniqueWithoutTicketsInput | ticket_commentsUpdateWithWhereUniqueWithoutTicketsInput[]
    updateMany?: ticket_commentsUpdateManyWithWhereWithoutTicketsInput | ticket_commentsUpdateManyWithWhereWithoutTicketsInput[]
    deleteMany?: ticket_commentsScalarWhereInput | ticket_commentsScalarWhereInput[]
  }

  export type ticket_historyUpdateManyWithoutTicketsNestedInput = {
    create?: XOR<ticket_historyCreateWithoutTicketsInput, ticket_historyUncheckedCreateWithoutTicketsInput> | ticket_historyCreateWithoutTicketsInput[] | ticket_historyUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: ticket_historyCreateOrConnectWithoutTicketsInput | ticket_historyCreateOrConnectWithoutTicketsInput[]
    upsert?: ticket_historyUpsertWithWhereUniqueWithoutTicketsInput | ticket_historyUpsertWithWhereUniqueWithoutTicketsInput[]
    createMany?: ticket_historyCreateManyTicketsInputEnvelope
    set?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    disconnect?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    delete?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    connect?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    update?: ticket_historyUpdateWithWhereUniqueWithoutTicketsInput | ticket_historyUpdateWithWhereUniqueWithoutTicketsInput[]
    updateMany?: ticket_historyUpdateManyWithWhereWithoutTicketsInput | ticket_historyUpdateManyWithWhereWithoutTicketsInput[]
    deleteMany?: ticket_historyScalarWhereInput | ticket_historyScalarWhereInput[]
  }

  export type ticket_workflowUpdateManyWithoutTicketsNestedInput = {
    create?: XOR<ticket_workflowCreateWithoutTicketsInput, ticket_workflowUncheckedCreateWithoutTicketsInput> | ticket_workflowCreateWithoutTicketsInput[] | ticket_workflowUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: ticket_workflowCreateOrConnectWithoutTicketsInput | ticket_workflowCreateOrConnectWithoutTicketsInput[]
    upsert?: ticket_workflowUpsertWithWhereUniqueWithoutTicketsInput | ticket_workflowUpsertWithWhereUniqueWithoutTicketsInput[]
    createMany?: ticket_workflowCreateManyTicketsInputEnvelope
    set?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    disconnect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    delete?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    connect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    update?: ticket_workflowUpdateWithWhereUniqueWithoutTicketsInput | ticket_workflowUpdateWithWhereUniqueWithoutTicketsInput[]
    updateMany?: ticket_workflowUpdateManyWithWhereWithoutTicketsInput | ticket_workflowUpdateManyWithWhereWithoutTicketsInput[]
    deleteMany?: ticket_workflowScalarWhereInput | ticket_workflowScalarWhereInput[]
  }

  export type projectsUpdateOneWithoutTicketsNestedInput = {
    create?: XOR<projectsCreateWithoutTicketsInput, projectsUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutTicketsInput
    upsert?: projectsUpsertWithoutTicketsInput
    disconnect?: projectsWhereInput | boolean
    delete?: projectsWhereInput | boolean
    connect?: projectsWhereUniqueInput
    update?: XOR<XOR<projectsUpdateToOneWithWhereWithoutTicketsInput, projectsUpdateWithoutTicketsInput>, projectsUncheckedUpdateWithoutTicketsInput>
  }

  export type usersUpdateOneWithoutTickets_tickets_created_byTousersNestedInput = {
    create?: XOR<usersCreateWithoutTickets_tickets_created_byTousersInput, usersUncheckedCreateWithoutTickets_tickets_created_byTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutTickets_tickets_created_byTousersInput
    upsert?: usersUpsertWithoutTickets_tickets_created_byTousersInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutTickets_tickets_created_byTousersInput, usersUpdateWithoutTickets_tickets_created_byTousersInput>, usersUncheckedUpdateWithoutTickets_tickets_created_byTousersInput>
  }

  export type usersUpdateOneWithoutTickets_tickets_assigned_toTousersNestedInput = {
    create?: XOR<usersCreateWithoutTickets_tickets_assigned_toTousersInput, usersUncheckedCreateWithoutTickets_tickets_assigned_toTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutTickets_tickets_assigned_toTousersInput
    upsert?: usersUpsertWithoutTickets_tickets_assigned_toTousersInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutTickets_tickets_assigned_toTousersInput, usersUpdateWithoutTickets_tickets_assigned_toTousersInput>, usersUncheckedUpdateWithoutTickets_tickets_assigned_toTousersInput>
  }

  export type ticket_commentsUncheckedUpdateManyWithoutTicketsNestedInput = {
    create?: XOR<ticket_commentsCreateWithoutTicketsInput, ticket_commentsUncheckedCreateWithoutTicketsInput> | ticket_commentsCreateWithoutTicketsInput[] | ticket_commentsUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: ticket_commentsCreateOrConnectWithoutTicketsInput | ticket_commentsCreateOrConnectWithoutTicketsInput[]
    upsert?: ticket_commentsUpsertWithWhereUniqueWithoutTicketsInput | ticket_commentsUpsertWithWhereUniqueWithoutTicketsInput[]
    createMany?: ticket_commentsCreateManyTicketsInputEnvelope
    set?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    disconnect?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    delete?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    connect?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    update?: ticket_commentsUpdateWithWhereUniqueWithoutTicketsInput | ticket_commentsUpdateWithWhereUniqueWithoutTicketsInput[]
    updateMany?: ticket_commentsUpdateManyWithWhereWithoutTicketsInput | ticket_commentsUpdateManyWithWhereWithoutTicketsInput[]
    deleteMany?: ticket_commentsScalarWhereInput | ticket_commentsScalarWhereInput[]
  }

  export type ticket_historyUncheckedUpdateManyWithoutTicketsNestedInput = {
    create?: XOR<ticket_historyCreateWithoutTicketsInput, ticket_historyUncheckedCreateWithoutTicketsInput> | ticket_historyCreateWithoutTicketsInput[] | ticket_historyUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: ticket_historyCreateOrConnectWithoutTicketsInput | ticket_historyCreateOrConnectWithoutTicketsInput[]
    upsert?: ticket_historyUpsertWithWhereUniqueWithoutTicketsInput | ticket_historyUpsertWithWhereUniqueWithoutTicketsInput[]
    createMany?: ticket_historyCreateManyTicketsInputEnvelope
    set?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    disconnect?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    delete?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    connect?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    update?: ticket_historyUpdateWithWhereUniqueWithoutTicketsInput | ticket_historyUpdateWithWhereUniqueWithoutTicketsInput[]
    updateMany?: ticket_historyUpdateManyWithWhereWithoutTicketsInput | ticket_historyUpdateManyWithWhereWithoutTicketsInput[]
    deleteMany?: ticket_historyScalarWhereInput | ticket_historyScalarWhereInput[]
  }

  export type ticket_workflowUncheckedUpdateManyWithoutTicketsNestedInput = {
    create?: XOR<ticket_workflowCreateWithoutTicketsInput, ticket_workflowUncheckedCreateWithoutTicketsInput> | ticket_workflowCreateWithoutTicketsInput[] | ticket_workflowUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: ticket_workflowCreateOrConnectWithoutTicketsInput | ticket_workflowCreateOrConnectWithoutTicketsInput[]
    upsert?: ticket_workflowUpsertWithWhereUniqueWithoutTicketsInput | ticket_workflowUpsertWithWhereUniqueWithoutTicketsInput[]
    createMany?: ticket_workflowCreateManyTicketsInputEnvelope
    set?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    disconnect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    delete?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    connect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    update?: ticket_workflowUpdateWithWhereUniqueWithoutTicketsInput | ticket_workflowUpdateWithWhereUniqueWithoutTicketsInput[]
    updateMany?: ticket_workflowUpdateManyWithWhereWithoutTicketsInput | ticket_workflowUpdateManyWithWhereWithoutTicketsInput[]
    deleteMany?: ticket_workflowScalarWhereInput | ticket_workflowScalarWhereInput[]
  }

  export type assetsCreateNestedManyWithoutUsersInput = {
    create?: XOR<assetsCreateWithoutUsersInput, assetsUncheckedCreateWithoutUsersInput> | assetsCreateWithoutUsersInput[] | assetsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: assetsCreateOrConnectWithoutUsersInput | assetsCreateOrConnectWithoutUsersInput[]
    createMany?: assetsCreateManyUsersInputEnvelope
    connect?: assetsWhereUniqueInput | assetsWhereUniqueInput[]
  }

  export type channel_membersCreateNestedManyWithoutUsersInput = {
    create?: XOR<channel_membersCreateWithoutUsersInput, channel_membersUncheckedCreateWithoutUsersInput> | channel_membersCreateWithoutUsersInput[] | channel_membersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: channel_membersCreateOrConnectWithoutUsersInput | channel_membersCreateOrConnectWithoutUsersInput[]
    createMany?: channel_membersCreateManyUsersInputEnvelope
    connect?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
  }

  export type documentsCreateNestedManyWithoutUsersInput = {
    create?: XOR<documentsCreateWithoutUsersInput, documentsUncheckedCreateWithoutUsersInput> | documentsCreateWithoutUsersInput[] | documentsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: documentsCreateOrConnectWithoutUsersInput | documentsCreateOrConnectWithoutUsersInput[]
    createMany?: documentsCreateManyUsersInputEnvelope
    connect?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
  }

  export type hr_recordsCreateNestedManyWithoutUsersInput = {
    create?: XOR<hr_recordsCreateWithoutUsersInput, hr_recordsUncheckedCreateWithoutUsersInput> | hr_recordsCreateWithoutUsersInput[] | hr_recordsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: hr_recordsCreateOrConnectWithoutUsersInput | hr_recordsCreateOrConnectWithoutUsersInput[]
    createMany?: hr_recordsCreateManyUsersInputEnvelope
    connect?: hr_recordsWhereUniqueInput | hr_recordsWhereUniqueInput[]
  }

  export type messagesCreateNestedManyWithoutUsersInput = {
    create?: XOR<messagesCreateWithoutUsersInput, messagesUncheckedCreateWithoutUsersInput> | messagesCreateWithoutUsersInput[] | messagesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: messagesCreateOrConnectWithoutUsersInput | messagesCreateOrConnectWithoutUsersInput[]
    createMany?: messagesCreateManyUsersInputEnvelope
    connect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
  }

  export type permissionsCreateNestedManyWithoutUsersInput = {
    create?: XOR<permissionsCreateWithoutUsersInput, permissionsUncheckedCreateWithoutUsersInput> | permissionsCreateWithoutUsersInput[] | permissionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: permissionsCreateOrConnectWithoutUsersInput | permissionsCreateOrConnectWithoutUsersInput[]
    createMany?: permissionsCreateManyUsersInputEnvelope
    connect?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
  }

  export type reportsCreateNestedManyWithoutUsersInput = {
    create?: XOR<reportsCreateWithoutUsersInput, reportsUncheckedCreateWithoutUsersInput> | reportsCreateWithoutUsersInput[] | reportsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutUsersInput | reportsCreateOrConnectWithoutUsersInput[]
    createMany?: reportsCreateManyUsersInputEnvelope
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
  }

  export type resourcesCreateNestedManyWithoutUsersInput = {
    create?: XOR<resourcesCreateWithoutUsersInput, resourcesUncheckedCreateWithoutUsersInput> | resourcesCreateWithoutUsersInput[] | resourcesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: resourcesCreateOrConnectWithoutUsersInput | resourcesCreateOrConnectWithoutUsersInput[]
    createMany?: resourcesCreateManyUsersInputEnvelope
    connect?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
  }

  export type task_assigneesCreateNestedManyWithoutUsersInput = {
    create?: XOR<task_assigneesCreateWithoutUsersInput, task_assigneesUncheckedCreateWithoutUsersInput> | task_assigneesCreateWithoutUsersInput[] | task_assigneesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: task_assigneesCreateOrConnectWithoutUsersInput | task_assigneesCreateOrConnectWithoutUsersInput[]
    createMany?: task_assigneesCreateManyUsersInputEnvelope
    connect?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
  }

  export type tasksCreateNestedManyWithoutUsersInput = {
    create?: XOR<tasksCreateWithoutUsersInput, tasksUncheckedCreateWithoutUsersInput> | tasksCreateWithoutUsersInput[] | tasksUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutUsersInput | tasksCreateOrConnectWithoutUsersInput[]
    createMany?: tasksCreateManyUsersInputEnvelope
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
  }

  export type team_membersCreateNestedManyWithoutUsersInput = {
    create?: XOR<team_membersCreateWithoutUsersInput, team_membersUncheckedCreateWithoutUsersInput> | team_membersCreateWithoutUsersInput[] | team_membersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: team_membersCreateOrConnectWithoutUsersInput | team_membersCreateOrConnectWithoutUsersInput[]
    createMany?: team_membersCreateManyUsersInputEnvelope
    connect?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
  }

  export type ticket_commentsCreateNestedManyWithoutUsersInput = {
    create?: XOR<ticket_commentsCreateWithoutUsersInput, ticket_commentsUncheckedCreateWithoutUsersInput> | ticket_commentsCreateWithoutUsersInput[] | ticket_commentsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ticket_commentsCreateOrConnectWithoutUsersInput | ticket_commentsCreateOrConnectWithoutUsersInput[]
    createMany?: ticket_commentsCreateManyUsersInputEnvelope
    connect?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
  }

  export type ticket_historyCreateNestedManyWithoutUsersInput = {
    create?: XOR<ticket_historyCreateWithoutUsersInput, ticket_historyUncheckedCreateWithoutUsersInput> | ticket_historyCreateWithoutUsersInput[] | ticket_historyUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ticket_historyCreateOrConnectWithoutUsersInput | ticket_historyCreateOrConnectWithoutUsersInput[]
    createMany?: ticket_historyCreateManyUsersInputEnvelope
    connect?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
  }

  export type ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput = {
    create?: XOR<ticketsCreateWithoutUsers_tickets_created_byTousersInput, ticketsUncheckedCreateWithoutUsers_tickets_created_byTousersInput> | ticketsCreateWithoutUsers_tickets_created_byTousersInput[] | ticketsUncheckedCreateWithoutUsers_tickets_created_byTousersInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutUsers_tickets_created_byTousersInput | ticketsCreateOrConnectWithoutUsers_tickets_created_byTousersInput[]
    createMany?: ticketsCreateManyUsers_tickets_created_byTousersInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput = {
    create?: XOR<ticketsCreateWithoutUsers_tickets_assigned_toTousersInput, ticketsUncheckedCreateWithoutUsers_tickets_assigned_toTousersInput> | ticketsCreateWithoutUsers_tickets_assigned_toTousersInput[] | ticketsUncheckedCreateWithoutUsers_tickets_assigned_toTousersInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutUsers_tickets_assigned_toTousersInput | ticketsCreateOrConnectWithoutUsers_tickets_assigned_toTousersInput[]
    createMany?: ticketsCreateManyUsers_tickets_assigned_toTousersInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type assetsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<assetsCreateWithoutUsersInput, assetsUncheckedCreateWithoutUsersInput> | assetsCreateWithoutUsersInput[] | assetsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: assetsCreateOrConnectWithoutUsersInput | assetsCreateOrConnectWithoutUsersInput[]
    createMany?: assetsCreateManyUsersInputEnvelope
    connect?: assetsWhereUniqueInput | assetsWhereUniqueInput[]
  }

  export type channel_membersUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<channel_membersCreateWithoutUsersInput, channel_membersUncheckedCreateWithoutUsersInput> | channel_membersCreateWithoutUsersInput[] | channel_membersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: channel_membersCreateOrConnectWithoutUsersInput | channel_membersCreateOrConnectWithoutUsersInput[]
    createMany?: channel_membersCreateManyUsersInputEnvelope
    connect?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
  }

  export type documentsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<documentsCreateWithoutUsersInput, documentsUncheckedCreateWithoutUsersInput> | documentsCreateWithoutUsersInput[] | documentsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: documentsCreateOrConnectWithoutUsersInput | documentsCreateOrConnectWithoutUsersInput[]
    createMany?: documentsCreateManyUsersInputEnvelope
    connect?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
  }

  export type hr_recordsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<hr_recordsCreateWithoutUsersInput, hr_recordsUncheckedCreateWithoutUsersInput> | hr_recordsCreateWithoutUsersInput[] | hr_recordsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: hr_recordsCreateOrConnectWithoutUsersInput | hr_recordsCreateOrConnectWithoutUsersInput[]
    createMany?: hr_recordsCreateManyUsersInputEnvelope
    connect?: hr_recordsWhereUniqueInput | hr_recordsWhereUniqueInput[]
  }

  export type messagesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<messagesCreateWithoutUsersInput, messagesUncheckedCreateWithoutUsersInput> | messagesCreateWithoutUsersInput[] | messagesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: messagesCreateOrConnectWithoutUsersInput | messagesCreateOrConnectWithoutUsersInput[]
    createMany?: messagesCreateManyUsersInputEnvelope
    connect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
  }

  export type permissionsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<permissionsCreateWithoutUsersInput, permissionsUncheckedCreateWithoutUsersInput> | permissionsCreateWithoutUsersInput[] | permissionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: permissionsCreateOrConnectWithoutUsersInput | permissionsCreateOrConnectWithoutUsersInput[]
    createMany?: permissionsCreateManyUsersInputEnvelope
    connect?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
  }

  export type reportsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<reportsCreateWithoutUsersInput, reportsUncheckedCreateWithoutUsersInput> | reportsCreateWithoutUsersInput[] | reportsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutUsersInput | reportsCreateOrConnectWithoutUsersInput[]
    createMany?: reportsCreateManyUsersInputEnvelope
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
  }

  export type resourcesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<resourcesCreateWithoutUsersInput, resourcesUncheckedCreateWithoutUsersInput> | resourcesCreateWithoutUsersInput[] | resourcesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: resourcesCreateOrConnectWithoutUsersInput | resourcesCreateOrConnectWithoutUsersInput[]
    createMany?: resourcesCreateManyUsersInputEnvelope
    connect?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
  }

  export type task_assigneesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<task_assigneesCreateWithoutUsersInput, task_assigneesUncheckedCreateWithoutUsersInput> | task_assigneesCreateWithoutUsersInput[] | task_assigneesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: task_assigneesCreateOrConnectWithoutUsersInput | task_assigneesCreateOrConnectWithoutUsersInput[]
    createMany?: task_assigneesCreateManyUsersInputEnvelope
    connect?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
  }

  export type tasksUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<tasksCreateWithoutUsersInput, tasksUncheckedCreateWithoutUsersInput> | tasksCreateWithoutUsersInput[] | tasksUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutUsersInput | tasksCreateOrConnectWithoutUsersInput[]
    createMany?: tasksCreateManyUsersInputEnvelope
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
  }

  export type team_membersUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<team_membersCreateWithoutUsersInput, team_membersUncheckedCreateWithoutUsersInput> | team_membersCreateWithoutUsersInput[] | team_membersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: team_membersCreateOrConnectWithoutUsersInput | team_membersCreateOrConnectWithoutUsersInput[]
    createMany?: team_membersCreateManyUsersInputEnvelope
    connect?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
  }

  export type ticket_commentsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ticket_commentsCreateWithoutUsersInput, ticket_commentsUncheckedCreateWithoutUsersInput> | ticket_commentsCreateWithoutUsersInput[] | ticket_commentsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ticket_commentsCreateOrConnectWithoutUsersInput | ticket_commentsCreateOrConnectWithoutUsersInput[]
    createMany?: ticket_commentsCreateManyUsersInputEnvelope
    connect?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
  }

  export type ticket_historyUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ticket_historyCreateWithoutUsersInput, ticket_historyUncheckedCreateWithoutUsersInput> | ticket_historyCreateWithoutUsersInput[] | ticket_historyUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ticket_historyCreateOrConnectWithoutUsersInput | ticket_historyCreateOrConnectWithoutUsersInput[]
    createMany?: ticket_historyCreateManyUsersInputEnvelope
    connect?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
  }

  export type ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput = {
    create?: XOR<ticketsCreateWithoutUsers_tickets_created_byTousersInput, ticketsUncheckedCreateWithoutUsers_tickets_created_byTousersInput> | ticketsCreateWithoutUsers_tickets_created_byTousersInput[] | ticketsUncheckedCreateWithoutUsers_tickets_created_byTousersInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutUsers_tickets_created_byTousersInput | ticketsCreateOrConnectWithoutUsers_tickets_created_byTousersInput[]
    createMany?: ticketsCreateManyUsers_tickets_created_byTousersInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput = {
    create?: XOR<ticketsCreateWithoutUsers_tickets_assigned_toTousersInput, ticketsUncheckedCreateWithoutUsers_tickets_assigned_toTousersInput> | ticketsCreateWithoutUsers_tickets_assigned_toTousersInput[] | ticketsUncheckedCreateWithoutUsers_tickets_assigned_toTousersInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutUsers_tickets_assigned_toTousersInput | ticketsCreateOrConnectWithoutUsers_tickets_assigned_toTousersInput[]
    createMany?: ticketsCreateManyUsers_tickets_assigned_toTousersInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type NullableEnumusers_roleFieldUpdateOperationsInput = {
    set?: $Enums.users_role | null
  }

  export type assetsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<assetsCreateWithoutUsersInput, assetsUncheckedCreateWithoutUsersInput> | assetsCreateWithoutUsersInput[] | assetsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: assetsCreateOrConnectWithoutUsersInput | assetsCreateOrConnectWithoutUsersInput[]
    upsert?: assetsUpsertWithWhereUniqueWithoutUsersInput | assetsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: assetsCreateManyUsersInputEnvelope
    set?: assetsWhereUniqueInput | assetsWhereUniqueInput[]
    disconnect?: assetsWhereUniqueInput | assetsWhereUniqueInput[]
    delete?: assetsWhereUniqueInput | assetsWhereUniqueInput[]
    connect?: assetsWhereUniqueInput | assetsWhereUniqueInput[]
    update?: assetsUpdateWithWhereUniqueWithoutUsersInput | assetsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: assetsUpdateManyWithWhereWithoutUsersInput | assetsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: assetsScalarWhereInput | assetsScalarWhereInput[]
  }

  export type channel_membersUpdateManyWithoutUsersNestedInput = {
    create?: XOR<channel_membersCreateWithoutUsersInput, channel_membersUncheckedCreateWithoutUsersInput> | channel_membersCreateWithoutUsersInput[] | channel_membersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: channel_membersCreateOrConnectWithoutUsersInput | channel_membersCreateOrConnectWithoutUsersInput[]
    upsert?: channel_membersUpsertWithWhereUniqueWithoutUsersInput | channel_membersUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: channel_membersCreateManyUsersInputEnvelope
    set?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    disconnect?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    delete?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    connect?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    update?: channel_membersUpdateWithWhereUniqueWithoutUsersInput | channel_membersUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: channel_membersUpdateManyWithWhereWithoutUsersInput | channel_membersUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: channel_membersScalarWhereInput | channel_membersScalarWhereInput[]
  }

  export type documentsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<documentsCreateWithoutUsersInput, documentsUncheckedCreateWithoutUsersInput> | documentsCreateWithoutUsersInput[] | documentsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: documentsCreateOrConnectWithoutUsersInput | documentsCreateOrConnectWithoutUsersInput[]
    upsert?: documentsUpsertWithWhereUniqueWithoutUsersInput | documentsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: documentsCreateManyUsersInputEnvelope
    set?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    disconnect?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    delete?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    connect?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    update?: documentsUpdateWithWhereUniqueWithoutUsersInput | documentsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: documentsUpdateManyWithWhereWithoutUsersInput | documentsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: documentsScalarWhereInput | documentsScalarWhereInput[]
  }

  export type hr_recordsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<hr_recordsCreateWithoutUsersInput, hr_recordsUncheckedCreateWithoutUsersInput> | hr_recordsCreateWithoutUsersInput[] | hr_recordsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: hr_recordsCreateOrConnectWithoutUsersInput | hr_recordsCreateOrConnectWithoutUsersInput[]
    upsert?: hr_recordsUpsertWithWhereUniqueWithoutUsersInput | hr_recordsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: hr_recordsCreateManyUsersInputEnvelope
    set?: hr_recordsWhereUniqueInput | hr_recordsWhereUniqueInput[]
    disconnect?: hr_recordsWhereUniqueInput | hr_recordsWhereUniqueInput[]
    delete?: hr_recordsWhereUniqueInput | hr_recordsWhereUniqueInput[]
    connect?: hr_recordsWhereUniqueInput | hr_recordsWhereUniqueInput[]
    update?: hr_recordsUpdateWithWhereUniqueWithoutUsersInput | hr_recordsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: hr_recordsUpdateManyWithWhereWithoutUsersInput | hr_recordsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: hr_recordsScalarWhereInput | hr_recordsScalarWhereInput[]
  }

  export type messagesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<messagesCreateWithoutUsersInput, messagesUncheckedCreateWithoutUsersInput> | messagesCreateWithoutUsersInput[] | messagesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: messagesCreateOrConnectWithoutUsersInput | messagesCreateOrConnectWithoutUsersInput[]
    upsert?: messagesUpsertWithWhereUniqueWithoutUsersInput | messagesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: messagesCreateManyUsersInputEnvelope
    set?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    disconnect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    delete?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    connect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    update?: messagesUpdateWithWhereUniqueWithoutUsersInput | messagesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: messagesUpdateManyWithWhereWithoutUsersInput | messagesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: messagesScalarWhereInput | messagesScalarWhereInput[]
  }

  export type permissionsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<permissionsCreateWithoutUsersInput, permissionsUncheckedCreateWithoutUsersInput> | permissionsCreateWithoutUsersInput[] | permissionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: permissionsCreateOrConnectWithoutUsersInput | permissionsCreateOrConnectWithoutUsersInput[]
    upsert?: permissionsUpsertWithWhereUniqueWithoutUsersInput | permissionsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: permissionsCreateManyUsersInputEnvelope
    set?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    disconnect?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    delete?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    connect?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    update?: permissionsUpdateWithWhereUniqueWithoutUsersInput | permissionsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: permissionsUpdateManyWithWhereWithoutUsersInput | permissionsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: permissionsScalarWhereInput | permissionsScalarWhereInput[]
  }

  export type reportsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<reportsCreateWithoutUsersInput, reportsUncheckedCreateWithoutUsersInput> | reportsCreateWithoutUsersInput[] | reportsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutUsersInput | reportsCreateOrConnectWithoutUsersInput[]
    upsert?: reportsUpsertWithWhereUniqueWithoutUsersInput | reportsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: reportsCreateManyUsersInputEnvelope
    set?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    disconnect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    delete?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    update?: reportsUpdateWithWhereUniqueWithoutUsersInput | reportsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: reportsUpdateManyWithWhereWithoutUsersInput | reportsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: reportsScalarWhereInput | reportsScalarWhereInput[]
  }

  export type resourcesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<resourcesCreateWithoutUsersInput, resourcesUncheckedCreateWithoutUsersInput> | resourcesCreateWithoutUsersInput[] | resourcesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: resourcesCreateOrConnectWithoutUsersInput | resourcesCreateOrConnectWithoutUsersInput[]
    upsert?: resourcesUpsertWithWhereUniqueWithoutUsersInput | resourcesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: resourcesCreateManyUsersInputEnvelope
    set?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    disconnect?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    delete?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    connect?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    update?: resourcesUpdateWithWhereUniqueWithoutUsersInput | resourcesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: resourcesUpdateManyWithWhereWithoutUsersInput | resourcesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: resourcesScalarWhereInput | resourcesScalarWhereInput[]
  }

  export type task_assigneesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<task_assigneesCreateWithoutUsersInput, task_assigneesUncheckedCreateWithoutUsersInput> | task_assigneesCreateWithoutUsersInput[] | task_assigneesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: task_assigneesCreateOrConnectWithoutUsersInput | task_assigneesCreateOrConnectWithoutUsersInput[]
    upsert?: task_assigneesUpsertWithWhereUniqueWithoutUsersInput | task_assigneesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: task_assigneesCreateManyUsersInputEnvelope
    set?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    disconnect?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    delete?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    connect?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    update?: task_assigneesUpdateWithWhereUniqueWithoutUsersInput | task_assigneesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: task_assigneesUpdateManyWithWhereWithoutUsersInput | task_assigneesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: task_assigneesScalarWhereInput | task_assigneesScalarWhereInput[]
  }

  export type tasksUpdateManyWithoutUsersNestedInput = {
    create?: XOR<tasksCreateWithoutUsersInput, tasksUncheckedCreateWithoutUsersInput> | tasksCreateWithoutUsersInput[] | tasksUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutUsersInput | tasksCreateOrConnectWithoutUsersInput[]
    upsert?: tasksUpsertWithWhereUniqueWithoutUsersInput | tasksUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: tasksCreateManyUsersInputEnvelope
    set?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    disconnect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    delete?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    update?: tasksUpdateWithWhereUniqueWithoutUsersInput | tasksUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: tasksUpdateManyWithWhereWithoutUsersInput | tasksUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: tasksScalarWhereInput | tasksScalarWhereInput[]
  }

  export type team_membersUpdateManyWithoutUsersNestedInput = {
    create?: XOR<team_membersCreateWithoutUsersInput, team_membersUncheckedCreateWithoutUsersInput> | team_membersCreateWithoutUsersInput[] | team_membersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: team_membersCreateOrConnectWithoutUsersInput | team_membersCreateOrConnectWithoutUsersInput[]
    upsert?: team_membersUpsertWithWhereUniqueWithoutUsersInput | team_membersUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: team_membersCreateManyUsersInputEnvelope
    set?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    disconnect?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    delete?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    connect?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    update?: team_membersUpdateWithWhereUniqueWithoutUsersInput | team_membersUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: team_membersUpdateManyWithWhereWithoutUsersInput | team_membersUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: team_membersScalarWhereInput | team_membersScalarWhereInput[]
  }

  export type ticket_commentsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ticket_commentsCreateWithoutUsersInput, ticket_commentsUncheckedCreateWithoutUsersInput> | ticket_commentsCreateWithoutUsersInput[] | ticket_commentsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ticket_commentsCreateOrConnectWithoutUsersInput | ticket_commentsCreateOrConnectWithoutUsersInput[]
    upsert?: ticket_commentsUpsertWithWhereUniqueWithoutUsersInput | ticket_commentsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ticket_commentsCreateManyUsersInputEnvelope
    set?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    disconnect?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    delete?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    connect?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    update?: ticket_commentsUpdateWithWhereUniqueWithoutUsersInput | ticket_commentsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ticket_commentsUpdateManyWithWhereWithoutUsersInput | ticket_commentsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ticket_commentsScalarWhereInput | ticket_commentsScalarWhereInput[]
  }

  export type ticket_historyUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ticket_historyCreateWithoutUsersInput, ticket_historyUncheckedCreateWithoutUsersInput> | ticket_historyCreateWithoutUsersInput[] | ticket_historyUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ticket_historyCreateOrConnectWithoutUsersInput | ticket_historyCreateOrConnectWithoutUsersInput[]
    upsert?: ticket_historyUpsertWithWhereUniqueWithoutUsersInput | ticket_historyUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ticket_historyCreateManyUsersInputEnvelope
    set?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    disconnect?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    delete?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    connect?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    update?: ticket_historyUpdateWithWhereUniqueWithoutUsersInput | ticket_historyUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ticket_historyUpdateManyWithWhereWithoutUsersInput | ticket_historyUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ticket_historyScalarWhereInput | ticket_historyScalarWhereInput[]
  }

  export type ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput = {
    create?: XOR<ticketsCreateWithoutUsers_tickets_created_byTousersInput, ticketsUncheckedCreateWithoutUsers_tickets_created_byTousersInput> | ticketsCreateWithoutUsers_tickets_created_byTousersInput[] | ticketsUncheckedCreateWithoutUsers_tickets_created_byTousersInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutUsers_tickets_created_byTousersInput | ticketsCreateOrConnectWithoutUsers_tickets_created_byTousersInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutUsers_tickets_created_byTousersInput | ticketsUpsertWithWhereUniqueWithoutUsers_tickets_created_byTousersInput[]
    createMany?: ticketsCreateManyUsers_tickets_created_byTousersInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutUsers_tickets_created_byTousersInput | ticketsUpdateWithWhereUniqueWithoutUsers_tickets_created_byTousersInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutUsers_tickets_created_byTousersInput | ticketsUpdateManyWithWhereWithoutUsers_tickets_created_byTousersInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput = {
    create?: XOR<ticketsCreateWithoutUsers_tickets_assigned_toTousersInput, ticketsUncheckedCreateWithoutUsers_tickets_assigned_toTousersInput> | ticketsCreateWithoutUsers_tickets_assigned_toTousersInput[] | ticketsUncheckedCreateWithoutUsers_tickets_assigned_toTousersInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutUsers_tickets_assigned_toTousersInput | ticketsCreateOrConnectWithoutUsers_tickets_assigned_toTousersInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutUsers_tickets_assigned_toTousersInput | ticketsUpsertWithWhereUniqueWithoutUsers_tickets_assigned_toTousersInput[]
    createMany?: ticketsCreateManyUsers_tickets_assigned_toTousersInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutUsers_tickets_assigned_toTousersInput | ticketsUpdateWithWhereUniqueWithoutUsers_tickets_assigned_toTousersInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutUsers_tickets_assigned_toTousersInput | ticketsUpdateManyWithWhereWithoutUsers_tickets_assigned_toTousersInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type assetsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<assetsCreateWithoutUsersInput, assetsUncheckedCreateWithoutUsersInput> | assetsCreateWithoutUsersInput[] | assetsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: assetsCreateOrConnectWithoutUsersInput | assetsCreateOrConnectWithoutUsersInput[]
    upsert?: assetsUpsertWithWhereUniqueWithoutUsersInput | assetsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: assetsCreateManyUsersInputEnvelope
    set?: assetsWhereUniqueInput | assetsWhereUniqueInput[]
    disconnect?: assetsWhereUniqueInput | assetsWhereUniqueInput[]
    delete?: assetsWhereUniqueInput | assetsWhereUniqueInput[]
    connect?: assetsWhereUniqueInput | assetsWhereUniqueInput[]
    update?: assetsUpdateWithWhereUniqueWithoutUsersInput | assetsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: assetsUpdateManyWithWhereWithoutUsersInput | assetsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: assetsScalarWhereInput | assetsScalarWhereInput[]
  }

  export type channel_membersUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<channel_membersCreateWithoutUsersInput, channel_membersUncheckedCreateWithoutUsersInput> | channel_membersCreateWithoutUsersInput[] | channel_membersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: channel_membersCreateOrConnectWithoutUsersInput | channel_membersCreateOrConnectWithoutUsersInput[]
    upsert?: channel_membersUpsertWithWhereUniqueWithoutUsersInput | channel_membersUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: channel_membersCreateManyUsersInputEnvelope
    set?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    disconnect?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    delete?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    connect?: channel_membersWhereUniqueInput | channel_membersWhereUniqueInput[]
    update?: channel_membersUpdateWithWhereUniqueWithoutUsersInput | channel_membersUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: channel_membersUpdateManyWithWhereWithoutUsersInput | channel_membersUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: channel_membersScalarWhereInput | channel_membersScalarWhereInput[]
  }

  export type documentsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<documentsCreateWithoutUsersInput, documentsUncheckedCreateWithoutUsersInput> | documentsCreateWithoutUsersInput[] | documentsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: documentsCreateOrConnectWithoutUsersInput | documentsCreateOrConnectWithoutUsersInput[]
    upsert?: documentsUpsertWithWhereUniqueWithoutUsersInput | documentsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: documentsCreateManyUsersInputEnvelope
    set?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    disconnect?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    delete?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    connect?: documentsWhereUniqueInput | documentsWhereUniqueInput[]
    update?: documentsUpdateWithWhereUniqueWithoutUsersInput | documentsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: documentsUpdateManyWithWhereWithoutUsersInput | documentsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: documentsScalarWhereInput | documentsScalarWhereInput[]
  }

  export type hr_recordsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<hr_recordsCreateWithoutUsersInput, hr_recordsUncheckedCreateWithoutUsersInput> | hr_recordsCreateWithoutUsersInput[] | hr_recordsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: hr_recordsCreateOrConnectWithoutUsersInput | hr_recordsCreateOrConnectWithoutUsersInput[]
    upsert?: hr_recordsUpsertWithWhereUniqueWithoutUsersInput | hr_recordsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: hr_recordsCreateManyUsersInputEnvelope
    set?: hr_recordsWhereUniqueInput | hr_recordsWhereUniqueInput[]
    disconnect?: hr_recordsWhereUniqueInput | hr_recordsWhereUniqueInput[]
    delete?: hr_recordsWhereUniqueInput | hr_recordsWhereUniqueInput[]
    connect?: hr_recordsWhereUniqueInput | hr_recordsWhereUniqueInput[]
    update?: hr_recordsUpdateWithWhereUniqueWithoutUsersInput | hr_recordsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: hr_recordsUpdateManyWithWhereWithoutUsersInput | hr_recordsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: hr_recordsScalarWhereInput | hr_recordsScalarWhereInput[]
  }

  export type messagesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<messagesCreateWithoutUsersInput, messagesUncheckedCreateWithoutUsersInput> | messagesCreateWithoutUsersInput[] | messagesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: messagesCreateOrConnectWithoutUsersInput | messagesCreateOrConnectWithoutUsersInput[]
    upsert?: messagesUpsertWithWhereUniqueWithoutUsersInput | messagesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: messagesCreateManyUsersInputEnvelope
    set?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    disconnect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    delete?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    connect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    update?: messagesUpdateWithWhereUniqueWithoutUsersInput | messagesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: messagesUpdateManyWithWhereWithoutUsersInput | messagesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: messagesScalarWhereInput | messagesScalarWhereInput[]
  }

  export type permissionsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<permissionsCreateWithoutUsersInput, permissionsUncheckedCreateWithoutUsersInput> | permissionsCreateWithoutUsersInput[] | permissionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: permissionsCreateOrConnectWithoutUsersInput | permissionsCreateOrConnectWithoutUsersInput[]
    upsert?: permissionsUpsertWithWhereUniqueWithoutUsersInput | permissionsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: permissionsCreateManyUsersInputEnvelope
    set?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    disconnect?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    delete?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    connect?: permissionsWhereUniqueInput | permissionsWhereUniqueInput[]
    update?: permissionsUpdateWithWhereUniqueWithoutUsersInput | permissionsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: permissionsUpdateManyWithWhereWithoutUsersInput | permissionsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: permissionsScalarWhereInput | permissionsScalarWhereInput[]
  }

  export type reportsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<reportsCreateWithoutUsersInput, reportsUncheckedCreateWithoutUsersInput> | reportsCreateWithoutUsersInput[] | reportsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutUsersInput | reportsCreateOrConnectWithoutUsersInput[]
    upsert?: reportsUpsertWithWhereUniqueWithoutUsersInput | reportsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: reportsCreateManyUsersInputEnvelope
    set?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    disconnect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    delete?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    update?: reportsUpdateWithWhereUniqueWithoutUsersInput | reportsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: reportsUpdateManyWithWhereWithoutUsersInput | reportsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: reportsScalarWhereInput | reportsScalarWhereInput[]
  }

  export type resourcesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<resourcesCreateWithoutUsersInput, resourcesUncheckedCreateWithoutUsersInput> | resourcesCreateWithoutUsersInput[] | resourcesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: resourcesCreateOrConnectWithoutUsersInput | resourcesCreateOrConnectWithoutUsersInput[]
    upsert?: resourcesUpsertWithWhereUniqueWithoutUsersInput | resourcesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: resourcesCreateManyUsersInputEnvelope
    set?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    disconnect?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    delete?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    connect?: resourcesWhereUniqueInput | resourcesWhereUniqueInput[]
    update?: resourcesUpdateWithWhereUniqueWithoutUsersInput | resourcesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: resourcesUpdateManyWithWhereWithoutUsersInput | resourcesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: resourcesScalarWhereInput | resourcesScalarWhereInput[]
  }

  export type task_assigneesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<task_assigneesCreateWithoutUsersInput, task_assigneesUncheckedCreateWithoutUsersInput> | task_assigneesCreateWithoutUsersInput[] | task_assigneesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: task_assigneesCreateOrConnectWithoutUsersInput | task_assigneesCreateOrConnectWithoutUsersInput[]
    upsert?: task_assigneesUpsertWithWhereUniqueWithoutUsersInput | task_assigneesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: task_assigneesCreateManyUsersInputEnvelope
    set?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    disconnect?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    delete?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    connect?: task_assigneesWhereUniqueInput | task_assigneesWhereUniqueInput[]
    update?: task_assigneesUpdateWithWhereUniqueWithoutUsersInput | task_assigneesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: task_assigneesUpdateManyWithWhereWithoutUsersInput | task_assigneesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: task_assigneesScalarWhereInput | task_assigneesScalarWhereInput[]
  }

  export type tasksUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<tasksCreateWithoutUsersInput, tasksUncheckedCreateWithoutUsersInput> | tasksCreateWithoutUsersInput[] | tasksUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutUsersInput | tasksCreateOrConnectWithoutUsersInput[]
    upsert?: tasksUpsertWithWhereUniqueWithoutUsersInput | tasksUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: tasksCreateManyUsersInputEnvelope
    set?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    disconnect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    delete?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    update?: tasksUpdateWithWhereUniqueWithoutUsersInput | tasksUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: tasksUpdateManyWithWhereWithoutUsersInput | tasksUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: tasksScalarWhereInput | tasksScalarWhereInput[]
  }

  export type team_membersUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<team_membersCreateWithoutUsersInput, team_membersUncheckedCreateWithoutUsersInput> | team_membersCreateWithoutUsersInput[] | team_membersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: team_membersCreateOrConnectWithoutUsersInput | team_membersCreateOrConnectWithoutUsersInput[]
    upsert?: team_membersUpsertWithWhereUniqueWithoutUsersInput | team_membersUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: team_membersCreateManyUsersInputEnvelope
    set?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    disconnect?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    delete?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    connect?: team_membersWhereUniqueInput | team_membersWhereUniqueInput[]
    update?: team_membersUpdateWithWhereUniqueWithoutUsersInput | team_membersUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: team_membersUpdateManyWithWhereWithoutUsersInput | team_membersUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: team_membersScalarWhereInput | team_membersScalarWhereInput[]
  }

  export type ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ticket_commentsCreateWithoutUsersInput, ticket_commentsUncheckedCreateWithoutUsersInput> | ticket_commentsCreateWithoutUsersInput[] | ticket_commentsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ticket_commentsCreateOrConnectWithoutUsersInput | ticket_commentsCreateOrConnectWithoutUsersInput[]
    upsert?: ticket_commentsUpsertWithWhereUniqueWithoutUsersInput | ticket_commentsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ticket_commentsCreateManyUsersInputEnvelope
    set?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    disconnect?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    delete?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    connect?: ticket_commentsWhereUniqueInput | ticket_commentsWhereUniqueInput[]
    update?: ticket_commentsUpdateWithWhereUniqueWithoutUsersInput | ticket_commentsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ticket_commentsUpdateManyWithWhereWithoutUsersInput | ticket_commentsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ticket_commentsScalarWhereInput | ticket_commentsScalarWhereInput[]
  }

  export type ticket_historyUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ticket_historyCreateWithoutUsersInput, ticket_historyUncheckedCreateWithoutUsersInput> | ticket_historyCreateWithoutUsersInput[] | ticket_historyUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ticket_historyCreateOrConnectWithoutUsersInput | ticket_historyCreateOrConnectWithoutUsersInput[]
    upsert?: ticket_historyUpsertWithWhereUniqueWithoutUsersInput | ticket_historyUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ticket_historyCreateManyUsersInputEnvelope
    set?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    disconnect?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    delete?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    connect?: ticket_historyWhereUniqueInput | ticket_historyWhereUniqueInput[]
    update?: ticket_historyUpdateWithWhereUniqueWithoutUsersInput | ticket_historyUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ticket_historyUpdateManyWithWhereWithoutUsersInput | ticket_historyUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ticket_historyScalarWhereInput | ticket_historyScalarWhereInput[]
  }

  export type ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput = {
    create?: XOR<ticketsCreateWithoutUsers_tickets_created_byTousersInput, ticketsUncheckedCreateWithoutUsers_tickets_created_byTousersInput> | ticketsCreateWithoutUsers_tickets_created_byTousersInput[] | ticketsUncheckedCreateWithoutUsers_tickets_created_byTousersInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutUsers_tickets_created_byTousersInput | ticketsCreateOrConnectWithoutUsers_tickets_created_byTousersInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutUsers_tickets_created_byTousersInput | ticketsUpsertWithWhereUniqueWithoutUsers_tickets_created_byTousersInput[]
    createMany?: ticketsCreateManyUsers_tickets_created_byTousersInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutUsers_tickets_created_byTousersInput | ticketsUpdateWithWhereUniqueWithoutUsers_tickets_created_byTousersInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutUsers_tickets_created_byTousersInput | ticketsUpdateManyWithWhereWithoutUsers_tickets_created_byTousersInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput = {
    create?: XOR<ticketsCreateWithoutUsers_tickets_assigned_toTousersInput, ticketsUncheckedCreateWithoutUsers_tickets_assigned_toTousersInput> | ticketsCreateWithoutUsers_tickets_assigned_toTousersInput[] | ticketsUncheckedCreateWithoutUsers_tickets_assigned_toTousersInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutUsers_tickets_assigned_toTousersInput | ticketsCreateOrConnectWithoutUsers_tickets_assigned_toTousersInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutUsers_tickets_assigned_toTousersInput | ticketsUpsertWithWhereUniqueWithoutUsers_tickets_assigned_toTousersInput[]
    createMany?: ticketsCreateManyUsers_tickets_assigned_toTousersInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutUsers_tickets_assigned_toTousersInput | ticketsUpdateWithWhereUniqueWithoutUsers_tickets_assigned_toTousersInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutUsers_tickets_assigned_toTousersInput | ticketsUpdateManyWithWhereWithoutUsers_tickets_assigned_toTousersInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type ticket_workflowCreateNestedManyWithoutWorkflow_stepsInput = {
    create?: XOR<ticket_workflowCreateWithoutWorkflow_stepsInput, ticket_workflowUncheckedCreateWithoutWorkflow_stepsInput> | ticket_workflowCreateWithoutWorkflow_stepsInput[] | ticket_workflowUncheckedCreateWithoutWorkflow_stepsInput[]
    connectOrCreate?: ticket_workflowCreateOrConnectWithoutWorkflow_stepsInput | ticket_workflowCreateOrConnectWithoutWorkflow_stepsInput[]
    createMany?: ticket_workflowCreateManyWorkflow_stepsInputEnvelope
    connect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
  }

  export type workflowsCreateNestedOneWithoutWorkflow_stepsInput = {
    create?: XOR<workflowsCreateWithoutWorkflow_stepsInput, workflowsUncheckedCreateWithoutWorkflow_stepsInput>
    connectOrCreate?: workflowsCreateOrConnectWithoutWorkflow_stepsInput
    connect?: workflowsWhereUniqueInput
  }

  export type ticket_workflowUncheckedCreateNestedManyWithoutWorkflow_stepsInput = {
    create?: XOR<ticket_workflowCreateWithoutWorkflow_stepsInput, ticket_workflowUncheckedCreateWithoutWorkflow_stepsInput> | ticket_workflowCreateWithoutWorkflow_stepsInput[] | ticket_workflowUncheckedCreateWithoutWorkflow_stepsInput[]
    connectOrCreate?: ticket_workflowCreateOrConnectWithoutWorkflow_stepsInput | ticket_workflowCreateOrConnectWithoutWorkflow_stepsInput[]
    createMany?: ticket_workflowCreateManyWorkflow_stepsInputEnvelope
    connect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
  }

  export type ticket_workflowUpdateManyWithoutWorkflow_stepsNestedInput = {
    create?: XOR<ticket_workflowCreateWithoutWorkflow_stepsInput, ticket_workflowUncheckedCreateWithoutWorkflow_stepsInput> | ticket_workflowCreateWithoutWorkflow_stepsInput[] | ticket_workflowUncheckedCreateWithoutWorkflow_stepsInput[]
    connectOrCreate?: ticket_workflowCreateOrConnectWithoutWorkflow_stepsInput | ticket_workflowCreateOrConnectWithoutWorkflow_stepsInput[]
    upsert?: ticket_workflowUpsertWithWhereUniqueWithoutWorkflow_stepsInput | ticket_workflowUpsertWithWhereUniqueWithoutWorkflow_stepsInput[]
    createMany?: ticket_workflowCreateManyWorkflow_stepsInputEnvelope
    set?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    disconnect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    delete?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    connect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    update?: ticket_workflowUpdateWithWhereUniqueWithoutWorkflow_stepsInput | ticket_workflowUpdateWithWhereUniqueWithoutWorkflow_stepsInput[]
    updateMany?: ticket_workflowUpdateManyWithWhereWithoutWorkflow_stepsInput | ticket_workflowUpdateManyWithWhereWithoutWorkflow_stepsInput[]
    deleteMany?: ticket_workflowScalarWhereInput | ticket_workflowScalarWhereInput[]
  }

  export type workflowsUpdateOneRequiredWithoutWorkflow_stepsNestedInput = {
    create?: XOR<workflowsCreateWithoutWorkflow_stepsInput, workflowsUncheckedCreateWithoutWorkflow_stepsInput>
    connectOrCreate?: workflowsCreateOrConnectWithoutWorkflow_stepsInput
    upsert?: workflowsUpsertWithoutWorkflow_stepsInput
    connect?: workflowsWhereUniqueInput
    update?: XOR<XOR<workflowsUpdateToOneWithWhereWithoutWorkflow_stepsInput, workflowsUpdateWithoutWorkflow_stepsInput>, workflowsUncheckedUpdateWithoutWorkflow_stepsInput>
  }

  export type ticket_workflowUncheckedUpdateManyWithoutWorkflow_stepsNestedInput = {
    create?: XOR<ticket_workflowCreateWithoutWorkflow_stepsInput, ticket_workflowUncheckedCreateWithoutWorkflow_stepsInput> | ticket_workflowCreateWithoutWorkflow_stepsInput[] | ticket_workflowUncheckedCreateWithoutWorkflow_stepsInput[]
    connectOrCreate?: ticket_workflowCreateOrConnectWithoutWorkflow_stepsInput | ticket_workflowCreateOrConnectWithoutWorkflow_stepsInput[]
    upsert?: ticket_workflowUpsertWithWhereUniqueWithoutWorkflow_stepsInput | ticket_workflowUpsertWithWhereUniqueWithoutWorkflow_stepsInput[]
    createMany?: ticket_workflowCreateManyWorkflow_stepsInputEnvelope
    set?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    disconnect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    delete?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    connect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    update?: ticket_workflowUpdateWithWhereUniqueWithoutWorkflow_stepsInput | ticket_workflowUpdateWithWhereUniqueWithoutWorkflow_stepsInput[]
    updateMany?: ticket_workflowUpdateManyWithWhereWithoutWorkflow_stepsInput | ticket_workflowUpdateManyWithWhereWithoutWorkflow_stepsInput[]
    deleteMany?: ticket_workflowScalarWhereInput | ticket_workflowScalarWhereInput[]
  }

  export type ticket_workflowCreateNestedManyWithoutWorkflowsInput = {
    create?: XOR<ticket_workflowCreateWithoutWorkflowsInput, ticket_workflowUncheckedCreateWithoutWorkflowsInput> | ticket_workflowCreateWithoutWorkflowsInput[] | ticket_workflowUncheckedCreateWithoutWorkflowsInput[]
    connectOrCreate?: ticket_workflowCreateOrConnectWithoutWorkflowsInput | ticket_workflowCreateOrConnectWithoutWorkflowsInput[]
    createMany?: ticket_workflowCreateManyWorkflowsInputEnvelope
    connect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
  }

  export type workflow_stepsCreateNestedManyWithoutWorkflowsInput = {
    create?: XOR<workflow_stepsCreateWithoutWorkflowsInput, workflow_stepsUncheckedCreateWithoutWorkflowsInput> | workflow_stepsCreateWithoutWorkflowsInput[] | workflow_stepsUncheckedCreateWithoutWorkflowsInput[]
    connectOrCreate?: workflow_stepsCreateOrConnectWithoutWorkflowsInput | workflow_stepsCreateOrConnectWithoutWorkflowsInput[]
    createMany?: workflow_stepsCreateManyWorkflowsInputEnvelope
    connect?: workflow_stepsWhereUniqueInput | workflow_stepsWhereUniqueInput[]
  }

  export type ticket_workflowUncheckedCreateNestedManyWithoutWorkflowsInput = {
    create?: XOR<ticket_workflowCreateWithoutWorkflowsInput, ticket_workflowUncheckedCreateWithoutWorkflowsInput> | ticket_workflowCreateWithoutWorkflowsInput[] | ticket_workflowUncheckedCreateWithoutWorkflowsInput[]
    connectOrCreate?: ticket_workflowCreateOrConnectWithoutWorkflowsInput | ticket_workflowCreateOrConnectWithoutWorkflowsInput[]
    createMany?: ticket_workflowCreateManyWorkflowsInputEnvelope
    connect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
  }

  export type workflow_stepsUncheckedCreateNestedManyWithoutWorkflowsInput = {
    create?: XOR<workflow_stepsCreateWithoutWorkflowsInput, workflow_stepsUncheckedCreateWithoutWorkflowsInput> | workflow_stepsCreateWithoutWorkflowsInput[] | workflow_stepsUncheckedCreateWithoutWorkflowsInput[]
    connectOrCreate?: workflow_stepsCreateOrConnectWithoutWorkflowsInput | workflow_stepsCreateOrConnectWithoutWorkflowsInput[]
    createMany?: workflow_stepsCreateManyWorkflowsInputEnvelope
    connect?: workflow_stepsWhereUniqueInput | workflow_stepsWhereUniqueInput[]
  }

  export type ticket_workflowUpdateManyWithoutWorkflowsNestedInput = {
    create?: XOR<ticket_workflowCreateWithoutWorkflowsInput, ticket_workflowUncheckedCreateWithoutWorkflowsInput> | ticket_workflowCreateWithoutWorkflowsInput[] | ticket_workflowUncheckedCreateWithoutWorkflowsInput[]
    connectOrCreate?: ticket_workflowCreateOrConnectWithoutWorkflowsInput | ticket_workflowCreateOrConnectWithoutWorkflowsInput[]
    upsert?: ticket_workflowUpsertWithWhereUniqueWithoutWorkflowsInput | ticket_workflowUpsertWithWhereUniqueWithoutWorkflowsInput[]
    createMany?: ticket_workflowCreateManyWorkflowsInputEnvelope
    set?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    disconnect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    delete?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    connect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    update?: ticket_workflowUpdateWithWhereUniqueWithoutWorkflowsInput | ticket_workflowUpdateWithWhereUniqueWithoutWorkflowsInput[]
    updateMany?: ticket_workflowUpdateManyWithWhereWithoutWorkflowsInput | ticket_workflowUpdateManyWithWhereWithoutWorkflowsInput[]
    deleteMany?: ticket_workflowScalarWhereInput | ticket_workflowScalarWhereInput[]
  }

  export type workflow_stepsUpdateManyWithoutWorkflowsNestedInput = {
    create?: XOR<workflow_stepsCreateWithoutWorkflowsInput, workflow_stepsUncheckedCreateWithoutWorkflowsInput> | workflow_stepsCreateWithoutWorkflowsInput[] | workflow_stepsUncheckedCreateWithoutWorkflowsInput[]
    connectOrCreate?: workflow_stepsCreateOrConnectWithoutWorkflowsInput | workflow_stepsCreateOrConnectWithoutWorkflowsInput[]
    upsert?: workflow_stepsUpsertWithWhereUniqueWithoutWorkflowsInput | workflow_stepsUpsertWithWhereUniqueWithoutWorkflowsInput[]
    createMany?: workflow_stepsCreateManyWorkflowsInputEnvelope
    set?: workflow_stepsWhereUniqueInput | workflow_stepsWhereUniqueInput[]
    disconnect?: workflow_stepsWhereUniqueInput | workflow_stepsWhereUniqueInput[]
    delete?: workflow_stepsWhereUniqueInput | workflow_stepsWhereUniqueInput[]
    connect?: workflow_stepsWhereUniqueInput | workflow_stepsWhereUniqueInput[]
    update?: workflow_stepsUpdateWithWhereUniqueWithoutWorkflowsInput | workflow_stepsUpdateWithWhereUniqueWithoutWorkflowsInput[]
    updateMany?: workflow_stepsUpdateManyWithWhereWithoutWorkflowsInput | workflow_stepsUpdateManyWithWhereWithoutWorkflowsInput[]
    deleteMany?: workflow_stepsScalarWhereInput | workflow_stepsScalarWhereInput[]
  }

  export type ticket_workflowUncheckedUpdateManyWithoutWorkflowsNestedInput = {
    create?: XOR<ticket_workflowCreateWithoutWorkflowsInput, ticket_workflowUncheckedCreateWithoutWorkflowsInput> | ticket_workflowCreateWithoutWorkflowsInput[] | ticket_workflowUncheckedCreateWithoutWorkflowsInput[]
    connectOrCreate?: ticket_workflowCreateOrConnectWithoutWorkflowsInput | ticket_workflowCreateOrConnectWithoutWorkflowsInput[]
    upsert?: ticket_workflowUpsertWithWhereUniqueWithoutWorkflowsInput | ticket_workflowUpsertWithWhereUniqueWithoutWorkflowsInput[]
    createMany?: ticket_workflowCreateManyWorkflowsInputEnvelope
    set?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    disconnect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    delete?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    connect?: ticket_workflowWhereUniqueInput | ticket_workflowWhereUniqueInput[]
    update?: ticket_workflowUpdateWithWhereUniqueWithoutWorkflowsInput | ticket_workflowUpdateWithWhereUniqueWithoutWorkflowsInput[]
    updateMany?: ticket_workflowUpdateManyWithWhereWithoutWorkflowsInput | ticket_workflowUpdateManyWithWhereWithoutWorkflowsInput[]
    deleteMany?: ticket_workflowScalarWhereInput | ticket_workflowScalarWhereInput[]
  }

  export type workflow_stepsUncheckedUpdateManyWithoutWorkflowsNestedInput = {
    create?: XOR<workflow_stepsCreateWithoutWorkflowsInput, workflow_stepsUncheckedCreateWithoutWorkflowsInput> | workflow_stepsCreateWithoutWorkflowsInput[] | workflow_stepsUncheckedCreateWithoutWorkflowsInput[]
    connectOrCreate?: workflow_stepsCreateOrConnectWithoutWorkflowsInput | workflow_stepsCreateOrConnectWithoutWorkflowsInput[]
    upsert?: workflow_stepsUpsertWithWhereUniqueWithoutWorkflowsInput | workflow_stepsUpsertWithWhereUniqueWithoutWorkflowsInput[]
    createMany?: workflow_stepsCreateManyWorkflowsInputEnvelope
    set?: workflow_stepsWhereUniqueInput | workflow_stepsWhereUniqueInput[]
    disconnect?: workflow_stepsWhereUniqueInput | workflow_stepsWhereUniqueInput[]
    delete?: workflow_stepsWhereUniqueInput | workflow_stepsWhereUniqueInput[]
    connect?: workflow_stepsWhereUniqueInput | workflow_stepsWhereUniqueInput[]
    update?: workflow_stepsUpdateWithWhereUniqueWithoutWorkflowsInput | workflow_stepsUpdateWithWhereUniqueWithoutWorkflowsInput[]
    updateMany?: workflow_stepsUpdateManyWithWhereWithoutWorkflowsInput | workflow_stepsUpdateManyWithWhereWithoutWorkflowsInput[]
    deleteMany?: workflow_stepsScalarWhereInput | workflow_stepsScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumassets_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.assets_status | Enumassets_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.assets_status[] | null
    notIn?: $Enums.assets_status[] | null
    not?: NestedEnumassets_statusNullableFilter<$PrismaModel> | $Enums.assets_status | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumassets_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.assets_status | Enumassets_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.assets_status[] | null
    notIn?: $Enums.assets_status[] | null
    not?: NestedEnumassets_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.assets_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumassets_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumassets_statusNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumchannels_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.channels_type | Enumchannels_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.channels_type[] | null
    notIn?: $Enums.channels_type[] | null
    not?: NestedEnumchannels_typeNullableFilter<$PrismaModel> | $Enums.channels_type | null
  }

  export type NestedEnumchannels_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.channels_type | Enumchannels_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.channels_type[] | null
    notIn?: $Enums.channels_type[] | null
    not?: NestedEnumchannels_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.channels_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumchannels_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumchannels_typeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumcontracts_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.contracts_status | Enumcontracts_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.contracts_status[] | null
    notIn?: $Enums.contracts_status[] | null
    not?: NestedEnumcontracts_statusNullableFilter<$PrismaModel> | $Enums.contracts_status | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumcontracts_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.contracts_status | Enumcontracts_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.contracts_status[] | null
    notIn?: $Enums.contracts_status[] | null
    not?: NestedEnumcontracts_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.contracts_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumcontracts_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumcontracts_statusNullableFilter<$PrismaModel>
  }

  export type NestedEnumdocuments_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.documents_type | Enumdocuments_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.documents_type[] | null
    notIn?: $Enums.documents_type[] | null
    not?: NestedEnumdocuments_typeNullableFilter<$PrismaModel> | $Enums.documents_type | null
  }

  export type NestedEnumdocuments_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.documents_type | Enumdocuments_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.documents_type[] | null
    notIn?: $Enums.documents_type[] | null
    not?: NestedEnumdocuments_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.documents_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumdocuments_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumdocuments_typeNullableFilter<$PrismaModel>
  }

  export type NestedEnumevents_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.events_type | Enumevents_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.events_type[] | null
    notIn?: $Enums.events_type[] | null
    not?: NestedEnumevents_typeNullableFilter<$PrismaModel> | $Enums.events_type | null
  }

  export type NestedEnumevents_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.events_type | Enumevents_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.events_type[] | null
    notIn?: $Enums.events_type[] | null
    not?: NestedEnumevents_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.events_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumevents_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumevents_typeNullableFilter<$PrismaModel>
  }

  export type NestedEnumhr_records_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.hr_records_type | Enumhr_records_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.hr_records_type[] | null
    notIn?: $Enums.hr_records_type[] | null
    not?: NestedEnumhr_records_typeNullableFilter<$PrismaModel> | $Enums.hr_records_type | null
  }

  export type NestedEnumhr_records_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.hr_records_type | Enumhr_records_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.hr_records_type[] | null
    notIn?: $Enums.hr_records_type[] | null
    not?: NestedEnumhr_records_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.hr_records_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumhr_records_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumhr_records_typeNullableFilter<$PrismaModel>
  }

  export type NestedEnumleads_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.leads_status | Enumleads_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.leads_status[] | null
    notIn?: $Enums.leads_status[] | null
    not?: NestedEnumleads_statusNullableFilter<$PrismaModel> | $Enums.leads_status | null
  }

  export type NestedEnumleads_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.leads_status | Enumleads_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.leads_status[] | null
    notIn?: $Enums.leads_status[] | null
    not?: NestedEnumleads_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.leads_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumleads_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumleads_statusNullableFilter<$PrismaModel>
  }

  export type NestedEnumprojects_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.projects_status | Enumprojects_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.projects_status[] | null
    notIn?: $Enums.projects_status[] | null
    not?: NestedEnumprojects_statusNullableFilter<$PrismaModel> | $Enums.projects_status | null
  }

  export type NestedEnumprojects_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.projects_status | Enumprojects_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.projects_status[] | null
    notIn?: $Enums.projects_status[] | null
    not?: NestedEnumprojects_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.projects_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumprojects_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumprojects_statusNullableFilter<$PrismaModel>
  }

  export type NestedEnumreports_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.reports_type | Enumreports_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.reports_type[] | null
    notIn?: $Enums.reports_type[] | null
    not?: NestedEnumreports_typeNullableFilter<$PrismaModel> | $Enums.reports_type | null
  }

  export type NestedEnumreports_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.reports_type | Enumreports_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.reports_type[] | null
    notIn?: $Enums.reports_type[] | null
    not?: NestedEnumreports_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.reports_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumreports_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumreports_typeNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumresources_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.resources_type | Enumresources_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.resources_type[] | null
    notIn?: $Enums.resources_type[] | null
    not?: NestedEnumresources_typeNullableFilter<$PrismaModel> | $Enums.resources_type | null
  }

  export type NestedEnumresources_availabilityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.resources_availability | Enumresources_availabilityFieldRefInput<$PrismaModel> | null
    in?: $Enums.resources_availability[] | null
    notIn?: $Enums.resources_availability[] | null
    not?: NestedEnumresources_availabilityNullableFilter<$PrismaModel> | $Enums.resources_availability | null
  }

  export type NestedEnumresources_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.resources_type | Enumresources_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.resources_type[] | null
    notIn?: $Enums.resources_type[] | null
    not?: NestedEnumresources_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.resources_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumresources_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumresources_typeNullableFilter<$PrismaModel>
  }

  export type NestedEnumresources_availabilityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.resources_availability | Enumresources_availabilityFieldRefInput<$PrismaModel> | null
    in?: $Enums.resources_availability[] | null
    notIn?: $Enums.resources_availability[] | null
    not?: NestedEnumresources_availabilityNullableWithAggregatesFilter<$PrismaModel> | $Enums.resources_availability | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumresources_availabilityNullableFilter<$PrismaModel>
    _max?: NestedEnumresources_availabilityNullableFilter<$PrismaModel>
  }

  export type NestedEnumsprints_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.sprints_status | Enumsprints_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.sprints_status[] | null
    notIn?: $Enums.sprints_status[] | null
    not?: NestedEnumsprints_statusNullableFilter<$PrismaModel> | $Enums.sprints_status | null
  }

  export type NestedEnumsprints_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.sprints_status | Enumsprints_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.sprints_status[] | null
    notIn?: $Enums.sprints_status[] | null
    not?: NestedEnumsprints_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.sprints_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumsprints_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumsprints_statusNullableFilter<$PrismaModel>
  }

  export type NestedEnumtasks_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.tasks_status | Enumtasks_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.tasks_status[] | null
    notIn?: $Enums.tasks_status[] | null
    not?: NestedEnumtasks_statusNullableFilter<$PrismaModel> | $Enums.tasks_status | null
  }

  export type NestedEnumtasks_priorityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.tasks_priority | Enumtasks_priorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.tasks_priority[] | null
    notIn?: $Enums.tasks_priority[] | null
    not?: NestedEnumtasks_priorityNullableFilter<$PrismaModel> | $Enums.tasks_priority | null
  }

  export type NestedEnumtasks_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.tasks_status | Enumtasks_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.tasks_status[] | null
    notIn?: $Enums.tasks_status[] | null
    not?: NestedEnumtasks_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.tasks_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumtasks_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumtasks_statusNullableFilter<$PrismaModel>
  }

  export type NestedEnumtasks_priorityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.tasks_priority | Enumtasks_priorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.tasks_priority[] | null
    notIn?: $Enums.tasks_priority[] | null
    not?: NestedEnumtasks_priorityNullableWithAggregatesFilter<$PrismaModel> | $Enums.tasks_priority | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumtasks_priorityNullableFilter<$PrismaModel>
    _max?: NestedEnumtasks_priorityNullableFilter<$PrismaModel>
  }

  export type NestedEnumteam_members_roleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.team_members_role | Enumteam_members_roleFieldRefInput<$PrismaModel> | null
    in?: $Enums.team_members_role[] | null
    notIn?: $Enums.team_members_role[] | null
    not?: NestedEnumteam_members_roleNullableFilter<$PrismaModel> | $Enums.team_members_role | null
  }

  export type NestedEnumteam_members_roleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.team_members_role | Enumteam_members_roleFieldRefInput<$PrismaModel> | null
    in?: $Enums.team_members_role[] | null
    notIn?: $Enums.team_members_role[] | null
    not?: NestedEnumteam_members_roleNullableWithAggregatesFilter<$PrismaModel> | $Enums.team_members_role | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumteam_members_roleNullableFilter<$PrismaModel>
    _max?: NestedEnumteam_members_roleNullableFilter<$PrismaModel>
  }

  export type NestedEnumtickets_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.tickets_type | Enumtickets_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.tickets_type[] | null
    notIn?: $Enums.tickets_type[] | null
    not?: NestedEnumtickets_typeNullableFilter<$PrismaModel> | $Enums.tickets_type | null
  }

  export type NestedEnumtickets_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.tickets_status | Enumtickets_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.tickets_status[] | null
    notIn?: $Enums.tickets_status[] | null
    not?: NestedEnumtickets_statusNullableFilter<$PrismaModel> | $Enums.tickets_status | null
  }

  export type NestedEnumtickets_priorityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.tickets_priority | Enumtickets_priorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.tickets_priority[] | null
    notIn?: $Enums.tickets_priority[] | null
    not?: NestedEnumtickets_priorityNullableFilter<$PrismaModel> | $Enums.tickets_priority | null
  }

  export type NestedEnumtickets_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.tickets_type | Enumtickets_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.tickets_type[] | null
    notIn?: $Enums.tickets_type[] | null
    not?: NestedEnumtickets_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.tickets_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumtickets_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumtickets_typeNullableFilter<$PrismaModel>
  }

  export type NestedEnumtickets_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.tickets_status | Enumtickets_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.tickets_status[] | null
    notIn?: $Enums.tickets_status[] | null
    not?: NestedEnumtickets_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.tickets_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumtickets_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumtickets_statusNullableFilter<$PrismaModel>
  }

  export type NestedEnumtickets_priorityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.tickets_priority | Enumtickets_priorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.tickets_priority[] | null
    notIn?: $Enums.tickets_priority[] | null
    not?: NestedEnumtickets_priorityNullableWithAggregatesFilter<$PrismaModel> | $Enums.tickets_priority | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumtickets_priorityNullableFilter<$PrismaModel>
    _max?: NestedEnumtickets_priorityNullableFilter<$PrismaModel>
  }

  export type NestedEnumusers_roleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel> | null
    in?: $Enums.users_role[] | null
    notIn?: $Enums.users_role[] | null
    not?: NestedEnumusers_roleNullableFilter<$PrismaModel> | $Enums.users_role | null
  }

  export type NestedEnumusers_roleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel> | null
    in?: $Enums.users_role[] | null
    notIn?: $Enums.users_role[] | null
    not?: NestedEnumusers_roleNullableWithAggregatesFilter<$PrismaModel> | $Enums.users_role | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumusers_roleNullableFilter<$PrismaModel>
    _max?: NestedEnumusers_roleNullableFilter<$PrismaModel>
  }

  export type usersCreateWithoutAssetsInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    channel_members?: channel_membersCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsCreateNestedManyWithoutUsersInput
    messages?: messagesCreateNestedManyWithoutUsersInput
    permissions?: permissionsCreateNestedManyWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
    resources?: resourcesCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesCreateNestedManyWithoutUsersInput
    tasks?: tasksCreateNestedManyWithoutUsersInput
    team_members?: team_membersCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUncheckedCreateWithoutAssetsInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsUncheckedCreateNestedManyWithoutUsersInput
    messages?: messagesUncheckedCreateNestedManyWithoutUsersInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutUsersInput
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
    resources?: resourcesUncheckedCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutUsersInput
    tasks?: tasksUncheckedCreateNestedManyWithoutUsersInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersCreateOrConnectWithoutAssetsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutAssetsInput, usersUncheckedCreateWithoutAssetsInput>
  }

  export type usersUpsertWithoutAssetsInput = {
    update: XOR<usersUpdateWithoutAssetsInput, usersUncheckedUpdateWithoutAssetsInput>
    create: XOR<usersCreateWithoutAssetsInput, usersUncheckedCreateWithoutAssetsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutAssetsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutAssetsInput, usersUncheckedUpdateWithoutAssetsInput>
  }

  export type usersUpdateWithoutAssetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    channel_members?: channel_membersUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUpdateManyWithoutUsersNestedInput
    messages?: messagesUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUpdateManyWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
    resources?: resourcesUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutUsersNestedInput
    tasks?: tasksUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUncheckedUpdateWithoutAssetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    channel_members?: channel_membersUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUncheckedUpdateManyWithoutUsersNestedInput
    messages?: messagesUncheckedUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutUsersNestedInput
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutUsersNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type projectsCreateWithoutBudgetsInput = {
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    contracts?: contractsCreateNestedManyWithoutProjectsInput
    costs?: costsCreateNestedManyWithoutProjectsInput
    documents?: documentsCreateNestedManyWithoutProjectsInput
    events?: eventsCreateNestedManyWithoutProjectsInput
    leads?: leadsCreateNestedManyWithoutProjectsInput
    permissions?: permissionsCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesCreateNestedManyWithoutProjectsInput
    teams?: teamsCreateNestedOneWithoutProjectsInput
    reports?: reportsCreateNestedManyWithoutProjectsInput
    sprints?: sprintsCreateNestedManyWithoutProjectsInput
    tasks?: tasksCreateNestedManyWithoutProjectsInput
    tickets?: ticketsCreateNestedManyWithoutProjectsInput
  }

  export type projectsUncheckedCreateWithoutBudgetsInput = {
    id?: number
    team_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    contracts?: contractsUncheckedCreateNestedManyWithoutProjectsInput
    costs?: costsUncheckedCreateNestedManyWithoutProjectsInput
    documents?: documentsUncheckedCreateNestedManyWithoutProjectsInput
    events?: eventsUncheckedCreateNestedManyWithoutProjectsInput
    leads?: leadsUncheckedCreateNestedManyWithoutProjectsInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutProjectsInput
    reports?: reportsUncheckedCreateNestedManyWithoutProjectsInput
    sprints?: sprintsUncheckedCreateNestedManyWithoutProjectsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutProjectsInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutBudgetsInput = {
    where: projectsWhereUniqueInput
    create: XOR<projectsCreateWithoutBudgetsInput, projectsUncheckedCreateWithoutBudgetsInput>
  }

  export type projectsUpsertWithoutBudgetsInput = {
    update: XOR<projectsUpdateWithoutBudgetsInput, projectsUncheckedUpdateWithoutBudgetsInput>
    create: XOR<projectsCreateWithoutBudgetsInput, projectsUncheckedCreateWithoutBudgetsInput>
    where?: projectsWhereInput
  }

  export type projectsUpdateToOneWithWhereWithoutBudgetsInput = {
    where?: projectsWhereInput
    data: XOR<projectsUpdateWithoutBudgetsInput, projectsUncheckedUpdateWithoutBudgetsInput>
  }

  export type projectsUpdateWithoutBudgetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: contractsUpdateManyWithoutProjectsNestedInput
    costs?: costsUpdateManyWithoutProjectsNestedInput
    documents?: documentsUpdateManyWithoutProjectsNestedInput
    events?: eventsUpdateManyWithoutProjectsNestedInput
    leads?: leadsUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUpdateManyWithoutProjectsNestedInput
    teams?: teamsUpdateOneWithoutProjectsNestedInput
    reports?: reportsUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateWithoutBudgetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: contractsUncheckedUpdateManyWithoutProjectsNestedInput
    costs?: costsUncheckedUpdateManyWithoutProjectsNestedInput
    documents?: documentsUncheckedUpdateManyWithoutProjectsNestedInput
    events?: eventsUncheckedUpdateManyWithoutProjectsNestedInput
    leads?: leadsUncheckedUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUncheckedUpdateManyWithoutProjectsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUncheckedUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type channelsCreateWithoutChannel_membersInput = {
    name: string
    type?: $Enums.channels_type | null
    teams?: teamsCreateNestedOneWithoutChannelsInput
    messages?: messagesCreateNestedManyWithoutChannelsInput
  }

  export type channelsUncheckedCreateWithoutChannel_membersInput = {
    id?: number
    team_id?: number | null
    name: string
    type?: $Enums.channels_type | null
    messages?: messagesUncheckedCreateNestedManyWithoutChannelsInput
  }

  export type channelsCreateOrConnectWithoutChannel_membersInput = {
    where: channelsWhereUniqueInput
    create: XOR<channelsCreateWithoutChannel_membersInput, channelsUncheckedCreateWithoutChannel_membersInput>
  }

  export type usersCreateWithoutChannel_membersInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsCreateNestedManyWithoutUsersInput
    messages?: messagesCreateNestedManyWithoutUsersInput
    permissions?: permissionsCreateNestedManyWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
    resources?: resourcesCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesCreateNestedManyWithoutUsersInput
    tasks?: tasksCreateNestedManyWithoutUsersInput
    team_members?: team_membersCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUncheckedCreateWithoutChannel_membersInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsUncheckedCreateNestedManyWithoutUsersInput
    messages?: messagesUncheckedCreateNestedManyWithoutUsersInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutUsersInput
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
    resources?: resourcesUncheckedCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutUsersInput
    tasks?: tasksUncheckedCreateNestedManyWithoutUsersInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersCreateOrConnectWithoutChannel_membersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutChannel_membersInput, usersUncheckedCreateWithoutChannel_membersInput>
  }

  export type channelsUpsertWithoutChannel_membersInput = {
    update: XOR<channelsUpdateWithoutChannel_membersInput, channelsUncheckedUpdateWithoutChannel_membersInput>
    create: XOR<channelsCreateWithoutChannel_membersInput, channelsUncheckedCreateWithoutChannel_membersInput>
    where?: channelsWhereInput
  }

  export type channelsUpdateToOneWithWhereWithoutChannel_membersInput = {
    where?: channelsWhereInput
    data: XOR<channelsUpdateWithoutChannel_membersInput, channelsUncheckedUpdateWithoutChannel_membersInput>
  }

  export type channelsUpdateWithoutChannel_membersInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumchannels_typeFieldUpdateOperationsInput | $Enums.channels_type | null
    teams?: teamsUpdateOneWithoutChannelsNestedInput
    messages?: messagesUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateWithoutChannel_membersInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumchannels_typeFieldUpdateOperationsInput | $Enums.channels_type | null
    messages?: messagesUncheckedUpdateManyWithoutChannelsNestedInput
  }

  export type usersUpsertWithoutChannel_membersInput = {
    update: XOR<usersUpdateWithoutChannel_membersInput, usersUncheckedUpdateWithoutChannel_membersInput>
    create: XOR<usersCreateWithoutChannel_membersInput, usersUncheckedCreateWithoutChannel_membersInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutChannel_membersInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutChannel_membersInput, usersUncheckedUpdateWithoutChannel_membersInput>
  }

  export type usersUpdateWithoutChannel_membersInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUpdateManyWithoutUsersNestedInput
    messages?: messagesUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUpdateManyWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
    resources?: resourcesUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutUsersNestedInput
    tasks?: tasksUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUncheckedUpdateWithoutChannel_membersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUncheckedUpdateManyWithoutUsersNestedInput
    messages?: messagesUncheckedUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutUsersNestedInput
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutUsersNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type channel_membersCreateWithoutChannelsInput = {
    users: usersCreateNestedOneWithoutChannel_membersInput
  }

  export type channel_membersUncheckedCreateWithoutChannelsInput = {
    id?: number
    user_id: number
  }

  export type channel_membersCreateOrConnectWithoutChannelsInput = {
    where: channel_membersWhereUniqueInput
    create: XOR<channel_membersCreateWithoutChannelsInput, channel_membersUncheckedCreateWithoutChannelsInput>
  }

  export type channel_membersCreateManyChannelsInputEnvelope = {
    data: channel_membersCreateManyChannelsInput | channel_membersCreateManyChannelsInput[]
    skipDuplicates?: boolean
  }

  export type teamsCreateWithoutChannelsInput = {
    name: string
    logo?: string | null
    plan?: string | null
    created_at?: Date | string | null
    projects?: projectsCreateNestedManyWithoutTeamsInput
    reports?: reportsCreateNestedManyWithoutTeamsInput
    resources?: resourcesCreateNestedManyWithoutTeamsInput
    team_members?: team_membersCreateNestedManyWithoutTeamsInput
  }

  export type teamsUncheckedCreateWithoutChannelsInput = {
    id?: number
    name: string
    logo?: string | null
    plan?: string | null
    created_at?: Date | string | null
    projects?: projectsUncheckedCreateNestedManyWithoutTeamsInput
    reports?: reportsUncheckedCreateNestedManyWithoutTeamsInput
    resources?: resourcesUncheckedCreateNestedManyWithoutTeamsInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type teamsCreateOrConnectWithoutChannelsInput = {
    where: teamsWhereUniqueInput
    create: XOR<teamsCreateWithoutChannelsInput, teamsUncheckedCreateWithoutChannelsInput>
  }

  export type messagesCreateWithoutChannelsInput = {
    content: string
    created_at?: Date | string | null
    users: usersCreateNestedOneWithoutMessagesInput
  }

  export type messagesUncheckedCreateWithoutChannelsInput = {
    id?: number
    user_id: number
    content: string
    created_at?: Date | string | null
  }

  export type messagesCreateOrConnectWithoutChannelsInput = {
    where: messagesWhereUniqueInput
    create: XOR<messagesCreateWithoutChannelsInput, messagesUncheckedCreateWithoutChannelsInput>
  }

  export type messagesCreateManyChannelsInputEnvelope = {
    data: messagesCreateManyChannelsInput | messagesCreateManyChannelsInput[]
    skipDuplicates?: boolean
  }

  export type channel_membersUpsertWithWhereUniqueWithoutChannelsInput = {
    where: channel_membersWhereUniqueInput
    update: XOR<channel_membersUpdateWithoutChannelsInput, channel_membersUncheckedUpdateWithoutChannelsInput>
    create: XOR<channel_membersCreateWithoutChannelsInput, channel_membersUncheckedCreateWithoutChannelsInput>
  }

  export type channel_membersUpdateWithWhereUniqueWithoutChannelsInput = {
    where: channel_membersWhereUniqueInput
    data: XOR<channel_membersUpdateWithoutChannelsInput, channel_membersUncheckedUpdateWithoutChannelsInput>
  }

  export type channel_membersUpdateManyWithWhereWithoutChannelsInput = {
    where: channel_membersScalarWhereInput
    data: XOR<channel_membersUpdateManyMutationInput, channel_membersUncheckedUpdateManyWithoutChannelsInput>
  }

  export type channel_membersScalarWhereInput = {
    AND?: channel_membersScalarWhereInput | channel_membersScalarWhereInput[]
    OR?: channel_membersScalarWhereInput[]
    NOT?: channel_membersScalarWhereInput | channel_membersScalarWhereInput[]
    id?: IntFilter<"channel_members"> | number
    channel_id?: IntFilter<"channel_members"> | number
    user_id?: IntFilter<"channel_members"> | number
  }

  export type teamsUpsertWithoutChannelsInput = {
    update: XOR<teamsUpdateWithoutChannelsInput, teamsUncheckedUpdateWithoutChannelsInput>
    create: XOR<teamsCreateWithoutChannelsInput, teamsUncheckedCreateWithoutChannelsInput>
    where?: teamsWhereInput
  }

  export type teamsUpdateToOneWithWhereWithoutChannelsInput = {
    where?: teamsWhereInput
    data: XOR<teamsUpdateWithoutChannelsInput, teamsUncheckedUpdateWithoutChannelsInput>
  }

  export type teamsUpdateWithoutChannelsInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: projectsUpdateManyWithoutTeamsNestedInput
    reports?: reportsUpdateManyWithoutTeamsNestedInput
    resources?: resourcesUpdateManyWithoutTeamsNestedInput
    team_members?: team_membersUpdateManyWithoutTeamsNestedInput
  }

  export type teamsUncheckedUpdateWithoutChannelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: projectsUncheckedUpdateManyWithoutTeamsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutTeamsNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutTeamsNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type messagesUpsertWithWhereUniqueWithoutChannelsInput = {
    where: messagesWhereUniqueInput
    update: XOR<messagesUpdateWithoutChannelsInput, messagesUncheckedUpdateWithoutChannelsInput>
    create: XOR<messagesCreateWithoutChannelsInput, messagesUncheckedCreateWithoutChannelsInput>
  }

  export type messagesUpdateWithWhereUniqueWithoutChannelsInput = {
    where: messagesWhereUniqueInput
    data: XOR<messagesUpdateWithoutChannelsInput, messagesUncheckedUpdateWithoutChannelsInput>
  }

  export type messagesUpdateManyWithWhereWithoutChannelsInput = {
    where: messagesScalarWhereInput
    data: XOR<messagesUpdateManyMutationInput, messagesUncheckedUpdateManyWithoutChannelsInput>
  }

  export type messagesScalarWhereInput = {
    AND?: messagesScalarWhereInput | messagesScalarWhereInput[]
    OR?: messagesScalarWhereInput[]
    NOT?: messagesScalarWhereInput | messagesScalarWhereInput[]
    id?: IntFilter<"messages"> | number
    channel_id?: IntFilter<"messages"> | number
    user_id?: IntFilter<"messages"> | number
    content?: StringFilter<"messages"> | string
    created_at?: DateTimeNullableFilter<"messages"> | Date | string | null
  }

  export type leadsCreateWithoutClientsInput = {
    status?: $Enums.leads_status | null
    notes?: string | null
    created_at?: Date | string | null
    projects?: projectsCreateNestedOneWithoutLeadsInput
  }

  export type leadsUncheckedCreateWithoutClientsInput = {
    id?: number
    project_id?: number | null
    status?: $Enums.leads_status | null
    notes?: string | null
    created_at?: Date | string | null
  }

  export type leadsCreateOrConnectWithoutClientsInput = {
    where: leadsWhereUniqueInput
    create: XOR<leadsCreateWithoutClientsInput, leadsUncheckedCreateWithoutClientsInput>
  }

  export type leadsCreateManyClientsInputEnvelope = {
    data: leadsCreateManyClientsInput | leadsCreateManyClientsInput[]
    skipDuplicates?: boolean
  }

  export type leadsUpsertWithWhereUniqueWithoutClientsInput = {
    where: leadsWhereUniqueInput
    update: XOR<leadsUpdateWithoutClientsInput, leadsUncheckedUpdateWithoutClientsInput>
    create: XOR<leadsCreateWithoutClientsInput, leadsUncheckedCreateWithoutClientsInput>
  }

  export type leadsUpdateWithWhereUniqueWithoutClientsInput = {
    where: leadsWhereUniqueInput
    data: XOR<leadsUpdateWithoutClientsInput, leadsUncheckedUpdateWithoutClientsInput>
  }

  export type leadsUpdateManyWithWhereWithoutClientsInput = {
    where: leadsScalarWhereInput
    data: XOR<leadsUpdateManyMutationInput, leadsUncheckedUpdateManyWithoutClientsInput>
  }

  export type leadsScalarWhereInput = {
    AND?: leadsScalarWhereInput | leadsScalarWhereInput[]
    OR?: leadsScalarWhereInput[]
    NOT?: leadsScalarWhereInput | leadsScalarWhereInput[]
    id?: IntFilter<"leads"> | number
    client_id?: IntNullableFilter<"leads"> | number | null
    project_id?: IntNullableFilter<"leads"> | number | null
    status?: Enumleads_statusNullableFilter<"leads"> | $Enums.leads_status | null
    notes?: StringNullableFilter<"leads"> | string | null
    created_at?: DateTimeNullableFilter<"leads"> | Date | string | null
  }

  export type suppliersCreateWithoutContractsInput = {
    name: string
    contact_info?: string | null
  }

  export type suppliersUncheckedCreateWithoutContractsInput = {
    id?: number
    name: string
    contact_info?: string | null
  }

  export type suppliersCreateOrConnectWithoutContractsInput = {
    where: suppliersWhereUniqueInput
    create: XOR<suppliersCreateWithoutContractsInput, suppliersUncheckedCreateWithoutContractsInput>
  }

  export type projectsCreateWithoutContractsInput = {
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsCreateNestedManyWithoutProjectsInput
    costs?: costsCreateNestedManyWithoutProjectsInput
    documents?: documentsCreateNestedManyWithoutProjectsInput
    events?: eventsCreateNestedManyWithoutProjectsInput
    leads?: leadsCreateNestedManyWithoutProjectsInput
    permissions?: permissionsCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesCreateNestedManyWithoutProjectsInput
    teams?: teamsCreateNestedOneWithoutProjectsInput
    reports?: reportsCreateNestedManyWithoutProjectsInput
    sprints?: sprintsCreateNestedManyWithoutProjectsInput
    tasks?: tasksCreateNestedManyWithoutProjectsInput
    tickets?: ticketsCreateNestedManyWithoutProjectsInput
  }

  export type projectsUncheckedCreateWithoutContractsInput = {
    id?: number
    team_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsUncheckedCreateNestedManyWithoutProjectsInput
    costs?: costsUncheckedCreateNestedManyWithoutProjectsInput
    documents?: documentsUncheckedCreateNestedManyWithoutProjectsInput
    events?: eventsUncheckedCreateNestedManyWithoutProjectsInput
    leads?: leadsUncheckedCreateNestedManyWithoutProjectsInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutProjectsInput
    reports?: reportsUncheckedCreateNestedManyWithoutProjectsInput
    sprints?: sprintsUncheckedCreateNestedManyWithoutProjectsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutProjectsInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutContractsInput = {
    where: projectsWhereUniqueInput
    create: XOR<projectsCreateWithoutContractsInput, projectsUncheckedCreateWithoutContractsInput>
  }

  export type suppliersUpsertWithoutContractsInput = {
    update: XOR<suppliersUpdateWithoutContractsInput, suppliersUncheckedUpdateWithoutContractsInput>
    create: XOR<suppliersCreateWithoutContractsInput, suppliersUncheckedCreateWithoutContractsInput>
    where?: suppliersWhereInput
  }

  export type suppliersUpdateToOneWithWhereWithoutContractsInput = {
    where?: suppliersWhereInput
    data: XOR<suppliersUpdateWithoutContractsInput, suppliersUncheckedUpdateWithoutContractsInput>
  }

  export type suppliersUpdateWithoutContractsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_info?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type suppliersUncheckedUpdateWithoutContractsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_info?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type projectsUpsertWithoutContractsInput = {
    update: XOR<projectsUpdateWithoutContractsInput, projectsUncheckedUpdateWithoutContractsInput>
    create: XOR<projectsCreateWithoutContractsInput, projectsUncheckedCreateWithoutContractsInput>
    where?: projectsWhereInput
  }

  export type projectsUpdateToOneWithWhereWithoutContractsInput = {
    where?: projectsWhereInput
    data: XOR<projectsUpdateWithoutContractsInput, projectsUncheckedUpdateWithoutContractsInput>
  }

  export type projectsUpdateWithoutContractsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUpdateManyWithoutProjectsNestedInput
    costs?: costsUpdateManyWithoutProjectsNestedInput
    documents?: documentsUpdateManyWithoutProjectsNestedInput
    events?: eventsUpdateManyWithoutProjectsNestedInput
    leads?: leadsUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUpdateManyWithoutProjectsNestedInput
    teams?: teamsUpdateOneWithoutProjectsNestedInput
    reports?: reportsUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateWithoutContractsInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUncheckedUpdateManyWithoutProjectsNestedInput
    costs?: costsUncheckedUpdateManyWithoutProjectsNestedInput
    documents?: documentsUncheckedUpdateManyWithoutProjectsNestedInput
    events?: eventsUncheckedUpdateManyWithoutProjectsNestedInput
    leads?: leadsUncheckedUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUncheckedUpdateManyWithoutProjectsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUncheckedUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type projectsCreateWithoutCostsInput = {
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsCreateNestedManyWithoutProjectsInput
    contracts?: contractsCreateNestedManyWithoutProjectsInput
    documents?: documentsCreateNestedManyWithoutProjectsInput
    events?: eventsCreateNestedManyWithoutProjectsInput
    leads?: leadsCreateNestedManyWithoutProjectsInput
    permissions?: permissionsCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesCreateNestedManyWithoutProjectsInput
    teams?: teamsCreateNestedOneWithoutProjectsInput
    reports?: reportsCreateNestedManyWithoutProjectsInput
    sprints?: sprintsCreateNestedManyWithoutProjectsInput
    tasks?: tasksCreateNestedManyWithoutProjectsInput
    tickets?: ticketsCreateNestedManyWithoutProjectsInput
  }

  export type projectsUncheckedCreateWithoutCostsInput = {
    id?: number
    team_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsUncheckedCreateNestedManyWithoutProjectsInput
    contracts?: contractsUncheckedCreateNestedManyWithoutProjectsInput
    documents?: documentsUncheckedCreateNestedManyWithoutProjectsInput
    events?: eventsUncheckedCreateNestedManyWithoutProjectsInput
    leads?: leadsUncheckedCreateNestedManyWithoutProjectsInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutProjectsInput
    reports?: reportsUncheckedCreateNestedManyWithoutProjectsInput
    sprints?: sprintsUncheckedCreateNestedManyWithoutProjectsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutProjectsInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutCostsInput = {
    where: projectsWhereUniqueInput
    create: XOR<projectsCreateWithoutCostsInput, projectsUncheckedCreateWithoutCostsInput>
  }

  export type projectsUpsertWithoutCostsInput = {
    update: XOR<projectsUpdateWithoutCostsInput, projectsUncheckedUpdateWithoutCostsInput>
    create: XOR<projectsCreateWithoutCostsInput, projectsUncheckedCreateWithoutCostsInput>
    where?: projectsWhereInput
  }

  export type projectsUpdateToOneWithWhereWithoutCostsInput = {
    where?: projectsWhereInput
    data: XOR<projectsUpdateWithoutCostsInput, projectsUncheckedUpdateWithoutCostsInput>
  }

  export type projectsUpdateWithoutCostsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUpdateManyWithoutProjectsNestedInput
    documents?: documentsUpdateManyWithoutProjectsNestedInput
    events?: eventsUpdateManyWithoutProjectsNestedInput
    leads?: leadsUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUpdateManyWithoutProjectsNestedInput
    teams?: teamsUpdateOneWithoutProjectsNestedInput
    reports?: reportsUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateWithoutCostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUncheckedUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUncheckedUpdateManyWithoutProjectsNestedInput
    documents?: documentsUncheckedUpdateManyWithoutProjectsNestedInput
    events?: eventsUncheckedUpdateManyWithoutProjectsNestedInput
    leads?: leadsUncheckedUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUncheckedUpdateManyWithoutProjectsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUncheckedUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type projectsCreateWithoutDocumentsInput = {
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsCreateNestedManyWithoutProjectsInput
    contracts?: contractsCreateNestedManyWithoutProjectsInput
    costs?: costsCreateNestedManyWithoutProjectsInput
    events?: eventsCreateNestedManyWithoutProjectsInput
    leads?: leadsCreateNestedManyWithoutProjectsInput
    permissions?: permissionsCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesCreateNestedManyWithoutProjectsInput
    teams?: teamsCreateNestedOneWithoutProjectsInput
    reports?: reportsCreateNestedManyWithoutProjectsInput
    sprints?: sprintsCreateNestedManyWithoutProjectsInput
    tasks?: tasksCreateNestedManyWithoutProjectsInput
    tickets?: ticketsCreateNestedManyWithoutProjectsInput
  }

  export type projectsUncheckedCreateWithoutDocumentsInput = {
    id?: number
    team_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsUncheckedCreateNestedManyWithoutProjectsInput
    contracts?: contractsUncheckedCreateNestedManyWithoutProjectsInput
    costs?: costsUncheckedCreateNestedManyWithoutProjectsInput
    events?: eventsUncheckedCreateNestedManyWithoutProjectsInput
    leads?: leadsUncheckedCreateNestedManyWithoutProjectsInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutProjectsInput
    reports?: reportsUncheckedCreateNestedManyWithoutProjectsInput
    sprints?: sprintsUncheckedCreateNestedManyWithoutProjectsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutProjectsInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutDocumentsInput = {
    where: projectsWhereUniqueInput
    create: XOR<projectsCreateWithoutDocumentsInput, projectsUncheckedCreateWithoutDocumentsInput>
  }

  export type usersCreateWithoutDocumentsInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsCreateNestedManyWithoutUsersInput
    messages?: messagesCreateNestedManyWithoutUsersInput
    permissions?: permissionsCreateNestedManyWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
    resources?: resourcesCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesCreateNestedManyWithoutUsersInput
    tasks?: tasksCreateNestedManyWithoutUsersInput
    team_members?: team_membersCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUncheckedCreateWithoutDocumentsInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsUncheckedCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsUncheckedCreateNestedManyWithoutUsersInput
    messages?: messagesUncheckedCreateNestedManyWithoutUsersInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutUsersInput
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
    resources?: resourcesUncheckedCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutUsersInput
    tasks?: tasksUncheckedCreateNestedManyWithoutUsersInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersCreateOrConnectWithoutDocumentsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutDocumentsInput, usersUncheckedCreateWithoutDocumentsInput>
  }

  export type projectsUpsertWithoutDocumentsInput = {
    update: XOR<projectsUpdateWithoutDocumentsInput, projectsUncheckedUpdateWithoutDocumentsInput>
    create: XOR<projectsCreateWithoutDocumentsInput, projectsUncheckedCreateWithoutDocumentsInput>
    where?: projectsWhereInput
  }

  export type projectsUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: projectsWhereInput
    data: XOR<projectsUpdateWithoutDocumentsInput, projectsUncheckedUpdateWithoutDocumentsInput>
  }

  export type projectsUpdateWithoutDocumentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUpdateManyWithoutProjectsNestedInput
    costs?: costsUpdateManyWithoutProjectsNestedInput
    events?: eventsUpdateManyWithoutProjectsNestedInput
    leads?: leadsUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUpdateManyWithoutProjectsNestedInput
    teams?: teamsUpdateOneWithoutProjectsNestedInput
    reports?: reportsUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUncheckedUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUncheckedUpdateManyWithoutProjectsNestedInput
    costs?: costsUncheckedUpdateManyWithoutProjectsNestedInput
    events?: eventsUncheckedUpdateManyWithoutProjectsNestedInput
    leads?: leadsUncheckedUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUncheckedUpdateManyWithoutProjectsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUncheckedUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type usersUpsertWithoutDocumentsInput = {
    update: XOR<usersUpdateWithoutDocumentsInput, usersUncheckedUpdateWithoutDocumentsInput>
    create: XOR<usersCreateWithoutDocumentsInput, usersUncheckedCreateWithoutDocumentsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutDocumentsInput, usersUncheckedUpdateWithoutDocumentsInput>
  }

  export type usersUpdateWithoutDocumentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUpdateManyWithoutUsersNestedInput
    messages?: messagesUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUpdateManyWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
    resources?: resourcesUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutUsersNestedInput
    tasks?: tasksUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUncheckedUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUncheckedUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUncheckedUpdateManyWithoutUsersNestedInput
    messages?: messagesUncheckedUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutUsersNestedInput
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutUsersNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type projectsCreateWithoutEventsInput = {
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsCreateNestedManyWithoutProjectsInput
    contracts?: contractsCreateNestedManyWithoutProjectsInput
    costs?: costsCreateNestedManyWithoutProjectsInput
    documents?: documentsCreateNestedManyWithoutProjectsInput
    leads?: leadsCreateNestedManyWithoutProjectsInput
    permissions?: permissionsCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesCreateNestedManyWithoutProjectsInput
    teams?: teamsCreateNestedOneWithoutProjectsInput
    reports?: reportsCreateNestedManyWithoutProjectsInput
    sprints?: sprintsCreateNestedManyWithoutProjectsInput
    tasks?: tasksCreateNestedManyWithoutProjectsInput
    tickets?: ticketsCreateNestedManyWithoutProjectsInput
  }

  export type projectsUncheckedCreateWithoutEventsInput = {
    id?: number
    team_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsUncheckedCreateNestedManyWithoutProjectsInput
    contracts?: contractsUncheckedCreateNestedManyWithoutProjectsInput
    costs?: costsUncheckedCreateNestedManyWithoutProjectsInput
    documents?: documentsUncheckedCreateNestedManyWithoutProjectsInput
    leads?: leadsUncheckedCreateNestedManyWithoutProjectsInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutProjectsInput
    reports?: reportsUncheckedCreateNestedManyWithoutProjectsInput
    sprints?: sprintsUncheckedCreateNestedManyWithoutProjectsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutProjectsInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutEventsInput = {
    where: projectsWhereUniqueInput
    create: XOR<projectsCreateWithoutEventsInput, projectsUncheckedCreateWithoutEventsInput>
  }

  export type projectsUpsertWithoutEventsInput = {
    update: XOR<projectsUpdateWithoutEventsInput, projectsUncheckedUpdateWithoutEventsInput>
    create: XOR<projectsCreateWithoutEventsInput, projectsUncheckedCreateWithoutEventsInput>
    where?: projectsWhereInput
  }

  export type projectsUpdateToOneWithWhereWithoutEventsInput = {
    where?: projectsWhereInput
    data: XOR<projectsUpdateWithoutEventsInput, projectsUncheckedUpdateWithoutEventsInput>
  }

  export type projectsUpdateWithoutEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUpdateManyWithoutProjectsNestedInput
    costs?: costsUpdateManyWithoutProjectsNestedInput
    documents?: documentsUpdateManyWithoutProjectsNestedInput
    leads?: leadsUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUpdateManyWithoutProjectsNestedInput
    teams?: teamsUpdateOneWithoutProjectsNestedInput
    reports?: reportsUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUncheckedUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUncheckedUpdateManyWithoutProjectsNestedInput
    costs?: costsUncheckedUpdateManyWithoutProjectsNestedInput
    documents?: documentsUncheckedUpdateManyWithoutProjectsNestedInput
    leads?: leadsUncheckedUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUncheckedUpdateManyWithoutProjectsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUncheckedUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type usersCreateWithoutHr_recordsInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    messages?: messagesCreateNestedManyWithoutUsersInput
    permissions?: permissionsCreateNestedManyWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
    resources?: resourcesCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesCreateNestedManyWithoutUsersInput
    tasks?: tasksCreateNestedManyWithoutUsersInput
    team_members?: team_membersCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUncheckedCreateWithoutHr_recordsInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsUncheckedCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    messages?: messagesUncheckedCreateNestedManyWithoutUsersInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutUsersInput
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
    resources?: resourcesUncheckedCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutUsersInput
    tasks?: tasksUncheckedCreateNestedManyWithoutUsersInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersCreateOrConnectWithoutHr_recordsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutHr_recordsInput, usersUncheckedCreateWithoutHr_recordsInput>
  }

  export type usersUpsertWithoutHr_recordsInput = {
    update: XOR<usersUpdateWithoutHr_recordsInput, usersUncheckedUpdateWithoutHr_recordsInput>
    create: XOR<usersCreateWithoutHr_recordsInput, usersUncheckedCreateWithoutHr_recordsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutHr_recordsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutHr_recordsInput, usersUncheckedUpdateWithoutHr_recordsInput>
  }

  export type usersUpdateWithoutHr_recordsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    messages?: messagesUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUpdateManyWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
    resources?: resourcesUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutUsersNestedInput
    tasks?: tasksUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUncheckedUpdateWithoutHr_recordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUncheckedUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    messages?: messagesUncheckedUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutUsersNestedInput
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutUsersNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type clientsCreateWithoutLeadsInput = {
    name: string
    email?: string | null
    phone?: string | null
    company?: string | null
    created_at?: Date | string | null
  }

  export type clientsUncheckedCreateWithoutLeadsInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    company?: string | null
    created_at?: Date | string | null
  }

  export type clientsCreateOrConnectWithoutLeadsInput = {
    where: clientsWhereUniqueInput
    create: XOR<clientsCreateWithoutLeadsInput, clientsUncheckedCreateWithoutLeadsInput>
  }

  export type projectsCreateWithoutLeadsInput = {
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsCreateNestedManyWithoutProjectsInput
    contracts?: contractsCreateNestedManyWithoutProjectsInput
    costs?: costsCreateNestedManyWithoutProjectsInput
    documents?: documentsCreateNestedManyWithoutProjectsInput
    events?: eventsCreateNestedManyWithoutProjectsInput
    permissions?: permissionsCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesCreateNestedManyWithoutProjectsInput
    teams?: teamsCreateNestedOneWithoutProjectsInput
    reports?: reportsCreateNestedManyWithoutProjectsInput
    sprints?: sprintsCreateNestedManyWithoutProjectsInput
    tasks?: tasksCreateNestedManyWithoutProjectsInput
    tickets?: ticketsCreateNestedManyWithoutProjectsInput
  }

  export type projectsUncheckedCreateWithoutLeadsInput = {
    id?: number
    team_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsUncheckedCreateNestedManyWithoutProjectsInput
    contracts?: contractsUncheckedCreateNestedManyWithoutProjectsInput
    costs?: costsUncheckedCreateNestedManyWithoutProjectsInput
    documents?: documentsUncheckedCreateNestedManyWithoutProjectsInput
    events?: eventsUncheckedCreateNestedManyWithoutProjectsInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutProjectsInput
    reports?: reportsUncheckedCreateNestedManyWithoutProjectsInput
    sprints?: sprintsUncheckedCreateNestedManyWithoutProjectsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutProjectsInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutLeadsInput = {
    where: projectsWhereUniqueInput
    create: XOR<projectsCreateWithoutLeadsInput, projectsUncheckedCreateWithoutLeadsInput>
  }

  export type clientsUpsertWithoutLeadsInput = {
    update: XOR<clientsUpdateWithoutLeadsInput, clientsUncheckedUpdateWithoutLeadsInput>
    create: XOR<clientsCreateWithoutLeadsInput, clientsUncheckedCreateWithoutLeadsInput>
    where?: clientsWhereInput
  }

  export type clientsUpdateToOneWithWhereWithoutLeadsInput = {
    where?: clientsWhereInput
    data: XOR<clientsUpdateWithoutLeadsInput, clientsUncheckedUpdateWithoutLeadsInput>
  }

  export type clientsUpdateWithoutLeadsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type clientsUncheckedUpdateWithoutLeadsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type projectsUpsertWithoutLeadsInput = {
    update: XOR<projectsUpdateWithoutLeadsInput, projectsUncheckedUpdateWithoutLeadsInput>
    create: XOR<projectsCreateWithoutLeadsInput, projectsUncheckedCreateWithoutLeadsInput>
    where?: projectsWhereInput
  }

  export type projectsUpdateToOneWithWhereWithoutLeadsInput = {
    where?: projectsWhereInput
    data: XOR<projectsUpdateWithoutLeadsInput, projectsUncheckedUpdateWithoutLeadsInput>
  }

  export type projectsUpdateWithoutLeadsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUpdateManyWithoutProjectsNestedInput
    costs?: costsUpdateManyWithoutProjectsNestedInput
    documents?: documentsUpdateManyWithoutProjectsNestedInput
    events?: eventsUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUpdateManyWithoutProjectsNestedInput
    teams?: teamsUpdateOneWithoutProjectsNestedInput
    reports?: reportsUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateWithoutLeadsInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUncheckedUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUncheckedUpdateManyWithoutProjectsNestedInput
    costs?: costsUncheckedUpdateManyWithoutProjectsNestedInput
    documents?: documentsUncheckedUpdateManyWithoutProjectsNestedInput
    events?: eventsUncheckedUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUncheckedUpdateManyWithoutProjectsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUncheckedUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type channelsCreateWithoutMessagesInput = {
    name: string
    type?: $Enums.channels_type | null
    channel_members?: channel_membersCreateNestedManyWithoutChannelsInput
    teams?: teamsCreateNestedOneWithoutChannelsInput
  }

  export type channelsUncheckedCreateWithoutMessagesInput = {
    id?: number
    team_id?: number | null
    name: string
    type?: $Enums.channels_type | null
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutChannelsInput
  }

  export type channelsCreateOrConnectWithoutMessagesInput = {
    where: channelsWhereUniqueInput
    create: XOR<channelsCreateWithoutMessagesInput, channelsUncheckedCreateWithoutMessagesInput>
  }

  export type usersCreateWithoutMessagesInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsCreateNestedManyWithoutUsersInput
    permissions?: permissionsCreateNestedManyWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
    resources?: resourcesCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesCreateNestedManyWithoutUsersInput
    tasks?: tasksCreateNestedManyWithoutUsersInput
    team_members?: team_membersCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUncheckedCreateWithoutMessagesInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsUncheckedCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsUncheckedCreateNestedManyWithoutUsersInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutUsersInput
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
    resources?: resourcesUncheckedCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutUsersInput
    tasks?: tasksUncheckedCreateNestedManyWithoutUsersInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersCreateOrConnectWithoutMessagesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutMessagesInput, usersUncheckedCreateWithoutMessagesInput>
  }

  export type channelsUpsertWithoutMessagesInput = {
    update: XOR<channelsUpdateWithoutMessagesInput, channelsUncheckedUpdateWithoutMessagesInput>
    create: XOR<channelsCreateWithoutMessagesInput, channelsUncheckedCreateWithoutMessagesInput>
    where?: channelsWhereInput
  }

  export type channelsUpdateToOneWithWhereWithoutMessagesInput = {
    where?: channelsWhereInput
    data: XOR<channelsUpdateWithoutMessagesInput, channelsUncheckedUpdateWithoutMessagesInput>
  }

  export type channelsUpdateWithoutMessagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumchannels_typeFieldUpdateOperationsInput | $Enums.channels_type | null
    channel_members?: channel_membersUpdateManyWithoutChannelsNestedInput
    teams?: teamsUpdateOneWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumchannels_typeFieldUpdateOperationsInput | $Enums.channels_type | null
    channel_members?: channel_membersUncheckedUpdateManyWithoutChannelsNestedInput
  }

  export type usersUpsertWithoutMessagesInput = {
    update: XOR<usersUpdateWithoutMessagesInput, usersUncheckedUpdateWithoutMessagesInput>
    create: XOR<usersCreateWithoutMessagesInput, usersUncheckedCreateWithoutMessagesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutMessagesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutMessagesInput, usersUncheckedUpdateWithoutMessagesInput>
  }

  export type usersUpdateWithoutMessagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUpdateManyWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
    resources?: resourcesUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutUsersNestedInput
    tasks?: tasksUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUncheckedUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUncheckedUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutUsersNestedInput
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutUsersNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersCreateWithoutPermissionsInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsCreateNestedManyWithoutUsersInput
    messages?: messagesCreateNestedManyWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
    resources?: resourcesCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesCreateNestedManyWithoutUsersInput
    tasks?: tasksCreateNestedManyWithoutUsersInput
    team_members?: team_membersCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUncheckedCreateWithoutPermissionsInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsUncheckedCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsUncheckedCreateNestedManyWithoutUsersInput
    messages?: messagesUncheckedCreateNestedManyWithoutUsersInput
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
    resources?: resourcesUncheckedCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutUsersInput
    tasks?: tasksUncheckedCreateNestedManyWithoutUsersInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersCreateOrConnectWithoutPermissionsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutPermissionsInput, usersUncheckedCreateWithoutPermissionsInput>
  }

  export type projectsCreateWithoutPermissionsInput = {
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsCreateNestedManyWithoutProjectsInput
    contracts?: contractsCreateNestedManyWithoutProjectsInput
    costs?: costsCreateNestedManyWithoutProjectsInput
    documents?: documentsCreateNestedManyWithoutProjectsInput
    events?: eventsCreateNestedManyWithoutProjectsInput
    leads?: leadsCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesCreateNestedManyWithoutProjectsInput
    teams?: teamsCreateNestedOneWithoutProjectsInput
    reports?: reportsCreateNestedManyWithoutProjectsInput
    sprints?: sprintsCreateNestedManyWithoutProjectsInput
    tasks?: tasksCreateNestedManyWithoutProjectsInput
    tickets?: ticketsCreateNestedManyWithoutProjectsInput
  }

  export type projectsUncheckedCreateWithoutPermissionsInput = {
    id?: number
    team_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsUncheckedCreateNestedManyWithoutProjectsInput
    contracts?: contractsUncheckedCreateNestedManyWithoutProjectsInput
    costs?: costsUncheckedCreateNestedManyWithoutProjectsInput
    documents?: documentsUncheckedCreateNestedManyWithoutProjectsInput
    events?: eventsUncheckedCreateNestedManyWithoutProjectsInput
    leads?: leadsUncheckedCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutProjectsInput
    reports?: reportsUncheckedCreateNestedManyWithoutProjectsInput
    sprints?: sprintsUncheckedCreateNestedManyWithoutProjectsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutProjectsInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutPermissionsInput = {
    where: projectsWhereUniqueInput
    create: XOR<projectsCreateWithoutPermissionsInput, projectsUncheckedCreateWithoutPermissionsInput>
  }

  export type usersUpsertWithoutPermissionsInput = {
    update: XOR<usersUpdateWithoutPermissionsInput, usersUncheckedUpdateWithoutPermissionsInput>
    create: XOR<usersCreateWithoutPermissionsInput, usersUncheckedCreateWithoutPermissionsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutPermissionsInput, usersUncheckedUpdateWithoutPermissionsInput>
  }

  export type usersUpdateWithoutPermissionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUpdateManyWithoutUsersNestedInput
    messages?: messagesUpdateManyWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
    resources?: resourcesUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutUsersNestedInput
    tasks?: tasksUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUncheckedUpdateWithoutPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUncheckedUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUncheckedUpdateManyWithoutUsersNestedInput
    messages?: messagesUncheckedUpdateManyWithoutUsersNestedInput
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutUsersNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type projectsUpsertWithoutPermissionsInput = {
    update: XOR<projectsUpdateWithoutPermissionsInput, projectsUncheckedUpdateWithoutPermissionsInput>
    create: XOR<projectsCreateWithoutPermissionsInput, projectsUncheckedCreateWithoutPermissionsInput>
    where?: projectsWhereInput
  }

  export type projectsUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: projectsWhereInput
    data: XOR<projectsUpdateWithoutPermissionsInput, projectsUncheckedUpdateWithoutPermissionsInput>
  }

  export type projectsUpdateWithoutPermissionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUpdateManyWithoutProjectsNestedInput
    costs?: costsUpdateManyWithoutProjectsNestedInput
    documents?: documentsUpdateManyWithoutProjectsNestedInput
    events?: eventsUpdateManyWithoutProjectsNestedInput
    leads?: leadsUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUpdateManyWithoutProjectsNestedInput
    teams?: teamsUpdateOneWithoutProjectsNestedInput
    reports?: reportsUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateWithoutPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUncheckedUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUncheckedUpdateManyWithoutProjectsNestedInput
    costs?: costsUncheckedUpdateManyWithoutProjectsNestedInput
    documents?: documentsUncheckedUpdateManyWithoutProjectsNestedInput
    events?: eventsUncheckedUpdateManyWithoutProjectsNestedInput
    leads?: leadsUncheckedUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUncheckedUpdateManyWithoutProjectsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUncheckedUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type projectsCreateWithoutProject_resourcesInput = {
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsCreateNestedManyWithoutProjectsInput
    contracts?: contractsCreateNestedManyWithoutProjectsInput
    costs?: costsCreateNestedManyWithoutProjectsInput
    documents?: documentsCreateNestedManyWithoutProjectsInput
    events?: eventsCreateNestedManyWithoutProjectsInput
    leads?: leadsCreateNestedManyWithoutProjectsInput
    permissions?: permissionsCreateNestedManyWithoutProjectsInput
    teams?: teamsCreateNestedOneWithoutProjectsInput
    reports?: reportsCreateNestedManyWithoutProjectsInput
    sprints?: sprintsCreateNestedManyWithoutProjectsInput
    tasks?: tasksCreateNestedManyWithoutProjectsInput
    tickets?: ticketsCreateNestedManyWithoutProjectsInput
  }

  export type projectsUncheckedCreateWithoutProject_resourcesInput = {
    id?: number
    team_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsUncheckedCreateNestedManyWithoutProjectsInput
    contracts?: contractsUncheckedCreateNestedManyWithoutProjectsInput
    costs?: costsUncheckedCreateNestedManyWithoutProjectsInput
    documents?: documentsUncheckedCreateNestedManyWithoutProjectsInput
    events?: eventsUncheckedCreateNestedManyWithoutProjectsInput
    leads?: leadsUncheckedCreateNestedManyWithoutProjectsInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutProjectsInput
    reports?: reportsUncheckedCreateNestedManyWithoutProjectsInput
    sprints?: sprintsUncheckedCreateNestedManyWithoutProjectsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutProjectsInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutProject_resourcesInput = {
    where: projectsWhereUniqueInput
    create: XOR<projectsCreateWithoutProject_resourcesInput, projectsUncheckedCreateWithoutProject_resourcesInput>
  }

  export type resourcesCreateWithoutProject_resourcesInput = {
    name: string
    type?: $Enums.resources_type | null
    availability?: $Enums.resources_availability | null
    users?: usersCreateNestedOneWithoutResourcesInput
    teams?: teamsCreateNestedOneWithoutResourcesInput
  }

  export type resourcesUncheckedCreateWithoutProject_resourcesInput = {
    id?: number
    name: string
    type?: $Enums.resources_type | null
    user_id?: number | null
    team_id?: number | null
    availability?: $Enums.resources_availability | null
  }

  export type resourcesCreateOrConnectWithoutProject_resourcesInput = {
    where: resourcesWhereUniqueInput
    create: XOR<resourcesCreateWithoutProject_resourcesInput, resourcesUncheckedCreateWithoutProject_resourcesInput>
  }

  export type projectsUpsertWithoutProject_resourcesInput = {
    update: XOR<projectsUpdateWithoutProject_resourcesInput, projectsUncheckedUpdateWithoutProject_resourcesInput>
    create: XOR<projectsCreateWithoutProject_resourcesInput, projectsUncheckedCreateWithoutProject_resourcesInput>
    where?: projectsWhereInput
  }

  export type projectsUpdateToOneWithWhereWithoutProject_resourcesInput = {
    where?: projectsWhereInput
    data: XOR<projectsUpdateWithoutProject_resourcesInput, projectsUncheckedUpdateWithoutProject_resourcesInput>
  }

  export type projectsUpdateWithoutProject_resourcesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUpdateManyWithoutProjectsNestedInput
    costs?: costsUpdateManyWithoutProjectsNestedInput
    documents?: documentsUpdateManyWithoutProjectsNestedInput
    events?: eventsUpdateManyWithoutProjectsNestedInput
    leads?: leadsUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUpdateManyWithoutProjectsNestedInput
    teams?: teamsUpdateOneWithoutProjectsNestedInput
    reports?: reportsUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateWithoutProject_resourcesInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUncheckedUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUncheckedUpdateManyWithoutProjectsNestedInput
    costs?: costsUncheckedUpdateManyWithoutProjectsNestedInput
    documents?: documentsUncheckedUpdateManyWithoutProjectsNestedInput
    events?: eventsUncheckedUpdateManyWithoutProjectsNestedInput
    leads?: leadsUncheckedUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutProjectsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUncheckedUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type resourcesUpsertWithoutProject_resourcesInput = {
    update: XOR<resourcesUpdateWithoutProject_resourcesInput, resourcesUncheckedUpdateWithoutProject_resourcesInput>
    create: XOR<resourcesCreateWithoutProject_resourcesInput, resourcesUncheckedCreateWithoutProject_resourcesInput>
    where?: resourcesWhereInput
  }

  export type resourcesUpdateToOneWithWhereWithoutProject_resourcesInput = {
    where?: resourcesWhereInput
    data: XOR<resourcesUpdateWithoutProject_resourcesInput, resourcesUncheckedUpdateWithoutProject_resourcesInput>
  }

  export type resourcesUpdateWithoutProject_resourcesInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumresources_typeFieldUpdateOperationsInput | $Enums.resources_type | null
    availability?: NullableEnumresources_availabilityFieldUpdateOperationsInput | $Enums.resources_availability | null
    users?: usersUpdateOneWithoutResourcesNestedInput
    teams?: teamsUpdateOneWithoutResourcesNestedInput
  }

  export type resourcesUncheckedUpdateWithoutProject_resourcesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumresources_typeFieldUpdateOperationsInput | $Enums.resources_type | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: NullableEnumresources_availabilityFieldUpdateOperationsInput | $Enums.resources_availability | null
  }

  export type budgetsCreateWithoutProjectsInput = {
    amount: Decimal | DecimalJsLike | number | string
    description?: string | null
    created_at?: Date | string | null
  }

  export type budgetsUncheckedCreateWithoutProjectsInput = {
    id?: number
    amount: Decimal | DecimalJsLike | number | string
    description?: string | null
    created_at?: Date | string | null
  }

  export type budgetsCreateOrConnectWithoutProjectsInput = {
    where: budgetsWhereUniqueInput
    create: XOR<budgetsCreateWithoutProjectsInput, budgetsUncheckedCreateWithoutProjectsInput>
  }

  export type budgetsCreateManyProjectsInputEnvelope = {
    data: budgetsCreateManyProjectsInput | budgetsCreateManyProjectsInput[]
    skipDuplicates?: boolean
  }

  export type contractsCreateWithoutProjectsInput = {
    description?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.contracts_status | null
    suppliers?: suppliersCreateNestedOneWithoutContractsInput
  }

  export type contractsUncheckedCreateWithoutProjectsInput = {
    id?: number
    supplier_id?: number | null
    description?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.contracts_status | null
  }

  export type contractsCreateOrConnectWithoutProjectsInput = {
    where: contractsWhereUniqueInput
    create: XOR<contractsCreateWithoutProjectsInput, contractsUncheckedCreateWithoutProjectsInput>
  }

  export type contractsCreateManyProjectsInputEnvelope = {
    data: contractsCreateManyProjectsInput | contractsCreateManyProjectsInput[]
    skipDuplicates?: boolean
  }

  export type costsCreateWithoutProjectsInput = {
    description?: string | null
    amount: Decimal | DecimalJsLike | number | string
    date?: Date | string | null
  }

  export type costsUncheckedCreateWithoutProjectsInput = {
    id?: number
    description?: string | null
    amount: Decimal | DecimalJsLike | number | string
    date?: Date | string | null
  }

  export type costsCreateOrConnectWithoutProjectsInput = {
    where: costsWhereUniqueInput
    create: XOR<costsCreateWithoutProjectsInput, costsUncheckedCreateWithoutProjectsInput>
  }

  export type costsCreateManyProjectsInputEnvelope = {
    data: costsCreateManyProjectsInput | costsCreateManyProjectsInput[]
    skipDuplicates?: boolean
  }

  export type documentsCreateWithoutProjectsInput = {
    name: string
    content?: string | null
    type?: $Enums.documents_type | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    users?: usersCreateNestedOneWithoutDocumentsInput
  }

  export type documentsUncheckedCreateWithoutProjectsInput = {
    id?: number
    name: string
    content?: string | null
    type?: $Enums.documents_type | null
    created_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type documentsCreateOrConnectWithoutProjectsInput = {
    where: documentsWhereUniqueInput
    create: XOR<documentsCreateWithoutProjectsInput, documentsUncheckedCreateWithoutProjectsInput>
  }

  export type documentsCreateManyProjectsInputEnvelope = {
    data: documentsCreateManyProjectsInput | documentsCreateManyProjectsInput[]
    skipDuplicates?: boolean
  }

  export type eventsCreateWithoutProjectsInput = {
    name: string
    description?: string | null
    start_datetime?: Date | string | null
    end_datetime?: Date | string | null
    type?: $Enums.events_type | null
  }

  export type eventsUncheckedCreateWithoutProjectsInput = {
    id?: number
    name: string
    description?: string | null
    start_datetime?: Date | string | null
    end_datetime?: Date | string | null
    type?: $Enums.events_type | null
  }

  export type eventsCreateOrConnectWithoutProjectsInput = {
    where: eventsWhereUniqueInput
    create: XOR<eventsCreateWithoutProjectsInput, eventsUncheckedCreateWithoutProjectsInput>
  }

  export type eventsCreateManyProjectsInputEnvelope = {
    data: eventsCreateManyProjectsInput | eventsCreateManyProjectsInput[]
    skipDuplicates?: boolean
  }

  export type leadsCreateWithoutProjectsInput = {
    status?: $Enums.leads_status | null
    notes?: string | null
    created_at?: Date | string | null
    clients?: clientsCreateNestedOneWithoutLeadsInput
  }

  export type leadsUncheckedCreateWithoutProjectsInput = {
    id?: number
    client_id?: number | null
    status?: $Enums.leads_status | null
    notes?: string | null
    created_at?: Date | string | null
  }

  export type leadsCreateOrConnectWithoutProjectsInput = {
    where: leadsWhereUniqueInput
    create: XOR<leadsCreateWithoutProjectsInput, leadsUncheckedCreateWithoutProjectsInput>
  }

  export type leadsCreateManyProjectsInputEnvelope = {
    data: leadsCreateManyProjectsInput | leadsCreateManyProjectsInput[]
    skipDuplicates?: boolean
  }

  export type permissionsCreateWithoutProjectsInput = {
    permission: string
    users: usersCreateNestedOneWithoutPermissionsInput
  }

  export type permissionsUncheckedCreateWithoutProjectsInput = {
    id?: number
    user_id: number
    permission: string
  }

  export type permissionsCreateOrConnectWithoutProjectsInput = {
    where: permissionsWhereUniqueInput
    create: XOR<permissionsCreateWithoutProjectsInput, permissionsUncheckedCreateWithoutProjectsInput>
  }

  export type permissionsCreateManyProjectsInputEnvelope = {
    data: permissionsCreateManyProjectsInput | permissionsCreateManyProjectsInput[]
    skipDuplicates?: boolean
  }

  export type project_resourcesCreateWithoutProjectsInput = {
    assigned_from?: Date | string | null
    assigned_to?: Date | string | null
    resources: resourcesCreateNestedOneWithoutProject_resourcesInput
  }

  export type project_resourcesUncheckedCreateWithoutProjectsInput = {
    id?: number
    resource_id: number
    assigned_from?: Date | string | null
    assigned_to?: Date | string | null
  }

  export type project_resourcesCreateOrConnectWithoutProjectsInput = {
    where: project_resourcesWhereUniqueInput
    create: XOR<project_resourcesCreateWithoutProjectsInput, project_resourcesUncheckedCreateWithoutProjectsInput>
  }

  export type project_resourcesCreateManyProjectsInputEnvelope = {
    data: project_resourcesCreateManyProjectsInput | project_resourcesCreateManyProjectsInput[]
    skipDuplicates?: boolean
  }

  export type teamsCreateWithoutProjectsInput = {
    name: string
    logo?: string | null
    plan?: string | null
    created_at?: Date | string | null
    channels?: channelsCreateNestedManyWithoutTeamsInput
    reports?: reportsCreateNestedManyWithoutTeamsInput
    resources?: resourcesCreateNestedManyWithoutTeamsInput
    team_members?: team_membersCreateNestedManyWithoutTeamsInput
  }

  export type teamsUncheckedCreateWithoutProjectsInput = {
    id?: number
    name: string
    logo?: string | null
    plan?: string | null
    created_at?: Date | string | null
    channels?: channelsUncheckedCreateNestedManyWithoutTeamsInput
    reports?: reportsUncheckedCreateNestedManyWithoutTeamsInput
    resources?: resourcesUncheckedCreateNestedManyWithoutTeamsInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type teamsCreateOrConnectWithoutProjectsInput = {
    where: teamsWhereUniqueInput
    create: XOR<teamsCreateWithoutProjectsInput, teamsUncheckedCreateWithoutProjectsInput>
  }

  export type reportsCreateWithoutProjectsInput = {
    type?: $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
    teams?: teamsCreateNestedOneWithoutReportsInput
    users?: usersCreateNestedOneWithoutReportsInput
  }

  export type reportsUncheckedCreateWithoutProjectsInput = {
    id?: number
    team_id?: number | null
    user_id?: number | null
    type?: $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
  }

  export type reportsCreateOrConnectWithoutProjectsInput = {
    where: reportsWhereUniqueInput
    create: XOR<reportsCreateWithoutProjectsInput, reportsUncheckedCreateWithoutProjectsInput>
  }

  export type reportsCreateManyProjectsInputEnvelope = {
    data: reportsCreateManyProjectsInput | reportsCreateManyProjectsInput[]
    skipDuplicates?: boolean
  }

  export type sprintsCreateWithoutProjectsInput = {
    name: string
    start_date?: Date | string | null
    end_date?: Date | string | null
    goal?: string | null
    status?: $Enums.sprints_status | null
    sprint_tasks?: sprint_tasksCreateNestedManyWithoutSprintsInput
  }

  export type sprintsUncheckedCreateWithoutProjectsInput = {
    id?: number
    name: string
    start_date?: Date | string | null
    end_date?: Date | string | null
    goal?: string | null
    status?: $Enums.sprints_status | null
    sprint_tasks?: sprint_tasksUncheckedCreateNestedManyWithoutSprintsInput
  }

  export type sprintsCreateOrConnectWithoutProjectsInput = {
    where: sprintsWhereUniqueInput
    create: XOR<sprintsCreateWithoutProjectsInput, sprintsUncheckedCreateWithoutProjectsInput>
  }

  export type sprintsCreateManyProjectsInputEnvelope = {
    data: sprintsCreateManyProjectsInput | sprintsCreateManyProjectsInput[]
    skipDuplicates?: boolean
  }

  export type tasksCreateWithoutProjectsInput = {
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sprint_tasks?: sprint_tasksCreateNestedManyWithoutTasksInput
    task_assignees?: task_assigneesCreateNestedManyWithoutTasksInput
    task_label_links?: task_label_linksCreateNestedManyWithoutTasksInput
    tasks?: tasksCreateNestedOneWithoutOther_tasksInput
    other_tasks?: tasksCreateNestedManyWithoutTasksInput
    users?: usersCreateNestedOneWithoutTasksInput
  }

  export type tasksUncheckedCreateWithoutProjectsInput = {
    id?: number
    parent_task_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sprint_tasks?: sprint_tasksUncheckedCreateNestedManyWithoutTasksInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutTasksInput
    task_label_links?: task_label_linksUncheckedCreateNestedManyWithoutTasksInput
    other_tasks?: tasksUncheckedCreateNestedManyWithoutTasksInput
  }

  export type tasksCreateOrConnectWithoutProjectsInput = {
    where: tasksWhereUniqueInput
    create: XOR<tasksCreateWithoutProjectsInput, tasksUncheckedCreateWithoutProjectsInput>
  }

  export type tasksCreateManyProjectsInputEnvelope = {
    data: tasksCreateManyProjectsInput | tasksCreateManyProjectsInput[]
    skipDuplicates?: boolean
  }

  export type ticketsCreateWithoutProjectsInput = {
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    ticket_comments?: ticket_commentsCreateNestedManyWithoutTicketsInput
    ticket_history?: ticket_historyCreateNestedManyWithoutTicketsInput
    ticket_workflow?: ticket_workflowCreateNestedManyWithoutTicketsInput
    users_tickets_created_byTousers?: usersCreateNestedOneWithoutTickets_tickets_created_byTousersInput
    users_tickets_assigned_toTousers?: usersCreateNestedOneWithoutTickets_tickets_assigned_toTousersInput
  }

  export type ticketsUncheckedCreateWithoutProjectsInput = {
    id?: number
    created_by?: number | null
    assigned_to?: number | null
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutTicketsInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutTicketsInput
    ticket_workflow?: ticket_workflowUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type ticketsCreateOrConnectWithoutProjectsInput = {
    where: ticketsWhereUniqueInput
    create: XOR<ticketsCreateWithoutProjectsInput, ticketsUncheckedCreateWithoutProjectsInput>
  }

  export type ticketsCreateManyProjectsInputEnvelope = {
    data: ticketsCreateManyProjectsInput | ticketsCreateManyProjectsInput[]
    skipDuplicates?: boolean
  }

  export type budgetsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: budgetsWhereUniqueInput
    update: XOR<budgetsUpdateWithoutProjectsInput, budgetsUncheckedUpdateWithoutProjectsInput>
    create: XOR<budgetsCreateWithoutProjectsInput, budgetsUncheckedCreateWithoutProjectsInput>
  }

  export type budgetsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: budgetsWhereUniqueInput
    data: XOR<budgetsUpdateWithoutProjectsInput, budgetsUncheckedUpdateWithoutProjectsInput>
  }

  export type budgetsUpdateManyWithWhereWithoutProjectsInput = {
    where: budgetsScalarWhereInput
    data: XOR<budgetsUpdateManyMutationInput, budgetsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type budgetsScalarWhereInput = {
    AND?: budgetsScalarWhereInput | budgetsScalarWhereInput[]
    OR?: budgetsScalarWhereInput[]
    NOT?: budgetsScalarWhereInput | budgetsScalarWhereInput[]
    id?: IntFilter<"budgets"> | number
    project_id?: IntFilter<"budgets"> | number
    amount?: DecimalFilter<"budgets"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableFilter<"budgets"> | string | null
    created_at?: DateTimeNullableFilter<"budgets"> | Date | string | null
  }

  export type contractsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: contractsWhereUniqueInput
    update: XOR<contractsUpdateWithoutProjectsInput, contractsUncheckedUpdateWithoutProjectsInput>
    create: XOR<contractsCreateWithoutProjectsInput, contractsUncheckedCreateWithoutProjectsInput>
  }

  export type contractsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: contractsWhereUniqueInput
    data: XOR<contractsUpdateWithoutProjectsInput, contractsUncheckedUpdateWithoutProjectsInput>
  }

  export type contractsUpdateManyWithWhereWithoutProjectsInput = {
    where: contractsScalarWhereInput
    data: XOR<contractsUpdateManyMutationInput, contractsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type contractsScalarWhereInput = {
    AND?: contractsScalarWhereInput | contractsScalarWhereInput[]
    OR?: contractsScalarWhereInput[]
    NOT?: contractsScalarWhereInput | contractsScalarWhereInput[]
    id?: IntFilter<"contracts"> | number
    supplier_id?: IntNullableFilter<"contracts"> | number | null
    project_id?: IntNullableFilter<"contracts"> | number | null
    description?: StringNullableFilter<"contracts"> | string | null
    start_date?: DateTimeNullableFilter<"contracts"> | Date | string | null
    end_date?: DateTimeNullableFilter<"contracts"> | Date | string | null
    amount?: DecimalNullableFilter<"contracts"> | Decimal | DecimalJsLike | number | string | null
    status?: Enumcontracts_statusNullableFilter<"contracts"> | $Enums.contracts_status | null
  }

  export type costsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: costsWhereUniqueInput
    update: XOR<costsUpdateWithoutProjectsInput, costsUncheckedUpdateWithoutProjectsInput>
    create: XOR<costsCreateWithoutProjectsInput, costsUncheckedCreateWithoutProjectsInput>
  }

  export type costsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: costsWhereUniqueInput
    data: XOR<costsUpdateWithoutProjectsInput, costsUncheckedUpdateWithoutProjectsInput>
  }

  export type costsUpdateManyWithWhereWithoutProjectsInput = {
    where: costsScalarWhereInput
    data: XOR<costsUpdateManyMutationInput, costsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type costsScalarWhereInput = {
    AND?: costsScalarWhereInput | costsScalarWhereInput[]
    OR?: costsScalarWhereInput[]
    NOT?: costsScalarWhereInput | costsScalarWhereInput[]
    id?: IntFilter<"costs"> | number
    project_id?: IntFilter<"costs"> | number
    description?: StringNullableFilter<"costs"> | string | null
    amount?: DecimalFilter<"costs"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeNullableFilter<"costs"> | Date | string | null
  }

  export type documentsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: documentsWhereUniqueInput
    update: XOR<documentsUpdateWithoutProjectsInput, documentsUncheckedUpdateWithoutProjectsInput>
    create: XOR<documentsCreateWithoutProjectsInput, documentsUncheckedCreateWithoutProjectsInput>
  }

  export type documentsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: documentsWhereUniqueInput
    data: XOR<documentsUpdateWithoutProjectsInput, documentsUncheckedUpdateWithoutProjectsInput>
  }

  export type documentsUpdateManyWithWhereWithoutProjectsInput = {
    where: documentsScalarWhereInput
    data: XOR<documentsUpdateManyMutationInput, documentsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type documentsScalarWhereInput = {
    AND?: documentsScalarWhereInput | documentsScalarWhereInput[]
    OR?: documentsScalarWhereInput[]
    NOT?: documentsScalarWhereInput | documentsScalarWhereInput[]
    id?: IntFilter<"documents"> | number
    project_id?: IntNullableFilter<"documents"> | number | null
    name?: StringFilter<"documents"> | string
    content?: StringNullableFilter<"documents"> | string | null
    type?: Enumdocuments_typeNullableFilter<"documents"> | $Enums.documents_type | null
    created_by?: IntNullableFilter<"documents"> | number | null
    created_at?: DateTimeNullableFilter<"documents"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"documents"> | Date | string | null
  }

  export type eventsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: eventsWhereUniqueInput
    update: XOR<eventsUpdateWithoutProjectsInput, eventsUncheckedUpdateWithoutProjectsInput>
    create: XOR<eventsCreateWithoutProjectsInput, eventsUncheckedCreateWithoutProjectsInput>
  }

  export type eventsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: eventsWhereUniqueInput
    data: XOR<eventsUpdateWithoutProjectsInput, eventsUncheckedUpdateWithoutProjectsInput>
  }

  export type eventsUpdateManyWithWhereWithoutProjectsInput = {
    where: eventsScalarWhereInput
    data: XOR<eventsUpdateManyMutationInput, eventsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type eventsScalarWhereInput = {
    AND?: eventsScalarWhereInput | eventsScalarWhereInput[]
    OR?: eventsScalarWhereInput[]
    NOT?: eventsScalarWhereInput | eventsScalarWhereInput[]
    id?: IntFilter<"events"> | number
    project_id?: IntNullableFilter<"events"> | number | null
    name?: StringFilter<"events"> | string
    description?: StringNullableFilter<"events"> | string | null
    start_datetime?: DateTimeNullableFilter<"events"> | Date | string | null
    end_datetime?: DateTimeNullableFilter<"events"> | Date | string | null
    type?: Enumevents_typeNullableFilter<"events"> | $Enums.events_type | null
  }

  export type leadsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: leadsWhereUniqueInput
    update: XOR<leadsUpdateWithoutProjectsInput, leadsUncheckedUpdateWithoutProjectsInput>
    create: XOR<leadsCreateWithoutProjectsInput, leadsUncheckedCreateWithoutProjectsInput>
  }

  export type leadsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: leadsWhereUniqueInput
    data: XOR<leadsUpdateWithoutProjectsInput, leadsUncheckedUpdateWithoutProjectsInput>
  }

  export type leadsUpdateManyWithWhereWithoutProjectsInput = {
    where: leadsScalarWhereInput
    data: XOR<leadsUpdateManyMutationInput, leadsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type permissionsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: permissionsWhereUniqueInput
    update: XOR<permissionsUpdateWithoutProjectsInput, permissionsUncheckedUpdateWithoutProjectsInput>
    create: XOR<permissionsCreateWithoutProjectsInput, permissionsUncheckedCreateWithoutProjectsInput>
  }

  export type permissionsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: permissionsWhereUniqueInput
    data: XOR<permissionsUpdateWithoutProjectsInput, permissionsUncheckedUpdateWithoutProjectsInput>
  }

  export type permissionsUpdateManyWithWhereWithoutProjectsInput = {
    where: permissionsScalarWhereInput
    data: XOR<permissionsUpdateManyMutationInput, permissionsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type permissionsScalarWhereInput = {
    AND?: permissionsScalarWhereInput | permissionsScalarWhereInput[]
    OR?: permissionsScalarWhereInput[]
    NOT?: permissionsScalarWhereInput | permissionsScalarWhereInput[]
    id?: IntFilter<"permissions"> | number
    user_id?: IntFilter<"permissions"> | number
    project_id?: IntNullableFilter<"permissions"> | number | null
    permission?: StringFilter<"permissions"> | string
  }

  export type project_resourcesUpsertWithWhereUniqueWithoutProjectsInput = {
    where: project_resourcesWhereUniqueInput
    update: XOR<project_resourcesUpdateWithoutProjectsInput, project_resourcesUncheckedUpdateWithoutProjectsInput>
    create: XOR<project_resourcesCreateWithoutProjectsInput, project_resourcesUncheckedCreateWithoutProjectsInput>
  }

  export type project_resourcesUpdateWithWhereUniqueWithoutProjectsInput = {
    where: project_resourcesWhereUniqueInput
    data: XOR<project_resourcesUpdateWithoutProjectsInput, project_resourcesUncheckedUpdateWithoutProjectsInput>
  }

  export type project_resourcesUpdateManyWithWhereWithoutProjectsInput = {
    where: project_resourcesScalarWhereInput
    data: XOR<project_resourcesUpdateManyMutationInput, project_resourcesUncheckedUpdateManyWithoutProjectsInput>
  }

  export type project_resourcesScalarWhereInput = {
    AND?: project_resourcesScalarWhereInput | project_resourcesScalarWhereInput[]
    OR?: project_resourcesScalarWhereInput[]
    NOT?: project_resourcesScalarWhereInput | project_resourcesScalarWhereInput[]
    id?: IntFilter<"project_resources"> | number
    project_id?: IntFilter<"project_resources"> | number
    resource_id?: IntFilter<"project_resources"> | number
    assigned_from?: DateTimeNullableFilter<"project_resources"> | Date | string | null
    assigned_to?: DateTimeNullableFilter<"project_resources"> | Date | string | null
  }

  export type teamsUpsertWithoutProjectsInput = {
    update: XOR<teamsUpdateWithoutProjectsInput, teamsUncheckedUpdateWithoutProjectsInput>
    create: XOR<teamsCreateWithoutProjectsInput, teamsUncheckedCreateWithoutProjectsInput>
    where?: teamsWhereInput
  }

  export type teamsUpdateToOneWithWhereWithoutProjectsInput = {
    where?: teamsWhereInput
    data: XOR<teamsUpdateWithoutProjectsInput, teamsUncheckedUpdateWithoutProjectsInput>
  }

  export type teamsUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channels?: channelsUpdateManyWithoutTeamsNestedInput
    reports?: reportsUpdateManyWithoutTeamsNestedInput
    resources?: resourcesUpdateManyWithoutTeamsNestedInput
    team_members?: team_membersUpdateManyWithoutTeamsNestedInput
  }

  export type teamsUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channels?: channelsUncheckedUpdateManyWithoutTeamsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutTeamsNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutTeamsNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type reportsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: reportsWhereUniqueInput
    update: XOR<reportsUpdateWithoutProjectsInput, reportsUncheckedUpdateWithoutProjectsInput>
    create: XOR<reportsCreateWithoutProjectsInput, reportsUncheckedCreateWithoutProjectsInput>
  }

  export type reportsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: reportsWhereUniqueInput
    data: XOR<reportsUpdateWithoutProjectsInput, reportsUncheckedUpdateWithoutProjectsInput>
  }

  export type reportsUpdateManyWithWhereWithoutProjectsInput = {
    where: reportsScalarWhereInput
    data: XOR<reportsUpdateManyMutationInput, reportsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type reportsScalarWhereInput = {
    AND?: reportsScalarWhereInput | reportsScalarWhereInput[]
    OR?: reportsScalarWhereInput[]
    NOT?: reportsScalarWhereInput | reportsScalarWhereInput[]
    id?: IntFilter<"reports"> | number
    project_id?: IntNullableFilter<"reports"> | number | null
    team_id?: IntNullableFilter<"reports"> | number | null
    user_id?: IntNullableFilter<"reports"> | number | null
    type?: Enumreports_typeNullableFilter<"reports"> | $Enums.reports_type | null
    data?: JsonNullableFilter<"reports">
    created_at?: DateTimeNullableFilter<"reports"> | Date | string | null
  }

  export type sprintsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: sprintsWhereUniqueInput
    update: XOR<sprintsUpdateWithoutProjectsInput, sprintsUncheckedUpdateWithoutProjectsInput>
    create: XOR<sprintsCreateWithoutProjectsInput, sprintsUncheckedCreateWithoutProjectsInput>
  }

  export type sprintsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: sprintsWhereUniqueInput
    data: XOR<sprintsUpdateWithoutProjectsInput, sprintsUncheckedUpdateWithoutProjectsInput>
  }

  export type sprintsUpdateManyWithWhereWithoutProjectsInput = {
    where: sprintsScalarWhereInput
    data: XOR<sprintsUpdateManyMutationInput, sprintsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type sprintsScalarWhereInput = {
    AND?: sprintsScalarWhereInput | sprintsScalarWhereInput[]
    OR?: sprintsScalarWhereInput[]
    NOT?: sprintsScalarWhereInput | sprintsScalarWhereInput[]
    id?: IntFilter<"sprints"> | number
    project_id?: IntFilter<"sprints"> | number
    name?: StringFilter<"sprints"> | string
    start_date?: DateTimeNullableFilter<"sprints"> | Date | string | null
    end_date?: DateTimeNullableFilter<"sprints"> | Date | string | null
    goal?: StringNullableFilter<"sprints"> | string | null
    status?: Enumsprints_statusNullableFilter<"sprints"> | $Enums.sprints_status | null
  }

  export type tasksUpsertWithWhereUniqueWithoutProjectsInput = {
    where: tasksWhereUniqueInput
    update: XOR<tasksUpdateWithoutProjectsInput, tasksUncheckedUpdateWithoutProjectsInput>
    create: XOR<tasksCreateWithoutProjectsInput, tasksUncheckedCreateWithoutProjectsInput>
  }

  export type tasksUpdateWithWhereUniqueWithoutProjectsInput = {
    where: tasksWhereUniqueInput
    data: XOR<tasksUpdateWithoutProjectsInput, tasksUncheckedUpdateWithoutProjectsInput>
  }

  export type tasksUpdateManyWithWhereWithoutProjectsInput = {
    where: tasksScalarWhereInput
    data: XOR<tasksUpdateManyMutationInput, tasksUncheckedUpdateManyWithoutProjectsInput>
  }

  export type tasksScalarWhereInput = {
    AND?: tasksScalarWhereInput | tasksScalarWhereInput[]
    OR?: tasksScalarWhereInput[]
    NOT?: tasksScalarWhereInput | tasksScalarWhereInput[]
    id?: IntFilter<"tasks"> | number
    project_id?: IntFilter<"tasks"> | number
    parent_task_id?: IntNullableFilter<"tasks"> | number | null
    name?: StringFilter<"tasks"> | string
    description?: StringNullableFilter<"tasks"> | string | null
    status?: Enumtasks_statusNullableFilter<"tasks"> | $Enums.tasks_status | null
    priority?: Enumtasks_priorityNullableFilter<"tasks"> | $Enums.tasks_priority | null
    due_date?: DateTimeNullableFilter<"tasks"> | Date | string | null
    wip_limit?: IntNullableFilter<"tasks"> | number | null
    swimlane?: StringNullableFilter<"tasks"> | string | null
    created_by?: IntNullableFilter<"tasks"> | number | null
    created_at?: DateTimeNullableFilter<"tasks"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"tasks"> | Date | string | null
  }

  export type ticketsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: ticketsWhereUniqueInput
    update: XOR<ticketsUpdateWithoutProjectsInput, ticketsUncheckedUpdateWithoutProjectsInput>
    create: XOR<ticketsCreateWithoutProjectsInput, ticketsUncheckedCreateWithoutProjectsInput>
  }

  export type ticketsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: ticketsWhereUniqueInput
    data: XOR<ticketsUpdateWithoutProjectsInput, ticketsUncheckedUpdateWithoutProjectsInput>
  }

  export type ticketsUpdateManyWithWhereWithoutProjectsInput = {
    where: ticketsScalarWhereInput
    data: XOR<ticketsUpdateManyMutationInput, ticketsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type ticketsScalarWhereInput = {
    AND?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
    OR?: ticketsScalarWhereInput[]
    NOT?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
    id?: IntFilter<"tickets"> | number
    project_id?: IntNullableFilter<"tickets"> | number | null
    created_by?: IntNullableFilter<"tickets"> | number | null
    assigned_to?: IntNullableFilter<"tickets"> | number | null
    type?: Enumtickets_typeNullableFilter<"tickets"> | $Enums.tickets_type | null
    title?: StringFilter<"tickets"> | string
    description?: StringNullableFilter<"tickets"> | string | null
    status?: Enumtickets_statusNullableFilter<"tickets"> | $Enums.tickets_status | null
    priority?: Enumtickets_priorityNullableFilter<"tickets"> | $Enums.tickets_priority | null
    sla_hours?: IntNullableFilter<"tickets"> | number | null
    created_at?: DateTimeNullableFilter<"tickets"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"tickets"> | Date | string | null
  }

  export type projectsCreateWithoutReportsInput = {
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsCreateNestedManyWithoutProjectsInput
    contracts?: contractsCreateNestedManyWithoutProjectsInput
    costs?: costsCreateNestedManyWithoutProjectsInput
    documents?: documentsCreateNestedManyWithoutProjectsInput
    events?: eventsCreateNestedManyWithoutProjectsInput
    leads?: leadsCreateNestedManyWithoutProjectsInput
    permissions?: permissionsCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesCreateNestedManyWithoutProjectsInput
    teams?: teamsCreateNestedOneWithoutProjectsInput
    sprints?: sprintsCreateNestedManyWithoutProjectsInput
    tasks?: tasksCreateNestedManyWithoutProjectsInput
    tickets?: ticketsCreateNestedManyWithoutProjectsInput
  }

  export type projectsUncheckedCreateWithoutReportsInput = {
    id?: number
    team_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsUncheckedCreateNestedManyWithoutProjectsInput
    contracts?: contractsUncheckedCreateNestedManyWithoutProjectsInput
    costs?: costsUncheckedCreateNestedManyWithoutProjectsInput
    documents?: documentsUncheckedCreateNestedManyWithoutProjectsInput
    events?: eventsUncheckedCreateNestedManyWithoutProjectsInput
    leads?: leadsUncheckedCreateNestedManyWithoutProjectsInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutProjectsInput
    sprints?: sprintsUncheckedCreateNestedManyWithoutProjectsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutProjectsInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutReportsInput = {
    where: projectsWhereUniqueInput
    create: XOR<projectsCreateWithoutReportsInput, projectsUncheckedCreateWithoutReportsInput>
  }

  export type teamsCreateWithoutReportsInput = {
    name: string
    logo?: string | null
    plan?: string | null
    created_at?: Date | string | null
    channels?: channelsCreateNestedManyWithoutTeamsInput
    projects?: projectsCreateNestedManyWithoutTeamsInput
    resources?: resourcesCreateNestedManyWithoutTeamsInput
    team_members?: team_membersCreateNestedManyWithoutTeamsInput
  }

  export type teamsUncheckedCreateWithoutReportsInput = {
    id?: number
    name: string
    logo?: string | null
    plan?: string | null
    created_at?: Date | string | null
    channels?: channelsUncheckedCreateNestedManyWithoutTeamsInput
    projects?: projectsUncheckedCreateNestedManyWithoutTeamsInput
    resources?: resourcesUncheckedCreateNestedManyWithoutTeamsInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type teamsCreateOrConnectWithoutReportsInput = {
    where: teamsWhereUniqueInput
    create: XOR<teamsCreateWithoutReportsInput, teamsUncheckedCreateWithoutReportsInput>
  }

  export type usersCreateWithoutReportsInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsCreateNestedManyWithoutUsersInput
    messages?: messagesCreateNestedManyWithoutUsersInput
    permissions?: permissionsCreateNestedManyWithoutUsersInput
    resources?: resourcesCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesCreateNestedManyWithoutUsersInput
    tasks?: tasksCreateNestedManyWithoutUsersInput
    team_members?: team_membersCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUncheckedCreateWithoutReportsInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsUncheckedCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsUncheckedCreateNestedManyWithoutUsersInput
    messages?: messagesUncheckedCreateNestedManyWithoutUsersInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutUsersInput
    resources?: resourcesUncheckedCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutUsersInput
    tasks?: tasksUncheckedCreateNestedManyWithoutUsersInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersCreateOrConnectWithoutReportsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutReportsInput, usersUncheckedCreateWithoutReportsInput>
  }

  export type projectsUpsertWithoutReportsInput = {
    update: XOR<projectsUpdateWithoutReportsInput, projectsUncheckedUpdateWithoutReportsInput>
    create: XOR<projectsCreateWithoutReportsInput, projectsUncheckedCreateWithoutReportsInput>
    where?: projectsWhereInput
  }

  export type projectsUpdateToOneWithWhereWithoutReportsInput = {
    where?: projectsWhereInput
    data: XOR<projectsUpdateWithoutReportsInput, projectsUncheckedUpdateWithoutReportsInput>
  }

  export type projectsUpdateWithoutReportsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUpdateManyWithoutProjectsNestedInput
    costs?: costsUpdateManyWithoutProjectsNestedInput
    documents?: documentsUpdateManyWithoutProjectsNestedInput
    events?: eventsUpdateManyWithoutProjectsNestedInput
    leads?: leadsUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUpdateManyWithoutProjectsNestedInput
    teams?: teamsUpdateOneWithoutProjectsNestedInput
    sprints?: sprintsUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUncheckedUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUncheckedUpdateManyWithoutProjectsNestedInput
    costs?: costsUncheckedUpdateManyWithoutProjectsNestedInput
    documents?: documentsUncheckedUpdateManyWithoutProjectsNestedInput
    events?: eventsUncheckedUpdateManyWithoutProjectsNestedInput
    leads?: leadsUncheckedUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUncheckedUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUncheckedUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type teamsUpsertWithoutReportsInput = {
    update: XOR<teamsUpdateWithoutReportsInput, teamsUncheckedUpdateWithoutReportsInput>
    create: XOR<teamsCreateWithoutReportsInput, teamsUncheckedCreateWithoutReportsInput>
    where?: teamsWhereInput
  }

  export type teamsUpdateToOneWithWhereWithoutReportsInput = {
    where?: teamsWhereInput
    data: XOR<teamsUpdateWithoutReportsInput, teamsUncheckedUpdateWithoutReportsInput>
  }

  export type teamsUpdateWithoutReportsInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channels?: channelsUpdateManyWithoutTeamsNestedInput
    projects?: projectsUpdateManyWithoutTeamsNestedInput
    resources?: resourcesUpdateManyWithoutTeamsNestedInput
    team_members?: team_membersUpdateManyWithoutTeamsNestedInput
  }

  export type teamsUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channels?: channelsUncheckedUpdateManyWithoutTeamsNestedInput
    projects?: projectsUncheckedUpdateManyWithoutTeamsNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutTeamsNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type usersUpsertWithoutReportsInput = {
    update: XOR<usersUpdateWithoutReportsInput, usersUncheckedUpdateWithoutReportsInput>
    create: XOR<usersCreateWithoutReportsInput, usersUncheckedCreateWithoutReportsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutReportsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutReportsInput, usersUncheckedUpdateWithoutReportsInput>
  }

  export type usersUpdateWithoutReportsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUpdateManyWithoutUsersNestedInput
    messages?: messagesUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUpdateManyWithoutUsersNestedInput
    resources?: resourcesUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutUsersNestedInput
    tasks?: tasksUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUncheckedUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUncheckedUpdateManyWithoutUsersNestedInput
    messages?: messagesUncheckedUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutUsersNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutUsersNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type project_resourcesCreateWithoutResourcesInput = {
    assigned_from?: Date | string | null
    assigned_to?: Date | string | null
    projects: projectsCreateNestedOneWithoutProject_resourcesInput
  }

  export type project_resourcesUncheckedCreateWithoutResourcesInput = {
    id?: number
    project_id: number
    assigned_from?: Date | string | null
    assigned_to?: Date | string | null
  }

  export type project_resourcesCreateOrConnectWithoutResourcesInput = {
    where: project_resourcesWhereUniqueInput
    create: XOR<project_resourcesCreateWithoutResourcesInput, project_resourcesUncheckedCreateWithoutResourcesInput>
  }

  export type project_resourcesCreateManyResourcesInputEnvelope = {
    data: project_resourcesCreateManyResourcesInput | project_resourcesCreateManyResourcesInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutResourcesInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsCreateNestedManyWithoutUsersInput
    messages?: messagesCreateNestedManyWithoutUsersInput
    permissions?: permissionsCreateNestedManyWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesCreateNestedManyWithoutUsersInput
    tasks?: tasksCreateNestedManyWithoutUsersInput
    team_members?: team_membersCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUncheckedCreateWithoutResourcesInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsUncheckedCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsUncheckedCreateNestedManyWithoutUsersInput
    messages?: messagesUncheckedCreateNestedManyWithoutUsersInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutUsersInput
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutUsersInput
    tasks?: tasksUncheckedCreateNestedManyWithoutUsersInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersCreateOrConnectWithoutResourcesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutResourcesInput, usersUncheckedCreateWithoutResourcesInput>
  }

  export type teamsCreateWithoutResourcesInput = {
    name: string
    logo?: string | null
    plan?: string | null
    created_at?: Date | string | null
    channels?: channelsCreateNestedManyWithoutTeamsInput
    projects?: projectsCreateNestedManyWithoutTeamsInput
    reports?: reportsCreateNestedManyWithoutTeamsInput
    team_members?: team_membersCreateNestedManyWithoutTeamsInput
  }

  export type teamsUncheckedCreateWithoutResourcesInput = {
    id?: number
    name: string
    logo?: string | null
    plan?: string | null
    created_at?: Date | string | null
    channels?: channelsUncheckedCreateNestedManyWithoutTeamsInput
    projects?: projectsUncheckedCreateNestedManyWithoutTeamsInput
    reports?: reportsUncheckedCreateNestedManyWithoutTeamsInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type teamsCreateOrConnectWithoutResourcesInput = {
    where: teamsWhereUniqueInput
    create: XOR<teamsCreateWithoutResourcesInput, teamsUncheckedCreateWithoutResourcesInput>
  }

  export type project_resourcesUpsertWithWhereUniqueWithoutResourcesInput = {
    where: project_resourcesWhereUniqueInput
    update: XOR<project_resourcesUpdateWithoutResourcesInput, project_resourcesUncheckedUpdateWithoutResourcesInput>
    create: XOR<project_resourcesCreateWithoutResourcesInput, project_resourcesUncheckedCreateWithoutResourcesInput>
  }

  export type project_resourcesUpdateWithWhereUniqueWithoutResourcesInput = {
    where: project_resourcesWhereUniqueInput
    data: XOR<project_resourcesUpdateWithoutResourcesInput, project_resourcesUncheckedUpdateWithoutResourcesInput>
  }

  export type project_resourcesUpdateManyWithWhereWithoutResourcesInput = {
    where: project_resourcesScalarWhereInput
    data: XOR<project_resourcesUpdateManyMutationInput, project_resourcesUncheckedUpdateManyWithoutResourcesInput>
  }

  export type usersUpsertWithoutResourcesInput = {
    update: XOR<usersUpdateWithoutResourcesInput, usersUncheckedUpdateWithoutResourcesInput>
    create: XOR<usersCreateWithoutResourcesInput, usersUncheckedCreateWithoutResourcesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutResourcesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutResourcesInput, usersUncheckedUpdateWithoutResourcesInput>
  }

  export type usersUpdateWithoutResourcesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUpdateManyWithoutUsersNestedInput
    messages?: messagesUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUpdateManyWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutUsersNestedInput
    tasks?: tasksUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUncheckedUpdateWithoutResourcesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUncheckedUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUncheckedUpdateManyWithoutUsersNestedInput
    messages?: messagesUncheckedUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutUsersNestedInput
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutUsersNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type teamsUpsertWithoutResourcesInput = {
    update: XOR<teamsUpdateWithoutResourcesInput, teamsUncheckedUpdateWithoutResourcesInput>
    create: XOR<teamsCreateWithoutResourcesInput, teamsUncheckedCreateWithoutResourcesInput>
    where?: teamsWhereInput
  }

  export type teamsUpdateToOneWithWhereWithoutResourcesInput = {
    where?: teamsWhereInput
    data: XOR<teamsUpdateWithoutResourcesInput, teamsUncheckedUpdateWithoutResourcesInput>
  }

  export type teamsUpdateWithoutResourcesInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channels?: channelsUpdateManyWithoutTeamsNestedInput
    projects?: projectsUpdateManyWithoutTeamsNestedInput
    reports?: reportsUpdateManyWithoutTeamsNestedInput
    team_members?: team_membersUpdateManyWithoutTeamsNestedInput
  }

  export type teamsUncheckedUpdateWithoutResourcesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channels?: channelsUncheckedUpdateManyWithoutTeamsNestedInput
    projects?: projectsUncheckedUpdateManyWithoutTeamsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutTeamsNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type sprintsCreateWithoutSprint_tasksInput = {
    name: string
    start_date?: Date | string | null
    end_date?: Date | string | null
    goal?: string | null
    status?: $Enums.sprints_status | null
    projects: projectsCreateNestedOneWithoutSprintsInput
  }

  export type sprintsUncheckedCreateWithoutSprint_tasksInput = {
    id?: number
    project_id: number
    name: string
    start_date?: Date | string | null
    end_date?: Date | string | null
    goal?: string | null
    status?: $Enums.sprints_status | null
  }

  export type sprintsCreateOrConnectWithoutSprint_tasksInput = {
    where: sprintsWhereUniqueInput
    create: XOR<sprintsCreateWithoutSprint_tasksInput, sprintsUncheckedCreateWithoutSprint_tasksInput>
  }

  export type tasksCreateWithoutSprint_tasksInput = {
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    task_assignees?: task_assigneesCreateNestedManyWithoutTasksInput
    task_label_links?: task_label_linksCreateNestedManyWithoutTasksInput
    projects: projectsCreateNestedOneWithoutTasksInput
    tasks?: tasksCreateNestedOneWithoutOther_tasksInput
    other_tasks?: tasksCreateNestedManyWithoutTasksInput
    users?: usersCreateNestedOneWithoutTasksInput
  }

  export type tasksUncheckedCreateWithoutSprint_tasksInput = {
    id?: number
    project_id: number
    parent_task_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutTasksInput
    task_label_links?: task_label_linksUncheckedCreateNestedManyWithoutTasksInput
    other_tasks?: tasksUncheckedCreateNestedManyWithoutTasksInput
  }

  export type tasksCreateOrConnectWithoutSprint_tasksInput = {
    where: tasksWhereUniqueInput
    create: XOR<tasksCreateWithoutSprint_tasksInput, tasksUncheckedCreateWithoutSprint_tasksInput>
  }

  export type sprintsUpsertWithoutSprint_tasksInput = {
    update: XOR<sprintsUpdateWithoutSprint_tasksInput, sprintsUncheckedUpdateWithoutSprint_tasksInput>
    create: XOR<sprintsCreateWithoutSprint_tasksInput, sprintsUncheckedCreateWithoutSprint_tasksInput>
    where?: sprintsWhereInput
  }

  export type sprintsUpdateToOneWithWhereWithoutSprint_tasksInput = {
    where?: sprintsWhereInput
    data: XOR<sprintsUpdateWithoutSprint_tasksInput, sprintsUncheckedUpdateWithoutSprint_tasksInput>
  }

  export type sprintsUpdateWithoutSprint_tasksInput = {
    name?: StringFieldUpdateOperationsInput | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumsprints_statusFieldUpdateOperationsInput | $Enums.sprints_status | null
    projects?: projectsUpdateOneRequiredWithoutSprintsNestedInput
  }

  export type sprintsUncheckedUpdateWithoutSprint_tasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumsprints_statusFieldUpdateOperationsInput | $Enums.sprints_status | null
  }

  export type tasksUpsertWithoutSprint_tasksInput = {
    update: XOR<tasksUpdateWithoutSprint_tasksInput, tasksUncheckedUpdateWithoutSprint_tasksInput>
    create: XOR<tasksCreateWithoutSprint_tasksInput, tasksUncheckedCreateWithoutSprint_tasksInput>
    where?: tasksWhereInput
  }

  export type tasksUpdateToOneWithWhereWithoutSprint_tasksInput = {
    where?: tasksWhereInput
    data: XOR<tasksUpdateWithoutSprint_tasksInput, tasksUncheckedUpdateWithoutSprint_tasksInput>
  }

  export type tasksUpdateWithoutSprint_tasksInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    task_assignees?: task_assigneesUpdateManyWithoutTasksNestedInput
    task_label_links?: task_label_linksUpdateManyWithoutTasksNestedInput
    projects?: projectsUpdateOneRequiredWithoutTasksNestedInput
    tasks?: tasksUpdateOneWithoutOther_tasksNestedInput
    other_tasks?: tasksUpdateManyWithoutTasksNestedInput
    users?: usersUpdateOneWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateWithoutSprint_tasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    parent_task_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutTasksNestedInput
    task_label_links?: task_label_linksUncheckedUpdateManyWithoutTasksNestedInput
    other_tasks?: tasksUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type sprint_tasksCreateWithoutSprintsInput = {
    tasks: tasksCreateNestedOneWithoutSprint_tasksInput
  }

  export type sprint_tasksUncheckedCreateWithoutSprintsInput = {
    id?: number
    task_id: number
  }

  export type sprint_tasksCreateOrConnectWithoutSprintsInput = {
    where: sprint_tasksWhereUniqueInput
    create: XOR<sprint_tasksCreateWithoutSprintsInput, sprint_tasksUncheckedCreateWithoutSprintsInput>
  }

  export type sprint_tasksCreateManySprintsInputEnvelope = {
    data: sprint_tasksCreateManySprintsInput | sprint_tasksCreateManySprintsInput[]
    skipDuplicates?: boolean
  }

  export type projectsCreateWithoutSprintsInput = {
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsCreateNestedManyWithoutProjectsInput
    contracts?: contractsCreateNestedManyWithoutProjectsInput
    costs?: costsCreateNestedManyWithoutProjectsInput
    documents?: documentsCreateNestedManyWithoutProjectsInput
    events?: eventsCreateNestedManyWithoutProjectsInput
    leads?: leadsCreateNestedManyWithoutProjectsInput
    permissions?: permissionsCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesCreateNestedManyWithoutProjectsInput
    teams?: teamsCreateNestedOneWithoutProjectsInput
    reports?: reportsCreateNestedManyWithoutProjectsInput
    tasks?: tasksCreateNestedManyWithoutProjectsInput
    tickets?: ticketsCreateNestedManyWithoutProjectsInput
  }

  export type projectsUncheckedCreateWithoutSprintsInput = {
    id?: number
    team_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsUncheckedCreateNestedManyWithoutProjectsInput
    contracts?: contractsUncheckedCreateNestedManyWithoutProjectsInput
    costs?: costsUncheckedCreateNestedManyWithoutProjectsInput
    documents?: documentsUncheckedCreateNestedManyWithoutProjectsInput
    events?: eventsUncheckedCreateNestedManyWithoutProjectsInput
    leads?: leadsUncheckedCreateNestedManyWithoutProjectsInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutProjectsInput
    reports?: reportsUncheckedCreateNestedManyWithoutProjectsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutProjectsInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutSprintsInput = {
    where: projectsWhereUniqueInput
    create: XOR<projectsCreateWithoutSprintsInput, projectsUncheckedCreateWithoutSprintsInput>
  }

  export type sprint_tasksUpsertWithWhereUniqueWithoutSprintsInput = {
    where: sprint_tasksWhereUniqueInput
    update: XOR<sprint_tasksUpdateWithoutSprintsInput, sprint_tasksUncheckedUpdateWithoutSprintsInput>
    create: XOR<sprint_tasksCreateWithoutSprintsInput, sprint_tasksUncheckedCreateWithoutSprintsInput>
  }

  export type sprint_tasksUpdateWithWhereUniqueWithoutSprintsInput = {
    where: sprint_tasksWhereUniqueInput
    data: XOR<sprint_tasksUpdateWithoutSprintsInput, sprint_tasksUncheckedUpdateWithoutSprintsInput>
  }

  export type sprint_tasksUpdateManyWithWhereWithoutSprintsInput = {
    where: sprint_tasksScalarWhereInput
    data: XOR<sprint_tasksUpdateManyMutationInput, sprint_tasksUncheckedUpdateManyWithoutSprintsInput>
  }

  export type sprint_tasksScalarWhereInput = {
    AND?: sprint_tasksScalarWhereInput | sprint_tasksScalarWhereInput[]
    OR?: sprint_tasksScalarWhereInput[]
    NOT?: sprint_tasksScalarWhereInput | sprint_tasksScalarWhereInput[]
    id?: IntFilter<"sprint_tasks"> | number
    sprint_id?: IntFilter<"sprint_tasks"> | number
    task_id?: IntFilter<"sprint_tasks"> | number
  }

  export type projectsUpsertWithoutSprintsInput = {
    update: XOR<projectsUpdateWithoutSprintsInput, projectsUncheckedUpdateWithoutSprintsInput>
    create: XOR<projectsCreateWithoutSprintsInput, projectsUncheckedCreateWithoutSprintsInput>
    where?: projectsWhereInput
  }

  export type projectsUpdateToOneWithWhereWithoutSprintsInput = {
    where?: projectsWhereInput
    data: XOR<projectsUpdateWithoutSprintsInput, projectsUncheckedUpdateWithoutSprintsInput>
  }

  export type projectsUpdateWithoutSprintsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUpdateManyWithoutProjectsNestedInput
    costs?: costsUpdateManyWithoutProjectsNestedInput
    documents?: documentsUpdateManyWithoutProjectsNestedInput
    events?: eventsUpdateManyWithoutProjectsNestedInput
    leads?: leadsUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUpdateManyWithoutProjectsNestedInput
    teams?: teamsUpdateOneWithoutProjectsNestedInput
    reports?: reportsUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateWithoutSprintsInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUncheckedUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUncheckedUpdateManyWithoutProjectsNestedInput
    costs?: costsUncheckedUpdateManyWithoutProjectsNestedInput
    documents?: documentsUncheckedUpdateManyWithoutProjectsNestedInput
    events?: eventsUncheckedUpdateManyWithoutProjectsNestedInput
    leads?: leadsUncheckedUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUncheckedUpdateManyWithoutProjectsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type contractsCreateWithoutSuppliersInput = {
    description?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.contracts_status | null
    projects?: projectsCreateNestedOneWithoutContractsInput
  }

  export type contractsUncheckedCreateWithoutSuppliersInput = {
    id?: number
    project_id?: number | null
    description?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.contracts_status | null
  }

  export type contractsCreateOrConnectWithoutSuppliersInput = {
    where: contractsWhereUniqueInput
    create: XOR<contractsCreateWithoutSuppliersInput, contractsUncheckedCreateWithoutSuppliersInput>
  }

  export type contractsCreateManySuppliersInputEnvelope = {
    data: contractsCreateManySuppliersInput | contractsCreateManySuppliersInput[]
    skipDuplicates?: boolean
  }

  export type contractsUpsertWithWhereUniqueWithoutSuppliersInput = {
    where: contractsWhereUniqueInput
    update: XOR<contractsUpdateWithoutSuppliersInput, contractsUncheckedUpdateWithoutSuppliersInput>
    create: XOR<contractsCreateWithoutSuppliersInput, contractsUncheckedCreateWithoutSuppliersInput>
  }

  export type contractsUpdateWithWhereUniqueWithoutSuppliersInput = {
    where: contractsWhereUniqueInput
    data: XOR<contractsUpdateWithoutSuppliersInput, contractsUncheckedUpdateWithoutSuppliersInput>
  }

  export type contractsUpdateManyWithWhereWithoutSuppliersInput = {
    where: contractsScalarWhereInput
    data: XOR<contractsUpdateManyMutationInput, contractsUncheckedUpdateManyWithoutSuppliersInput>
  }

  export type tasksCreateWithoutTask_assigneesInput = {
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sprint_tasks?: sprint_tasksCreateNestedManyWithoutTasksInput
    task_label_links?: task_label_linksCreateNestedManyWithoutTasksInput
    projects: projectsCreateNestedOneWithoutTasksInput
    tasks?: tasksCreateNestedOneWithoutOther_tasksInput
    other_tasks?: tasksCreateNestedManyWithoutTasksInput
    users?: usersCreateNestedOneWithoutTasksInput
  }

  export type tasksUncheckedCreateWithoutTask_assigneesInput = {
    id?: number
    project_id: number
    parent_task_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sprint_tasks?: sprint_tasksUncheckedCreateNestedManyWithoutTasksInput
    task_label_links?: task_label_linksUncheckedCreateNestedManyWithoutTasksInput
    other_tasks?: tasksUncheckedCreateNestedManyWithoutTasksInput
  }

  export type tasksCreateOrConnectWithoutTask_assigneesInput = {
    where: tasksWhereUniqueInput
    create: XOR<tasksCreateWithoutTask_assigneesInput, tasksUncheckedCreateWithoutTask_assigneesInput>
  }

  export type usersCreateWithoutTask_assigneesInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsCreateNestedManyWithoutUsersInput
    messages?: messagesCreateNestedManyWithoutUsersInput
    permissions?: permissionsCreateNestedManyWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
    resources?: resourcesCreateNestedManyWithoutUsersInput
    tasks?: tasksCreateNestedManyWithoutUsersInput
    team_members?: team_membersCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUncheckedCreateWithoutTask_assigneesInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsUncheckedCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsUncheckedCreateNestedManyWithoutUsersInput
    messages?: messagesUncheckedCreateNestedManyWithoutUsersInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutUsersInput
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
    resources?: resourcesUncheckedCreateNestedManyWithoutUsersInput
    tasks?: tasksUncheckedCreateNestedManyWithoutUsersInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersCreateOrConnectWithoutTask_assigneesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutTask_assigneesInput, usersUncheckedCreateWithoutTask_assigneesInput>
  }

  export type tasksUpsertWithoutTask_assigneesInput = {
    update: XOR<tasksUpdateWithoutTask_assigneesInput, tasksUncheckedUpdateWithoutTask_assigneesInput>
    create: XOR<tasksCreateWithoutTask_assigneesInput, tasksUncheckedCreateWithoutTask_assigneesInput>
    where?: tasksWhereInput
  }

  export type tasksUpdateToOneWithWhereWithoutTask_assigneesInput = {
    where?: tasksWhereInput
    data: XOR<tasksUpdateWithoutTask_assigneesInput, tasksUncheckedUpdateWithoutTask_assigneesInput>
  }

  export type tasksUpdateWithoutTask_assigneesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sprint_tasks?: sprint_tasksUpdateManyWithoutTasksNestedInput
    task_label_links?: task_label_linksUpdateManyWithoutTasksNestedInput
    projects?: projectsUpdateOneRequiredWithoutTasksNestedInput
    tasks?: tasksUpdateOneWithoutOther_tasksNestedInput
    other_tasks?: tasksUpdateManyWithoutTasksNestedInput
    users?: usersUpdateOneWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateWithoutTask_assigneesInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    parent_task_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sprint_tasks?: sprint_tasksUncheckedUpdateManyWithoutTasksNestedInput
    task_label_links?: task_label_linksUncheckedUpdateManyWithoutTasksNestedInput
    other_tasks?: tasksUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type usersUpsertWithoutTask_assigneesInput = {
    update: XOR<usersUpdateWithoutTask_assigneesInput, usersUncheckedUpdateWithoutTask_assigneesInput>
    create: XOR<usersCreateWithoutTask_assigneesInput, usersUncheckedCreateWithoutTask_assigneesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutTask_assigneesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutTask_assigneesInput, usersUncheckedUpdateWithoutTask_assigneesInput>
  }

  export type usersUpdateWithoutTask_assigneesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUpdateManyWithoutUsersNestedInput
    messages?: messagesUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUpdateManyWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
    resources?: resourcesUpdateManyWithoutUsersNestedInput
    tasks?: tasksUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUncheckedUpdateWithoutTask_assigneesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUncheckedUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUncheckedUpdateManyWithoutUsersNestedInput
    messages?: messagesUncheckedUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutUsersNestedInput
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutUsersNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type tasksCreateWithoutTask_label_linksInput = {
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sprint_tasks?: sprint_tasksCreateNestedManyWithoutTasksInput
    task_assignees?: task_assigneesCreateNestedManyWithoutTasksInput
    projects: projectsCreateNestedOneWithoutTasksInput
    tasks?: tasksCreateNestedOneWithoutOther_tasksInput
    other_tasks?: tasksCreateNestedManyWithoutTasksInput
    users?: usersCreateNestedOneWithoutTasksInput
  }

  export type tasksUncheckedCreateWithoutTask_label_linksInput = {
    id?: number
    project_id: number
    parent_task_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sprint_tasks?: sprint_tasksUncheckedCreateNestedManyWithoutTasksInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutTasksInput
    other_tasks?: tasksUncheckedCreateNestedManyWithoutTasksInput
  }

  export type tasksCreateOrConnectWithoutTask_label_linksInput = {
    where: tasksWhereUniqueInput
    create: XOR<tasksCreateWithoutTask_label_linksInput, tasksUncheckedCreateWithoutTask_label_linksInput>
  }

  export type task_labelsCreateWithoutTask_label_linksInput = {
    name: string
    color?: string | null
  }

  export type task_labelsUncheckedCreateWithoutTask_label_linksInput = {
    id?: number
    name: string
    color?: string | null
  }

  export type task_labelsCreateOrConnectWithoutTask_label_linksInput = {
    where: task_labelsWhereUniqueInput
    create: XOR<task_labelsCreateWithoutTask_label_linksInput, task_labelsUncheckedCreateWithoutTask_label_linksInput>
  }

  export type tasksUpsertWithoutTask_label_linksInput = {
    update: XOR<tasksUpdateWithoutTask_label_linksInput, tasksUncheckedUpdateWithoutTask_label_linksInput>
    create: XOR<tasksCreateWithoutTask_label_linksInput, tasksUncheckedCreateWithoutTask_label_linksInput>
    where?: tasksWhereInput
  }

  export type tasksUpdateToOneWithWhereWithoutTask_label_linksInput = {
    where?: tasksWhereInput
    data: XOR<tasksUpdateWithoutTask_label_linksInput, tasksUncheckedUpdateWithoutTask_label_linksInput>
  }

  export type tasksUpdateWithoutTask_label_linksInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sprint_tasks?: sprint_tasksUpdateManyWithoutTasksNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutTasksNestedInput
    projects?: projectsUpdateOneRequiredWithoutTasksNestedInput
    tasks?: tasksUpdateOneWithoutOther_tasksNestedInput
    other_tasks?: tasksUpdateManyWithoutTasksNestedInput
    users?: usersUpdateOneWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateWithoutTask_label_linksInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    parent_task_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sprint_tasks?: sprint_tasksUncheckedUpdateManyWithoutTasksNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutTasksNestedInput
    other_tasks?: tasksUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type task_labelsUpsertWithoutTask_label_linksInput = {
    update: XOR<task_labelsUpdateWithoutTask_label_linksInput, task_labelsUncheckedUpdateWithoutTask_label_linksInput>
    create: XOR<task_labelsCreateWithoutTask_label_linksInput, task_labelsUncheckedCreateWithoutTask_label_linksInput>
    where?: task_labelsWhereInput
  }

  export type task_labelsUpdateToOneWithWhereWithoutTask_label_linksInput = {
    where?: task_labelsWhereInput
    data: XOR<task_labelsUpdateWithoutTask_label_linksInput, task_labelsUncheckedUpdateWithoutTask_label_linksInput>
  }

  export type task_labelsUpdateWithoutTask_label_linksInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type task_labelsUncheckedUpdateWithoutTask_label_linksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type task_label_linksCreateWithoutTask_labelsInput = {
    tasks: tasksCreateNestedOneWithoutTask_label_linksInput
  }

  export type task_label_linksUncheckedCreateWithoutTask_labelsInput = {
    id?: number
    task_id: number
  }

  export type task_label_linksCreateOrConnectWithoutTask_labelsInput = {
    where: task_label_linksWhereUniqueInput
    create: XOR<task_label_linksCreateWithoutTask_labelsInput, task_label_linksUncheckedCreateWithoutTask_labelsInput>
  }

  export type task_label_linksCreateManyTask_labelsInputEnvelope = {
    data: task_label_linksCreateManyTask_labelsInput | task_label_linksCreateManyTask_labelsInput[]
    skipDuplicates?: boolean
  }

  export type task_label_linksUpsertWithWhereUniqueWithoutTask_labelsInput = {
    where: task_label_linksWhereUniqueInput
    update: XOR<task_label_linksUpdateWithoutTask_labelsInput, task_label_linksUncheckedUpdateWithoutTask_labelsInput>
    create: XOR<task_label_linksCreateWithoutTask_labelsInput, task_label_linksUncheckedCreateWithoutTask_labelsInput>
  }

  export type task_label_linksUpdateWithWhereUniqueWithoutTask_labelsInput = {
    where: task_label_linksWhereUniqueInput
    data: XOR<task_label_linksUpdateWithoutTask_labelsInput, task_label_linksUncheckedUpdateWithoutTask_labelsInput>
  }

  export type task_label_linksUpdateManyWithWhereWithoutTask_labelsInput = {
    where: task_label_linksScalarWhereInput
    data: XOR<task_label_linksUpdateManyMutationInput, task_label_linksUncheckedUpdateManyWithoutTask_labelsInput>
  }

  export type task_label_linksScalarWhereInput = {
    AND?: task_label_linksScalarWhereInput | task_label_linksScalarWhereInput[]
    OR?: task_label_linksScalarWhereInput[]
    NOT?: task_label_linksScalarWhereInput | task_label_linksScalarWhereInput[]
    id?: IntFilter<"task_label_links"> | number
    task_id?: IntFilter<"task_label_links"> | number
    label_id?: IntFilter<"task_label_links"> | number
  }

  export type sprint_tasksCreateWithoutTasksInput = {
    sprints: sprintsCreateNestedOneWithoutSprint_tasksInput
  }

  export type sprint_tasksUncheckedCreateWithoutTasksInput = {
    id?: number
    sprint_id: number
  }

  export type sprint_tasksCreateOrConnectWithoutTasksInput = {
    where: sprint_tasksWhereUniqueInput
    create: XOR<sprint_tasksCreateWithoutTasksInput, sprint_tasksUncheckedCreateWithoutTasksInput>
  }

  export type sprint_tasksCreateManyTasksInputEnvelope = {
    data: sprint_tasksCreateManyTasksInput | sprint_tasksCreateManyTasksInput[]
    skipDuplicates?: boolean
  }

  export type task_assigneesCreateWithoutTasksInput = {
    users: usersCreateNestedOneWithoutTask_assigneesInput
  }

  export type task_assigneesUncheckedCreateWithoutTasksInput = {
    id?: number
    user_id: number
  }

  export type task_assigneesCreateOrConnectWithoutTasksInput = {
    where: task_assigneesWhereUniqueInput
    create: XOR<task_assigneesCreateWithoutTasksInput, task_assigneesUncheckedCreateWithoutTasksInput>
  }

  export type task_assigneesCreateManyTasksInputEnvelope = {
    data: task_assigneesCreateManyTasksInput | task_assigneesCreateManyTasksInput[]
    skipDuplicates?: boolean
  }

  export type task_label_linksCreateWithoutTasksInput = {
    task_labels: task_labelsCreateNestedOneWithoutTask_label_linksInput
  }

  export type task_label_linksUncheckedCreateWithoutTasksInput = {
    id?: number
    label_id: number
  }

  export type task_label_linksCreateOrConnectWithoutTasksInput = {
    where: task_label_linksWhereUniqueInput
    create: XOR<task_label_linksCreateWithoutTasksInput, task_label_linksUncheckedCreateWithoutTasksInput>
  }

  export type task_label_linksCreateManyTasksInputEnvelope = {
    data: task_label_linksCreateManyTasksInput | task_label_linksCreateManyTasksInput[]
    skipDuplicates?: boolean
  }

  export type projectsCreateWithoutTasksInput = {
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsCreateNestedManyWithoutProjectsInput
    contracts?: contractsCreateNestedManyWithoutProjectsInput
    costs?: costsCreateNestedManyWithoutProjectsInput
    documents?: documentsCreateNestedManyWithoutProjectsInput
    events?: eventsCreateNestedManyWithoutProjectsInput
    leads?: leadsCreateNestedManyWithoutProjectsInput
    permissions?: permissionsCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesCreateNestedManyWithoutProjectsInput
    teams?: teamsCreateNestedOneWithoutProjectsInput
    reports?: reportsCreateNestedManyWithoutProjectsInput
    sprints?: sprintsCreateNestedManyWithoutProjectsInput
    tickets?: ticketsCreateNestedManyWithoutProjectsInput
  }

  export type projectsUncheckedCreateWithoutTasksInput = {
    id?: number
    team_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsUncheckedCreateNestedManyWithoutProjectsInput
    contracts?: contractsUncheckedCreateNestedManyWithoutProjectsInput
    costs?: costsUncheckedCreateNestedManyWithoutProjectsInput
    documents?: documentsUncheckedCreateNestedManyWithoutProjectsInput
    events?: eventsUncheckedCreateNestedManyWithoutProjectsInput
    leads?: leadsUncheckedCreateNestedManyWithoutProjectsInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutProjectsInput
    reports?: reportsUncheckedCreateNestedManyWithoutProjectsInput
    sprints?: sprintsUncheckedCreateNestedManyWithoutProjectsInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutTasksInput = {
    where: projectsWhereUniqueInput
    create: XOR<projectsCreateWithoutTasksInput, projectsUncheckedCreateWithoutTasksInput>
  }

  export type tasksCreateWithoutOther_tasksInput = {
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sprint_tasks?: sprint_tasksCreateNestedManyWithoutTasksInput
    task_assignees?: task_assigneesCreateNestedManyWithoutTasksInput
    task_label_links?: task_label_linksCreateNestedManyWithoutTasksInput
    projects: projectsCreateNestedOneWithoutTasksInput
    tasks?: tasksCreateNestedOneWithoutOther_tasksInput
    users?: usersCreateNestedOneWithoutTasksInput
  }

  export type tasksUncheckedCreateWithoutOther_tasksInput = {
    id?: number
    project_id: number
    parent_task_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sprint_tasks?: sprint_tasksUncheckedCreateNestedManyWithoutTasksInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutTasksInput
    task_label_links?: task_label_linksUncheckedCreateNestedManyWithoutTasksInput
  }

  export type tasksCreateOrConnectWithoutOther_tasksInput = {
    where: tasksWhereUniqueInput
    create: XOR<tasksCreateWithoutOther_tasksInput, tasksUncheckedCreateWithoutOther_tasksInput>
  }

  export type tasksCreateWithoutTasksInput = {
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sprint_tasks?: sprint_tasksCreateNestedManyWithoutTasksInput
    task_assignees?: task_assigneesCreateNestedManyWithoutTasksInput
    task_label_links?: task_label_linksCreateNestedManyWithoutTasksInput
    projects: projectsCreateNestedOneWithoutTasksInput
    other_tasks?: tasksCreateNestedManyWithoutTasksInput
    users?: usersCreateNestedOneWithoutTasksInput
  }

  export type tasksUncheckedCreateWithoutTasksInput = {
    id?: number
    project_id: number
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sprint_tasks?: sprint_tasksUncheckedCreateNestedManyWithoutTasksInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutTasksInput
    task_label_links?: task_label_linksUncheckedCreateNestedManyWithoutTasksInput
    other_tasks?: tasksUncheckedCreateNestedManyWithoutTasksInput
  }

  export type tasksCreateOrConnectWithoutTasksInput = {
    where: tasksWhereUniqueInput
    create: XOR<tasksCreateWithoutTasksInput, tasksUncheckedCreateWithoutTasksInput>
  }

  export type tasksCreateManyTasksInputEnvelope = {
    data: tasksCreateManyTasksInput | tasksCreateManyTasksInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutTasksInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsCreateNestedManyWithoutUsersInput
    messages?: messagesCreateNestedManyWithoutUsersInput
    permissions?: permissionsCreateNestedManyWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
    resources?: resourcesCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesCreateNestedManyWithoutUsersInput
    team_members?: team_membersCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUncheckedCreateWithoutTasksInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsUncheckedCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsUncheckedCreateNestedManyWithoutUsersInput
    messages?: messagesUncheckedCreateNestedManyWithoutUsersInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutUsersInput
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
    resources?: resourcesUncheckedCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutUsersInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersCreateOrConnectWithoutTasksInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutTasksInput, usersUncheckedCreateWithoutTasksInput>
  }

  export type sprint_tasksUpsertWithWhereUniqueWithoutTasksInput = {
    where: sprint_tasksWhereUniqueInput
    update: XOR<sprint_tasksUpdateWithoutTasksInput, sprint_tasksUncheckedUpdateWithoutTasksInput>
    create: XOR<sprint_tasksCreateWithoutTasksInput, sprint_tasksUncheckedCreateWithoutTasksInput>
  }

  export type sprint_tasksUpdateWithWhereUniqueWithoutTasksInput = {
    where: sprint_tasksWhereUniqueInput
    data: XOR<sprint_tasksUpdateWithoutTasksInput, sprint_tasksUncheckedUpdateWithoutTasksInput>
  }

  export type sprint_tasksUpdateManyWithWhereWithoutTasksInput = {
    where: sprint_tasksScalarWhereInput
    data: XOR<sprint_tasksUpdateManyMutationInput, sprint_tasksUncheckedUpdateManyWithoutTasksInput>
  }

  export type task_assigneesUpsertWithWhereUniqueWithoutTasksInput = {
    where: task_assigneesWhereUniqueInput
    update: XOR<task_assigneesUpdateWithoutTasksInput, task_assigneesUncheckedUpdateWithoutTasksInput>
    create: XOR<task_assigneesCreateWithoutTasksInput, task_assigneesUncheckedCreateWithoutTasksInput>
  }

  export type task_assigneesUpdateWithWhereUniqueWithoutTasksInput = {
    where: task_assigneesWhereUniqueInput
    data: XOR<task_assigneesUpdateWithoutTasksInput, task_assigneesUncheckedUpdateWithoutTasksInput>
  }

  export type task_assigneesUpdateManyWithWhereWithoutTasksInput = {
    where: task_assigneesScalarWhereInput
    data: XOR<task_assigneesUpdateManyMutationInput, task_assigneesUncheckedUpdateManyWithoutTasksInput>
  }

  export type task_assigneesScalarWhereInput = {
    AND?: task_assigneesScalarWhereInput | task_assigneesScalarWhereInput[]
    OR?: task_assigneesScalarWhereInput[]
    NOT?: task_assigneesScalarWhereInput | task_assigneesScalarWhereInput[]
    id?: IntFilter<"task_assignees"> | number
    task_id?: IntFilter<"task_assignees"> | number
    user_id?: IntFilter<"task_assignees"> | number
  }

  export type task_label_linksUpsertWithWhereUniqueWithoutTasksInput = {
    where: task_label_linksWhereUniqueInput
    update: XOR<task_label_linksUpdateWithoutTasksInput, task_label_linksUncheckedUpdateWithoutTasksInput>
    create: XOR<task_label_linksCreateWithoutTasksInput, task_label_linksUncheckedCreateWithoutTasksInput>
  }

  export type task_label_linksUpdateWithWhereUniqueWithoutTasksInput = {
    where: task_label_linksWhereUniqueInput
    data: XOR<task_label_linksUpdateWithoutTasksInput, task_label_linksUncheckedUpdateWithoutTasksInput>
  }

  export type task_label_linksUpdateManyWithWhereWithoutTasksInput = {
    where: task_label_linksScalarWhereInput
    data: XOR<task_label_linksUpdateManyMutationInput, task_label_linksUncheckedUpdateManyWithoutTasksInput>
  }

  export type projectsUpsertWithoutTasksInput = {
    update: XOR<projectsUpdateWithoutTasksInput, projectsUncheckedUpdateWithoutTasksInput>
    create: XOR<projectsCreateWithoutTasksInput, projectsUncheckedCreateWithoutTasksInput>
    where?: projectsWhereInput
  }

  export type projectsUpdateToOneWithWhereWithoutTasksInput = {
    where?: projectsWhereInput
    data: XOR<projectsUpdateWithoutTasksInput, projectsUncheckedUpdateWithoutTasksInput>
  }

  export type projectsUpdateWithoutTasksInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUpdateManyWithoutProjectsNestedInput
    costs?: costsUpdateManyWithoutProjectsNestedInput
    documents?: documentsUpdateManyWithoutProjectsNestedInput
    events?: eventsUpdateManyWithoutProjectsNestedInput
    leads?: leadsUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUpdateManyWithoutProjectsNestedInput
    teams?: teamsUpdateOneWithoutProjectsNestedInput
    reports?: reportsUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUncheckedUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUncheckedUpdateManyWithoutProjectsNestedInput
    costs?: costsUncheckedUpdateManyWithoutProjectsNestedInput
    documents?: documentsUncheckedUpdateManyWithoutProjectsNestedInput
    events?: eventsUncheckedUpdateManyWithoutProjectsNestedInput
    leads?: leadsUncheckedUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUncheckedUpdateManyWithoutProjectsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUncheckedUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type tasksUpsertWithoutOther_tasksInput = {
    update: XOR<tasksUpdateWithoutOther_tasksInput, tasksUncheckedUpdateWithoutOther_tasksInput>
    create: XOR<tasksCreateWithoutOther_tasksInput, tasksUncheckedCreateWithoutOther_tasksInput>
    where?: tasksWhereInput
  }

  export type tasksUpdateToOneWithWhereWithoutOther_tasksInput = {
    where?: tasksWhereInput
    data: XOR<tasksUpdateWithoutOther_tasksInput, tasksUncheckedUpdateWithoutOther_tasksInput>
  }

  export type tasksUpdateWithoutOther_tasksInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sprint_tasks?: sprint_tasksUpdateManyWithoutTasksNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutTasksNestedInput
    task_label_links?: task_label_linksUpdateManyWithoutTasksNestedInput
    projects?: projectsUpdateOneRequiredWithoutTasksNestedInput
    tasks?: tasksUpdateOneWithoutOther_tasksNestedInput
    users?: usersUpdateOneWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateWithoutOther_tasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    parent_task_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sprint_tasks?: sprint_tasksUncheckedUpdateManyWithoutTasksNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutTasksNestedInput
    task_label_links?: task_label_linksUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type tasksUpsertWithWhereUniqueWithoutTasksInput = {
    where: tasksWhereUniqueInput
    update: XOR<tasksUpdateWithoutTasksInput, tasksUncheckedUpdateWithoutTasksInput>
    create: XOR<tasksCreateWithoutTasksInput, tasksUncheckedCreateWithoutTasksInput>
  }

  export type tasksUpdateWithWhereUniqueWithoutTasksInput = {
    where: tasksWhereUniqueInput
    data: XOR<tasksUpdateWithoutTasksInput, tasksUncheckedUpdateWithoutTasksInput>
  }

  export type tasksUpdateManyWithWhereWithoutTasksInput = {
    where: tasksScalarWhereInput
    data: XOR<tasksUpdateManyMutationInput, tasksUncheckedUpdateManyWithoutTasksInput>
  }

  export type usersUpsertWithoutTasksInput = {
    update: XOR<usersUpdateWithoutTasksInput, usersUncheckedUpdateWithoutTasksInput>
    create: XOR<usersCreateWithoutTasksInput, usersUncheckedCreateWithoutTasksInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutTasksInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutTasksInput, usersUncheckedUpdateWithoutTasksInput>
  }

  export type usersUpdateWithoutTasksInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUpdateManyWithoutUsersNestedInput
    messages?: messagesUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUpdateManyWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
    resources?: resourcesUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUncheckedUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUncheckedUpdateManyWithoutUsersNestedInput
    messages?: messagesUncheckedUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutUsersNestedInput
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type teamsCreateWithoutTeam_membersInput = {
    name: string
    logo?: string | null
    plan?: string | null
    created_at?: Date | string | null
    channels?: channelsCreateNestedManyWithoutTeamsInput
    projects?: projectsCreateNestedManyWithoutTeamsInput
    reports?: reportsCreateNestedManyWithoutTeamsInput
    resources?: resourcesCreateNestedManyWithoutTeamsInput
  }

  export type teamsUncheckedCreateWithoutTeam_membersInput = {
    id?: number
    name: string
    logo?: string | null
    plan?: string | null
    created_at?: Date | string | null
    channels?: channelsUncheckedCreateNestedManyWithoutTeamsInput
    projects?: projectsUncheckedCreateNestedManyWithoutTeamsInput
    reports?: reportsUncheckedCreateNestedManyWithoutTeamsInput
    resources?: resourcesUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type teamsCreateOrConnectWithoutTeam_membersInput = {
    where: teamsWhereUniqueInput
    create: XOR<teamsCreateWithoutTeam_membersInput, teamsUncheckedCreateWithoutTeam_membersInput>
  }

  export type usersCreateWithoutTeam_membersInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsCreateNestedManyWithoutUsersInput
    messages?: messagesCreateNestedManyWithoutUsersInput
    permissions?: permissionsCreateNestedManyWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
    resources?: resourcesCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesCreateNestedManyWithoutUsersInput
    tasks?: tasksCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUncheckedCreateWithoutTeam_membersInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsUncheckedCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsUncheckedCreateNestedManyWithoutUsersInput
    messages?: messagesUncheckedCreateNestedManyWithoutUsersInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutUsersInput
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
    resources?: resourcesUncheckedCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutUsersInput
    tasks?: tasksUncheckedCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersCreateOrConnectWithoutTeam_membersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutTeam_membersInput, usersUncheckedCreateWithoutTeam_membersInput>
  }

  export type teamsUpsertWithoutTeam_membersInput = {
    update: XOR<teamsUpdateWithoutTeam_membersInput, teamsUncheckedUpdateWithoutTeam_membersInput>
    create: XOR<teamsCreateWithoutTeam_membersInput, teamsUncheckedCreateWithoutTeam_membersInput>
    where?: teamsWhereInput
  }

  export type teamsUpdateToOneWithWhereWithoutTeam_membersInput = {
    where?: teamsWhereInput
    data: XOR<teamsUpdateWithoutTeam_membersInput, teamsUncheckedUpdateWithoutTeam_membersInput>
  }

  export type teamsUpdateWithoutTeam_membersInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channels?: channelsUpdateManyWithoutTeamsNestedInput
    projects?: projectsUpdateManyWithoutTeamsNestedInput
    reports?: reportsUpdateManyWithoutTeamsNestedInput
    resources?: resourcesUpdateManyWithoutTeamsNestedInput
  }

  export type teamsUncheckedUpdateWithoutTeam_membersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channels?: channelsUncheckedUpdateManyWithoutTeamsNestedInput
    projects?: projectsUncheckedUpdateManyWithoutTeamsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutTeamsNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type usersUpsertWithoutTeam_membersInput = {
    update: XOR<usersUpdateWithoutTeam_membersInput, usersUncheckedUpdateWithoutTeam_membersInput>
    create: XOR<usersCreateWithoutTeam_membersInput, usersUncheckedCreateWithoutTeam_membersInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutTeam_membersInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutTeam_membersInput, usersUncheckedUpdateWithoutTeam_membersInput>
  }

  export type usersUpdateWithoutTeam_membersInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUpdateManyWithoutUsersNestedInput
    messages?: messagesUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUpdateManyWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
    resources?: resourcesUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutUsersNestedInput
    tasks?: tasksUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUncheckedUpdateWithoutTeam_membersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUncheckedUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUncheckedUpdateManyWithoutUsersNestedInput
    messages?: messagesUncheckedUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutUsersNestedInput
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutUsersNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type channelsCreateWithoutTeamsInput = {
    name: string
    type?: $Enums.channels_type | null
    channel_members?: channel_membersCreateNestedManyWithoutChannelsInput
    messages?: messagesCreateNestedManyWithoutChannelsInput
  }

  export type channelsUncheckedCreateWithoutTeamsInput = {
    id?: number
    name: string
    type?: $Enums.channels_type | null
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutChannelsInput
    messages?: messagesUncheckedCreateNestedManyWithoutChannelsInput
  }

  export type channelsCreateOrConnectWithoutTeamsInput = {
    where: channelsWhereUniqueInput
    create: XOR<channelsCreateWithoutTeamsInput, channelsUncheckedCreateWithoutTeamsInput>
  }

  export type channelsCreateManyTeamsInputEnvelope = {
    data: channelsCreateManyTeamsInput | channelsCreateManyTeamsInput[]
    skipDuplicates?: boolean
  }

  export type projectsCreateWithoutTeamsInput = {
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsCreateNestedManyWithoutProjectsInput
    contracts?: contractsCreateNestedManyWithoutProjectsInput
    costs?: costsCreateNestedManyWithoutProjectsInput
    documents?: documentsCreateNestedManyWithoutProjectsInput
    events?: eventsCreateNestedManyWithoutProjectsInput
    leads?: leadsCreateNestedManyWithoutProjectsInput
    permissions?: permissionsCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesCreateNestedManyWithoutProjectsInput
    reports?: reportsCreateNestedManyWithoutProjectsInput
    sprints?: sprintsCreateNestedManyWithoutProjectsInput
    tasks?: tasksCreateNestedManyWithoutProjectsInput
    tickets?: ticketsCreateNestedManyWithoutProjectsInput
  }

  export type projectsUncheckedCreateWithoutTeamsInput = {
    id?: number
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsUncheckedCreateNestedManyWithoutProjectsInput
    contracts?: contractsUncheckedCreateNestedManyWithoutProjectsInput
    costs?: costsUncheckedCreateNestedManyWithoutProjectsInput
    documents?: documentsUncheckedCreateNestedManyWithoutProjectsInput
    events?: eventsUncheckedCreateNestedManyWithoutProjectsInput
    leads?: leadsUncheckedCreateNestedManyWithoutProjectsInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutProjectsInput
    reports?: reportsUncheckedCreateNestedManyWithoutProjectsInput
    sprints?: sprintsUncheckedCreateNestedManyWithoutProjectsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutProjectsInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutTeamsInput = {
    where: projectsWhereUniqueInput
    create: XOR<projectsCreateWithoutTeamsInput, projectsUncheckedCreateWithoutTeamsInput>
  }

  export type projectsCreateManyTeamsInputEnvelope = {
    data: projectsCreateManyTeamsInput | projectsCreateManyTeamsInput[]
    skipDuplicates?: boolean
  }

  export type reportsCreateWithoutTeamsInput = {
    type?: $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
    projects?: projectsCreateNestedOneWithoutReportsInput
    users?: usersCreateNestedOneWithoutReportsInput
  }

  export type reportsUncheckedCreateWithoutTeamsInput = {
    id?: number
    project_id?: number | null
    user_id?: number | null
    type?: $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
  }

  export type reportsCreateOrConnectWithoutTeamsInput = {
    where: reportsWhereUniqueInput
    create: XOR<reportsCreateWithoutTeamsInput, reportsUncheckedCreateWithoutTeamsInput>
  }

  export type reportsCreateManyTeamsInputEnvelope = {
    data: reportsCreateManyTeamsInput | reportsCreateManyTeamsInput[]
    skipDuplicates?: boolean
  }

  export type resourcesCreateWithoutTeamsInput = {
    name: string
    type?: $Enums.resources_type | null
    availability?: $Enums.resources_availability | null
    project_resources?: project_resourcesCreateNestedManyWithoutResourcesInput
    users?: usersCreateNestedOneWithoutResourcesInput
  }

  export type resourcesUncheckedCreateWithoutTeamsInput = {
    id?: number
    name: string
    type?: $Enums.resources_type | null
    user_id?: number | null
    availability?: $Enums.resources_availability | null
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutResourcesInput
  }

  export type resourcesCreateOrConnectWithoutTeamsInput = {
    where: resourcesWhereUniqueInput
    create: XOR<resourcesCreateWithoutTeamsInput, resourcesUncheckedCreateWithoutTeamsInput>
  }

  export type resourcesCreateManyTeamsInputEnvelope = {
    data: resourcesCreateManyTeamsInput | resourcesCreateManyTeamsInput[]
    skipDuplicates?: boolean
  }

  export type team_membersCreateWithoutTeamsInput = {
    role?: $Enums.team_members_role | null
    users: usersCreateNestedOneWithoutTeam_membersInput
  }

  export type team_membersUncheckedCreateWithoutTeamsInput = {
    id?: number
    user_id: number
    role?: $Enums.team_members_role | null
  }

  export type team_membersCreateOrConnectWithoutTeamsInput = {
    where: team_membersWhereUniqueInput
    create: XOR<team_membersCreateWithoutTeamsInput, team_membersUncheckedCreateWithoutTeamsInput>
  }

  export type team_membersCreateManyTeamsInputEnvelope = {
    data: team_membersCreateManyTeamsInput | team_membersCreateManyTeamsInput[]
    skipDuplicates?: boolean
  }

  export type channelsUpsertWithWhereUniqueWithoutTeamsInput = {
    where: channelsWhereUniqueInput
    update: XOR<channelsUpdateWithoutTeamsInput, channelsUncheckedUpdateWithoutTeamsInput>
    create: XOR<channelsCreateWithoutTeamsInput, channelsUncheckedCreateWithoutTeamsInput>
  }

  export type channelsUpdateWithWhereUniqueWithoutTeamsInput = {
    where: channelsWhereUniqueInput
    data: XOR<channelsUpdateWithoutTeamsInput, channelsUncheckedUpdateWithoutTeamsInput>
  }

  export type channelsUpdateManyWithWhereWithoutTeamsInput = {
    where: channelsScalarWhereInput
    data: XOR<channelsUpdateManyMutationInput, channelsUncheckedUpdateManyWithoutTeamsInput>
  }

  export type channelsScalarWhereInput = {
    AND?: channelsScalarWhereInput | channelsScalarWhereInput[]
    OR?: channelsScalarWhereInput[]
    NOT?: channelsScalarWhereInput | channelsScalarWhereInput[]
    id?: IntFilter<"channels"> | number
    team_id?: IntNullableFilter<"channels"> | number | null
    name?: StringFilter<"channels"> | string
    type?: Enumchannels_typeNullableFilter<"channels"> | $Enums.channels_type | null
  }

  export type projectsUpsertWithWhereUniqueWithoutTeamsInput = {
    where: projectsWhereUniqueInput
    update: XOR<projectsUpdateWithoutTeamsInput, projectsUncheckedUpdateWithoutTeamsInput>
    create: XOR<projectsCreateWithoutTeamsInput, projectsUncheckedCreateWithoutTeamsInput>
  }

  export type projectsUpdateWithWhereUniqueWithoutTeamsInput = {
    where: projectsWhereUniqueInput
    data: XOR<projectsUpdateWithoutTeamsInput, projectsUncheckedUpdateWithoutTeamsInput>
  }

  export type projectsUpdateManyWithWhereWithoutTeamsInput = {
    where: projectsScalarWhereInput
    data: XOR<projectsUpdateManyMutationInput, projectsUncheckedUpdateManyWithoutTeamsInput>
  }

  export type projectsScalarWhereInput = {
    AND?: projectsScalarWhereInput | projectsScalarWhereInput[]
    OR?: projectsScalarWhereInput[]
    NOT?: projectsScalarWhereInput | projectsScalarWhereInput[]
    id?: IntFilter<"projects"> | number
    team_id?: IntNullableFilter<"projects"> | number | null
    name?: StringFilter<"projects"> | string
    description?: StringNullableFilter<"projects"> | string | null
    status?: Enumprojects_statusNullableFilter<"projects"> | $Enums.projects_status | null
    start_date?: DateTimeNullableFilter<"projects"> | Date | string | null
    end_date?: DateTimeNullableFilter<"projects"> | Date | string | null
    created_at?: DateTimeNullableFilter<"projects"> | Date | string | null
  }

  export type reportsUpsertWithWhereUniqueWithoutTeamsInput = {
    where: reportsWhereUniqueInput
    update: XOR<reportsUpdateWithoutTeamsInput, reportsUncheckedUpdateWithoutTeamsInput>
    create: XOR<reportsCreateWithoutTeamsInput, reportsUncheckedCreateWithoutTeamsInput>
  }

  export type reportsUpdateWithWhereUniqueWithoutTeamsInput = {
    where: reportsWhereUniqueInput
    data: XOR<reportsUpdateWithoutTeamsInput, reportsUncheckedUpdateWithoutTeamsInput>
  }

  export type reportsUpdateManyWithWhereWithoutTeamsInput = {
    where: reportsScalarWhereInput
    data: XOR<reportsUpdateManyMutationInput, reportsUncheckedUpdateManyWithoutTeamsInput>
  }

  export type resourcesUpsertWithWhereUniqueWithoutTeamsInput = {
    where: resourcesWhereUniqueInput
    update: XOR<resourcesUpdateWithoutTeamsInput, resourcesUncheckedUpdateWithoutTeamsInput>
    create: XOR<resourcesCreateWithoutTeamsInput, resourcesUncheckedCreateWithoutTeamsInput>
  }

  export type resourcesUpdateWithWhereUniqueWithoutTeamsInput = {
    where: resourcesWhereUniqueInput
    data: XOR<resourcesUpdateWithoutTeamsInput, resourcesUncheckedUpdateWithoutTeamsInput>
  }

  export type resourcesUpdateManyWithWhereWithoutTeamsInput = {
    where: resourcesScalarWhereInput
    data: XOR<resourcesUpdateManyMutationInput, resourcesUncheckedUpdateManyWithoutTeamsInput>
  }

  export type resourcesScalarWhereInput = {
    AND?: resourcesScalarWhereInput | resourcesScalarWhereInput[]
    OR?: resourcesScalarWhereInput[]
    NOT?: resourcesScalarWhereInput | resourcesScalarWhereInput[]
    id?: IntFilter<"resources"> | number
    name?: StringFilter<"resources"> | string
    type?: Enumresources_typeNullableFilter<"resources"> | $Enums.resources_type | null
    user_id?: IntNullableFilter<"resources"> | number | null
    team_id?: IntNullableFilter<"resources"> | number | null
    availability?: Enumresources_availabilityNullableFilter<"resources"> | $Enums.resources_availability | null
  }

  export type team_membersUpsertWithWhereUniqueWithoutTeamsInput = {
    where: team_membersWhereUniqueInput
    update: XOR<team_membersUpdateWithoutTeamsInput, team_membersUncheckedUpdateWithoutTeamsInput>
    create: XOR<team_membersCreateWithoutTeamsInput, team_membersUncheckedCreateWithoutTeamsInput>
  }

  export type team_membersUpdateWithWhereUniqueWithoutTeamsInput = {
    where: team_membersWhereUniqueInput
    data: XOR<team_membersUpdateWithoutTeamsInput, team_membersUncheckedUpdateWithoutTeamsInput>
  }

  export type team_membersUpdateManyWithWhereWithoutTeamsInput = {
    where: team_membersScalarWhereInput
    data: XOR<team_membersUpdateManyMutationInput, team_membersUncheckedUpdateManyWithoutTeamsInput>
  }

  export type team_membersScalarWhereInput = {
    AND?: team_membersScalarWhereInput | team_membersScalarWhereInput[]
    OR?: team_membersScalarWhereInput[]
    NOT?: team_membersScalarWhereInput | team_membersScalarWhereInput[]
    id?: IntFilter<"team_members"> | number
    team_id?: IntFilter<"team_members"> | number
    user_id?: IntFilter<"team_members"> | number
    role?: Enumteam_members_roleNullableFilter<"team_members"> | $Enums.team_members_role | null
  }

  export type ticketsCreateWithoutTicket_commentsInput = {
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    ticket_history?: ticket_historyCreateNestedManyWithoutTicketsInput
    ticket_workflow?: ticket_workflowCreateNestedManyWithoutTicketsInput
    projects?: projectsCreateNestedOneWithoutTicketsInput
    users_tickets_created_byTousers?: usersCreateNestedOneWithoutTickets_tickets_created_byTousersInput
    users_tickets_assigned_toTousers?: usersCreateNestedOneWithoutTickets_tickets_assigned_toTousersInput
  }

  export type ticketsUncheckedCreateWithoutTicket_commentsInput = {
    id?: number
    project_id?: number | null
    created_by?: number | null
    assigned_to?: number | null
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutTicketsInput
    ticket_workflow?: ticket_workflowUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type ticketsCreateOrConnectWithoutTicket_commentsInput = {
    where: ticketsWhereUniqueInput
    create: XOR<ticketsCreateWithoutTicket_commentsInput, ticketsUncheckedCreateWithoutTicket_commentsInput>
  }

  export type usersCreateWithoutTicket_commentsInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsCreateNestedManyWithoutUsersInput
    messages?: messagesCreateNestedManyWithoutUsersInput
    permissions?: permissionsCreateNestedManyWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
    resources?: resourcesCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesCreateNestedManyWithoutUsersInput
    tasks?: tasksCreateNestedManyWithoutUsersInput
    team_members?: team_membersCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUncheckedCreateWithoutTicket_commentsInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsUncheckedCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsUncheckedCreateNestedManyWithoutUsersInput
    messages?: messagesUncheckedCreateNestedManyWithoutUsersInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutUsersInput
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
    resources?: resourcesUncheckedCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutUsersInput
    tasks?: tasksUncheckedCreateNestedManyWithoutUsersInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersCreateOrConnectWithoutTicket_commentsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutTicket_commentsInput, usersUncheckedCreateWithoutTicket_commentsInput>
  }

  export type ticketsUpsertWithoutTicket_commentsInput = {
    update: XOR<ticketsUpdateWithoutTicket_commentsInput, ticketsUncheckedUpdateWithoutTicket_commentsInput>
    create: XOR<ticketsCreateWithoutTicket_commentsInput, ticketsUncheckedCreateWithoutTicket_commentsInput>
    where?: ticketsWhereInput
  }

  export type ticketsUpdateToOneWithWhereWithoutTicket_commentsInput = {
    where?: ticketsWhereInput
    data: XOR<ticketsUpdateWithoutTicket_commentsInput, ticketsUncheckedUpdateWithoutTicket_commentsInput>
  }

  export type ticketsUpdateWithoutTicket_commentsInput = {
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_history?: ticket_historyUpdateManyWithoutTicketsNestedInput
    ticket_workflow?: ticket_workflowUpdateManyWithoutTicketsNestedInput
    projects?: projectsUpdateOneWithoutTicketsNestedInput
    users_tickets_created_byTousers?: usersUpdateOneWithoutTickets_tickets_created_byTousersNestedInput
    users_tickets_assigned_toTousers?: usersUpdateOneWithoutTickets_tickets_assigned_toTousersNestedInput
  }

  export type ticketsUncheckedUpdateWithoutTicket_commentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    assigned_to?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutTicketsNestedInput
    ticket_workflow?: ticket_workflowUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type usersUpsertWithoutTicket_commentsInput = {
    update: XOR<usersUpdateWithoutTicket_commentsInput, usersUncheckedUpdateWithoutTicket_commentsInput>
    create: XOR<usersCreateWithoutTicket_commentsInput, usersUncheckedCreateWithoutTicket_commentsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutTicket_commentsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutTicket_commentsInput, usersUncheckedUpdateWithoutTicket_commentsInput>
  }

  export type usersUpdateWithoutTicket_commentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUpdateManyWithoutUsersNestedInput
    messages?: messagesUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUpdateManyWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
    resources?: resourcesUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutUsersNestedInput
    tasks?: tasksUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUncheckedUpdateWithoutTicket_commentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUncheckedUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUncheckedUpdateManyWithoutUsersNestedInput
    messages?: messagesUncheckedUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutUsersNestedInput
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutUsersNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type ticketsCreateWithoutTicket_historyInput = {
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    ticket_comments?: ticket_commentsCreateNestedManyWithoutTicketsInput
    ticket_workflow?: ticket_workflowCreateNestedManyWithoutTicketsInput
    projects?: projectsCreateNestedOneWithoutTicketsInput
    users_tickets_created_byTousers?: usersCreateNestedOneWithoutTickets_tickets_created_byTousersInput
    users_tickets_assigned_toTousers?: usersCreateNestedOneWithoutTickets_tickets_assigned_toTousersInput
  }

  export type ticketsUncheckedCreateWithoutTicket_historyInput = {
    id?: number
    project_id?: number | null
    created_by?: number | null
    assigned_to?: number | null
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutTicketsInput
    ticket_workflow?: ticket_workflowUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type ticketsCreateOrConnectWithoutTicket_historyInput = {
    where: ticketsWhereUniqueInput
    create: XOR<ticketsCreateWithoutTicket_historyInput, ticketsUncheckedCreateWithoutTicket_historyInput>
  }

  export type usersCreateWithoutTicket_historyInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsCreateNestedManyWithoutUsersInput
    messages?: messagesCreateNestedManyWithoutUsersInput
    permissions?: permissionsCreateNestedManyWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
    resources?: resourcesCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesCreateNestedManyWithoutUsersInput
    tasks?: tasksCreateNestedManyWithoutUsersInput
    team_members?: team_membersCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUncheckedCreateWithoutTicket_historyInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsUncheckedCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsUncheckedCreateNestedManyWithoutUsersInput
    messages?: messagesUncheckedCreateNestedManyWithoutUsersInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutUsersInput
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
    resources?: resourcesUncheckedCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutUsersInput
    tasks?: tasksUncheckedCreateNestedManyWithoutUsersInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersCreateOrConnectWithoutTicket_historyInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutTicket_historyInput, usersUncheckedCreateWithoutTicket_historyInput>
  }

  export type ticketsUpsertWithoutTicket_historyInput = {
    update: XOR<ticketsUpdateWithoutTicket_historyInput, ticketsUncheckedUpdateWithoutTicket_historyInput>
    create: XOR<ticketsCreateWithoutTicket_historyInput, ticketsUncheckedCreateWithoutTicket_historyInput>
    where?: ticketsWhereInput
  }

  export type ticketsUpdateToOneWithWhereWithoutTicket_historyInput = {
    where?: ticketsWhereInput
    data: XOR<ticketsUpdateWithoutTicket_historyInput, ticketsUncheckedUpdateWithoutTicket_historyInput>
  }

  export type ticketsUpdateWithoutTicket_historyInput = {
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_comments?: ticket_commentsUpdateManyWithoutTicketsNestedInput
    ticket_workflow?: ticket_workflowUpdateManyWithoutTicketsNestedInput
    projects?: projectsUpdateOneWithoutTicketsNestedInput
    users_tickets_created_byTousers?: usersUpdateOneWithoutTickets_tickets_created_byTousersNestedInput
    users_tickets_assigned_toTousers?: usersUpdateOneWithoutTickets_tickets_assigned_toTousersNestedInput
  }

  export type ticketsUncheckedUpdateWithoutTicket_historyInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    assigned_to?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutTicketsNestedInput
    ticket_workflow?: ticket_workflowUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type usersUpsertWithoutTicket_historyInput = {
    update: XOR<usersUpdateWithoutTicket_historyInput, usersUncheckedUpdateWithoutTicket_historyInput>
    create: XOR<usersCreateWithoutTicket_historyInput, usersUncheckedCreateWithoutTicket_historyInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutTicket_historyInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutTicket_historyInput, usersUncheckedUpdateWithoutTicket_historyInput>
  }

  export type usersUpdateWithoutTicket_historyInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUpdateManyWithoutUsersNestedInput
    messages?: messagesUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUpdateManyWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
    resources?: resourcesUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutUsersNestedInput
    tasks?: tasksUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUncheckedUpdateWithoutTicket_historyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUncheckedUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUncheckedUpdateManyWithoutUsersNestedInput
    messages?: messagesUncheckedUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutUsersNestedInput
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutUsersNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type ticketsCreateWithoutTicket_workflowInput = {
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    ticket_comments?: ticket_commentsCreateNestedManyWithoutTicketsInput
    ticket_history?: ticket_historyCreateNestedManyWithoutTicketsInput
    projects?: projectsCreateNestedOneWithoutTicketsInput
    users_tickets_created_byTousers?: usersCreateNestedOneWithoutTickets_tickets_created_byTousersInput
    users_tickets_assigned_toTousers?: usersCreateNestedOneWithoutTickets_tickets_assigned_toTousersInput
  }

  export type ticketsUncheckedCreateWithoutTicket_workflowInput = {
    id?: number
    project_id?: number | null
    created_by?: number | null
    assigned_to?: number | null
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutTicketsInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type ticketsCreateOrConnectWithoutTicket_workflowInput = {
    where: ticketsWhereUniqueInput
    create: XOR<ticketsCreateWithoutTicket_workflowInput, ticketsUncheckedCreateWithoutTicket_workflowInput>
  }

  export type workflowsCreateWithoutTicket_workflowInput = {
    name: string
    description?: string | null
    workflow_steps?: workflow_stepsCreateNestedManyWithoutWorkflowsInput
  }

  export type workflowsUncheckedCreateWithoutTicket_workflowInput = {
    id?: number
    name: string
    description?: string | null
    workflow_steps?: workflow_stepsUncheckedCreateNestedManyWithoutWorkflowsInput
  }

  export type workflowsCreateOrConnectWithoutTicket_workflowInput = {
    where: workflowsWhereUniqueInput
    create: XOR<workflowsCreateWithoutTicket_workflowInput, workflowsUncheckedCreateWithoutTicket_workflowInput>
  }

  export type workflow_stepsCreateWithoutTicket_workflowInput = {
    step_order: number
    name: string
    action?: string | null
    workflows: workflowsCreateNestedOneWithoutWorkflow_stepsInput
  }

  export type workflow_stepsUncheckedCreateWithoutTicket_workflowInput = {
    id?: number
    workflow_id: number
    step_order: number
    name: string
    action?: string | null
  }

  export type workflow_stepsCreateOrConnectWithoutTicket_workflowInput = {
    where: workflow_stepsWhereUniqueInput
    create: XOR<workflow_stepsCreateWithoutTicket_workflowInput, workflow_stepsUncheckedCreateWithoutTicket_workflowInput>
  }

  export type ticketsUpsertWithoutTicket_workflowInput = {
    update: XOR<ticketsUpdateWithoutTicket_workflowInput, ticketsUncheckedUpdateWithoutTicket_workflowInput>
    create: XOR<ticketsCreateWithoutTicket_workflowInput, ticketsUncheckedCreateWithoutTicket_workflowInput>
    where?: ticketsWhereInput
  }

  export type ticketsUpdateToOneWithWhereWithoutTicket_workflowInput = {
    where?: ticketsWhereInput
    data: XOR<ticketsUpdateWithoutTicket_workflowInput, ticketsUncheckedUpdateWithoutTicket_workflowInput>
  }

  export type ticketsUpdateWithoutTicket_workflowInput = {
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_comments?: ticket_commentsUpdateManyWithoutTicketsNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutTicketsNestedInput
    projects?: projectsUpdateOneWithoutTicketsNestedInput
    users_tickets_created_byTousers?: usersUpdateOneWithoutTickets_tickets_created_byTousersNestedInput
    users_tickets_assigned_toTousers?: usersUpdateOneWithoutTickets_tickets_assigned_toTousersNestedInput
  }

  export type ticketsUncheckedUpdateWithoutTicket_workflowInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    assigned_to?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutTicketsNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type workflowsUpsertWithoutTicket_workflowInput = {
    update: XOR<workflowsUpdateWithoutTicket_workflowInput, workflowsUncheckedUpdateWithoutTicket_workflowInput>
    create: XOR<workflowsCreateWithoutTicket_workflowInput, workflowsUncheckedCreateWithoutTicket_workflowInput>
    where?: workflowsWhereInput
  }

  export type workflowsUpdateToOneWithWhereWithoutTicket_workflowInput = {
    where?: workflowsWhereInput
    data: XOR<workflowsUpdateWithoutTicket_workflowInput, workflowsUncheckedUpdateWithoutTicket_workflowInput>
  }

  export type workflowsUpdateWithoutTicket_workflowInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    workflow_steps?: workflow_stepsUpdateManyWithoutWorkflowsNestedInput
  }

  export type workflowsUncheckedUpdateWithoutTicket_workflowInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    workflow_steps?: workflow_stepsUncheckedUpdateManyWithoutWorkflowsNestedInput
  }

  export type workflow_stepsUpsertWithoutTicket_workflowInput = {
    update: XOR<workflow_stepsUpdateWithoutTicket_workflowInput, workflow_stepsUncheckedUpdateWithoutTicket_workflowInput>
    create: XOR<workflow_stepsCreateWithoutTicket_workflowInput, workflow_stepsUncheckedCreateWithoutTicket_workflowInput>
    where?: workflow_stepsWhereInput
  }

  export type workflow_stepsUpdateToOneWithWhereWithoutTicket_workflowInput = {
    where?: workflow_stepsWhereInput
    data: XOR<workflow_stepsUpdateWithoutTicket_workflowInput, workflow_stepsUncheckedUpdateWithoutTicket_workflowInput>
  }

  export type workflow_stepsUpdateWithoutTicket_workflowInput = {
    step_order?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: workflowsUpdateOneRequiredWithoutWorkflow_stepsNestedInput
  }

  export type workflow_stepsUncheckedUpdateWithoutTicket_workflowInput = {
    id?: IntFieldUpdateOperationsInput | number
    workflow_id?: IntFieldUpdateOperationsInput | number
    step_order?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ticket_commentsCreateWithoutTicketsInput = {
    comment: string
    created_at?: Date | string | null
    users: usersCreateNestedOneWithoutTicket_commentsInput
  }

  export type ticket_commentsUncheckedCreateWithoutTicketsInput = {
    id?: number
    user_id: number
    comment: string
    created_at?: Date | string | null
  }

  export type ticket_commentsCreateOrConnectWithoutTicketsInput = {
    where: ticket_commentsWhereUniqueInput
    create: XOR<ticket_commentsCreateWithoutTicketsInput, ticket_commentsUncheckedCreateWithoutTicketsInput>
  }

  export type ticket_commentsCreateManyTicketsInputEnvelope = {
    data: ticket_commentsCreateManyTicketsInput | ticket_commentsCreateManyTicketsInput[]
    skipDuplicates?: boolean
  }

  export type ticket_historyCreateWithoutTicketsInput = {
    action: string
    performed_at?: Date | string | null
    details?: string | null
    users?: usersCreateNestedOneWithoutTicket_historyInput
  }

  export type ticket_historyUncheckedCreateWithoutTicketsInput = {
    id?: number
    action: string
    performed_by?: number | null
    performed_at?: Date | string | null
    details?: string | null
  }

  export type ticket_historyCreateOrConnectWithoutTicketsInput = {
    where: ticket_historyWhereUniqueInput
    create: XOR<ticket_historyCreateWithoutTicketsInput, ticket_historyUncheckedCreateWithoutTicketsInput>
  }

  export type ticket_historyCreateManyTicketsInputEnvelope = {
    data: ticket_historyCreateManyTicketsInput | ticket_historyCreateManyTicketsInput[]
    skipDuplicates?: boolean
  }

  export type ticket_workflowCreateWithoutTicketsInput = {
    workflows: workflowsCreateNestedOneWithoutTicket_workflowInput
    workflow_steps?: workflow_stepsCreateNestedOneWithoutTicket_workflowInput
  }

  export type ticket_workflowUncheckedCreateWithoutTicketsInput = {
    id?: number
    workflow_id: number
    current_step?: number | null
  }

  export type ticket_workflowCreateOrConnectWithoutTicketsInput = {
    where: ticket_workflowWhereUniqueInput
    create: XOR<ticket_workflowCreateWithoutTicketsInput, ticket_workflowUncheckedCreateWithoutTicketsInput>
  }

  export type ticket_workflowCreateManyTicketsInputEnvelope = {
    data: ticket_workflowCreateManyTicketsInput | ticket_workflowCreateManyTicketsInput[]
    skipDuplicates?: boolean
  }

  export type projectsCreateWithoutTicketsInput = {
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsCreateNestedManyWithoutProjectsInput
    contracts?: contractsCreateNestedManyWithoutProjectsInput
    costs?: costsCreateNestedManyWithoutProjectsInput
    documents?: documentsCreateNestedManyWithoutProjectsInput
    events?: eventsCreateNestedManyWithoutProjectsInput
    leads?: leadsCreateNestedManyWithoutProjectsInput
    permissions?: permissionsCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesCreateNestedManyWithoutProjectsInput
    teams?: teamsCreateNestedOneWithoutProjectsInput
    reports?: reportsCreateNestedManyWithoutProjectsInput
    sprints?: sprintsCreateNestedManyWithoutProjectsInput
    tasks?: tasksCreateNestedManyWithoutProjectsInput
  }

  export type projectsUncheckedCreateWithoutTicketsInput = {
    id?: number
    team_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
    budgets?: budgetsUncheckedCreateNestedManyWithoutProjectsInput
    contracts?: contractsUncheckedCreateNestedManyWithoutProjectsInput
    costs?: costsUncheckedCreateNestedManyWithoutProjectsInput
    documents?: documentsUncheckedCreateNestedManyWithoutProjectsInput
    events?: eventsUncheckedCreateNestedManyWithoutProjectsInput
    leads?: leadsUncheckedCreateNestedManyWithoutProjectsInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutProjectsInput
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutProjectsInput
    reports?: reportsUncheckedCreateNestedManyWithoutProjectsInput
    sprints?: sprintsUncheckedCreateNestedManyWithoutProjectsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutTicketsInput = {
    where: projectsWhereUniqueInput
    create: XOR<projectsCreateWithoutTicketsInput, projectsUncheckedCreateWithoutTicketsInput>
  }

  export type usersCreateWithoutTickets_tickets_created_byTousersInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsCreateNestedManyWithoutUsersInput
    messages?: messagesCreateNestedManyWithoutUsersInput
    permissions?: permissionsCreateNestedManyWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
    resources?: resourcesCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesCreateNestedManyWithoutUsersInput
    tasks?: tasksCreateNestedManyWithoutUsersInput
    team_members?: team_membersCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyCreateNestedManyWithoutUsersInput
    tickets_tickets_assigned_toTousers?: ticketsCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersUncheckedCreateWithoutTickets_tickets_created_byTousersInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsUncheckedCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsUncheckedCreateNestedManyWithoutUsersInput
    messages?: messagesUncheckedCreateNestedManyWithoutUsersInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutUsersInput
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
    resources?: resourcesUncheckedCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutUsersInput
    tasks?: tasksUncheckedCreateNestedManyWithoutUsersInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_assigned_toTousersInput
  }

  export type usersCreateOrConnectWithoutTickets_tickets_created_byTousersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutTickets_tickets_created_byTousersInput, usersUncheckedCreateWithoutTickets_tickets_created_byTousersInput>
  }

  export type usersCreateWithoutTickets_tickets_assigned_toTousersInput = {
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsCreateNestedManyWithoutUsersInput
    messages?: messagesCreateNestedManyWithoutUsersInput
    permissions?: permissionsCreateNestedManyWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
    resources?: resourcesCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesCreateNestedManyWithoutUsersInput
    tasks?: tasksCreateNestedManyWithoutUsersInput
    team_members?: team_membersCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsCreateNestedManyWithoutUsers_tickets_created_byTousersInput
  }

  export type usersUncheckedCreateWithoutTickets_tickets_assigned_toTousersInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    avatar?: string | null
    role?: $Enums.users_role | null
    created_at?: Date | string | null
    last_name: string
    assets?: assetsUncheckedCreateNestedManyWithoutUsersInput
    channel_members?: channel_membersUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    hr_records?: hr_recordsUncheckedCreateNestedManyWithoutUsersInput
    messages?: messagesUncheckedCreateNestedManyWithoutUsersInput
    permissions?: permissionsUncheckedCreateNestedManyWithoutUsersInput
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
    resources?: resourcesUncheckedCreateNestedManyWithoutUsersInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutUsersInput
    tasks?: tasksUncheckedCreateNestedManyWithoutUsersInput
    team_members?: team_membersUncheckedCreateNestedManyWithoutUsersInput
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutUsersInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutUsersInput
    tickets_tickets_created_byTousers?: ticketsUncheckedCreateNestedManyWithoutUsers_tickets_created_byTousersInput
  }

  export type usersCreateOrConnectWithoutTickets_tickets_assigned_toTousersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutTickets_tickets_assigned_toTousersInput, usersUncheckedCreateWithoutTickets_tickets_assigned_toTousersInput>
  }

  export type ticket_commentsUpsertWithWhereUniqueWithoutTicketsInput = {
    where: ticket_commentsWhereUniqueInput
    update: XOR<ticket_commentsUpdateWithoutTicketsInput, ticket_commentsUncheckedUpdateWithoutTicketsInput>
    create: XOR<ticket_commentsCreateWithoutTicketsInput, ticket_commentsUncheckedCreateWithoutTicketsInput>
  }

  export type ticket_commentsUpdateWithWhereUniqueWithoutTicketsInput = {
    where: ticket_commentsWhereUniqueInput
    data: XOR<ticket_commentsUpdateWithoutTicketsInput, ticket_commentsUncheckedUpdateWithoutTicketsInput>
  }

  export type ticket_commentsUpdateManyWithWhereWithoutTicketsInput = {
    where: ticket_commentsScalarWhereInput
    data: XOR<ticket_commentsUpdateManyMutationInput, ticket_commentsUncheckedUpdateManyWithoutTicketsInput>
  }

  export type ticket_commentsScalarWhereInput = {
    AND?: ticket_commentsScalarWhereInput | ticket_commentsScalarWhereInput[]
    OR?: ticket_commentsScalarWhereInput[]
    NOT?: ticket_commentsScalarWhereInput | ticket_commentsScalarWhereInput[]
    id?: IntFilter<"ticket_comments"> | number
    ticket_id?: IntFilter<"ticket_comments"> | number
    user_id?: IntFilter<"ticket_comments"> | number
    comment?: StringFilter<"ticket_comments"> | string
    created_at?: DateTimeNullableFilter<"ticket_comments"> | Date | string | null
  }

  export type ticket_historyUpsertWithWhereUniqueWithoutTicketsInput = {
    where: ticket_historyWhereUniqueInput
    update: XOR<ticket_historyUpdateWithoutTicketsInput, ticket_historyUncheckedUpdateWithoutTicketsInput>
    create: XOR<ticket_historyCreateWithoutTicketsInput, ticket_historyUncheckedCreateWithoutTicketsInput>
  }

  export type ticket_historyUpdateWithWhereUniqueWithoutTicketsInput = {
    where: ticket_historyWhereUniqueInput
    data: XOR<ticket_historyUpdateWithoutTicketsInput, ticket_historyUncheckedUpdateWithoutTicketsInput>
  }

  export type ticket_historyUpdateManyWithWhereWithoutTicketsInput = {
    where: ticket_historyScalarWhereInput
    data: XOR<ticket_historyUpdateManyMutationInput, ticket_historyUncheckedUpdateManyWithoutTicketsInput>
  }

  export type ticket_historyScalarWhereInput = {
    AND?: ticket_historyScalarWhereInput | ticket_historyScalarWhereInput[]
    OR?: ticket_historyScalarWhereInput[]
    NOT?: ticket_historyScalarWhereInput | ticket_historyScalarWhereInput[]
    id?: IntFilter<"ticket_history"> | number
    ticket_id?: IntFilter<"ticket_history"> | number
    action?: StringFilter<"ticket_history"> | string
    performed_by?: IntNullableFilter<"ticket_history"> | number | null
    performed_at?: DateTimeNullableFilter<"ticket_history"> | Date | string | null
    details?: StringNullableFilter<"ticket_history"> | string | null
  }

  export type ticket_workflowUpsertWithWhereUniqueWithoutTicketsInput = {
    where: ticket_workflowWhereUniqueInput
    update: XOR<ticket_workflowUpdateWithoutTicketsInput, ticket_workflowUncheckedUpdateWithoutTicketsInput>
    create: XOR<ticket_workflowCreateWithoutTicketsInput, ticket_workflowUncheckedCreateWithoutTicketsInput>
  }

  export type ticket_workflowUpdateWithWhereUniqueWithoutTicketsInput = {
    where: ticket_workflowWhereUniqueInput
    data: XOR<ticket_workflowUpdateWithoutTicketsInput, ticket_workflowUncheckedUpdateWithoutTicketsInput>
  }

  export type ticket_workflowUpdateManyWithWhereWithoutTicketsInput = {
    where: ticket_workflowScalarWhereInput
    data: XOR<ticket_workflowUpdateManyMutationInput, ticket_workflowUncheckedUpdateManyWithoutTicketsInput>
  }

  export type ticket_workflowScalarWhereInput = {
    AND?: ticket_workflowScalarWhereInput | ticket_workflowScalarWhereInput[]
    OR?: ticket_workflowScalarWhereInput[]
    NOT?: ticket_workflowScalarWhereInput | ticket_workflowScalarWhereInput[]
    id?: IntFilter<"ticket_workflow"> | number
    ticket_id?: IntFilter<"ticket_workflow"> | number
    workflow_id?: IntFilter<"ticket_workflow"> | number
    current_step?: IntNullableFilter<"ticket_workflow"> | number | null
  }

  export type projectsUpsertWithoutTicketsInput = {
    update: XOR<projectsUpdateWithoutTicketsInput, projectsUncheckedUpdateWithoutTicketsInput>
    create: XOR<projectsCreateWithoutTicketsInput, projectsUncheckedCreateWithoutTicketsInput>
    where?: projectsWhereInput
  }

  export type projectsUpdateToOneWithWhereWithoutTicketsInput = {
    where?: projectsWhereInput
    data: XOR<projectsUpdateWithoutTicketsInput, projectsUncheckedUpdateWithoutTicketsInput>
  }

  export type projectsUpdateWithoutTicketsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUpdateManyWithoutProjectsNestedInput
    costs?: costsUpdateManyWithoutProjectsNestedInput
    documents?: documentsUpdateManyWithoutProjectsNestedInput
    events?: eventsUpdateManyWithoutProjectsNestedInput
    leads?: leadsUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUpdateManyWithoutProjectsNestedInput
    teams?: teamsUpdateOneWithoutProjectsNestedInput
    reports?: reportsUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUncheckedUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUncheckedUpdateManyWithoutProjectsNestedInput
    costs?: costsUncheckedUpdateManyWithoutProjectsNestedInput
    documents?: documentsUncheckedUpdateManyWithoutProjectsNestedInput
    events?: eventsUncheckedUpdateManyWithoutProjectsNestedInput
    leads?: leadsUncheckedUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUncheckedUpdateManyWithoutProjectsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUncheckedUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type usersUpsertWithoutTickets_tickets_created_byTousersInput = {
    update: XOR<usersUpdateWithoutTickets_tickets_created_byTousersInput, usersUncheckedUpdateWithoutTickets_tickets_created_byTousersInput>
    create: XOR<usersCreateWithoutTickets_tickets_created_byTousersInput, usersUncheckedCreateWithoutTickets_tickets_created_byTousersInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutTickets_tickets_created_byTousersInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutTickets_tickets_created_byTousersInput, usersUncheckedUpdateWithoutTickets_tickets_created_byTousersInput>
  }

  export type usersUpdateWithoutTickets_tickets_created_byTousersInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUpdateManyWithoutUsersNestedInput
    messages?: messagesUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUpdateManyWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
    resources?: resourcesUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutUsersNestedInput
    tasks?: tasksUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutUsersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUncheckedUpdateWithoutTickets_tickets_created_byTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUncheckedUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUncheckedUpdateManyWithoutUsersNestedInput
    messages?: messagesUncheckedUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutUsersNestedInput
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutUsersNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_assigned_toTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersNestedInput
  }

  export type usersUpsertWithoutTickets_tickets_assigned_toTousersInput = {
    update: XOR<usersUpdateWithoutTickets_tickets_assigned_toTousersInput, usersUncheckedUpdateWithoutTickets_tickets_assigned_toTousersInput>
    create: XOR<usersCreateWithoutTickets_tickets_assigned_toTousersInput, usersUncheckedCreateWithoutTickets_tickets_assigned_toTousersInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutTickets_tickets_assigned_toTousersInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutTickets_tickets_assigned_toTousersInput, usersUncheckedUpdateWithoutTickets_tickets_assigned_toTousersInput>
  }

  export type usersUpdateWithoutTickets_tickets_assigned_toTousersInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUpdateManyWithoutUsersNestedInput
    messages?: messagesUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUpdateManyWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
    resources?: resourcesUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutUsersNestedInput
    tasks?: tasksUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
  }

  export type usersUncheckedUpdateWithoutTickets_tickets_assigned_toTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumusers_roleFieldUpdateOperationsInput | $Enums.users_role | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    assets?: assetsUncheckedUpdateManyWithoutUsersNestedInput
    channel_members?: channel_membersUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    hr_records?: hr_recordsUncheckedUpdateManyWithoutUsersNestedInput
    messages?: messagesUncheckedUpdateManyWithoutUsersNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutUsersNestedInput
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
    resources?: resourcesUncheckedUpdateManyWithoutUsersNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutUsersNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutUsersNestedInput
    team_members?: team_membersUncheckedUpdateManyWithoutUsersNestedInput
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutUsersNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutUsersNestedInput
    tickets_tickets_created_byTousers?: ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersNestedInput
  }

  export type assetsCreateWithoutUsersInput = {
    name: string
    type?: string | null
    serial_number?: string | null
    status?: $Enums.assets_status | null
  }

  export type assetsUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    type?: string | null
    serial_number?: string | null
    status?: $Enums.assets_status | null
  }

  export type assetsCreateOrConnectWithoutUsersInput = {
    where: assetsWhereUniqueInput
    create: XOR<assetsCreateWithoutUsersInput, assetsUncheckedCreateWithoutUsersInput>
  }

  export type assetsCreateManyUsersInputEnvelope = {
    data: assetsCreateManyUsersInput | assetsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type channel_membersCreateWithoutUsersInput = {
    channels: channelsCreateNestedOneWithoutChannel_membersInput
  }

  export type channel_membersUncheckedCreateWithoutUsersInput = {
    id?: number
    channel_id: number
  }

  export type channel_membersCreateOrConnectWithoutUsersInput = {
    where: channel_membersWhereUniqueInput
    create: XOR<channel_membersCreateWithoutUsersInput, channel_membersUncheckedCreateWithoutUsersInput>
  }

  export type channel_membersCreateManyUsersInputEnvelope = {
    data: channel_membersCreateManyUsersInput | channel_membersCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type documentsCreateWithoutUsersInput = {
    name: string
    content?: string | null
    type?: $Enums.documents_type | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    projects?: projectsCreateNestedOneWithoutDocumentsInput
  }

  export type documentsUncheckedCreateWithoutUsersInput = {
    id?: number
    project_id?: number | null
    name: string
    content?: string | null
    type?: $Enums.documents_type | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type documentsCreateOrConnectWithoutUsersInput = {
    where: documentsWhereUniqueInput
    create: XOR<documentsCreateWithoutUsersInput, documentsUncheckedCreateWithoutUsersInput>
  }

  export type documentsCreateManyUsersInputEnvelope = {
    data: documentsCreateManyUsersInput | documentsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type hr_recordsCreateWithoutUsersInput = {
    type?: $Enums.hr_records_type | null
    details?: string | null
    date?: Date | string | null
  }

  export type hr_recordsUncheckedCreateWithoutUsersInput = {
    id?: number
    type?: $Enums.hr_records_type | null
    details?: string | null
    date?: Date | string | null
  }

  export type hr_recordsCreateOrConnectWithoutUsersInput = {
    where: hr_recordsWhereUniqueInput
    create: XOR<hr_recordsCreateWithoutUsersInput, hr_recordsUncheckedCreateWithoutUsersInput>
  }

  export type hr_recordsCreateManyUsersInputEnvelope = {
    data: hr_recordsCreateManyUsersInput | hr_recordsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type messagesCreateWithoutUsersInput = {
    content: string
    created_at?: Date | string | null
    channels: channelsCreateNestedOneWithoutMessagesInput
  }

  export type messagesUncheckedCreateWithoutUsersInput = {
    id?: number
    channel_id: number
    content: string
    created_at?: Date | string | null
  }

  export type messagesCreateOrConnectWithoutUsersInput = {
    where: messagesWhereUniqueInput
    create: XOR<messagesCreateWithoutUsersInput, messagesUncheckedCreateWithoutUsersInput>
  }

  export type messagesCreateManyUsersInputEnvelope = {
    data: messagesCreateManyUsersInput | messagesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type permissionsCreateWithoutUsersInput = {
    permission: string
    projects?: projectsCreateNestedOneWithoutPermissionsInput
  }

  export type permissionsUncheckedCreateWithoutUsersInput = {
    id?: number
    project_id?: number | null
    permission: string
  }

  export type permissionsCreateOrConnectWithoutUsersInput = {
    where: permissionsWhereUniqueInput
    create: XOR<permissionsCreateWithoutUsersInput, permissionsUncheckedCreateWithoutUsersInput>
  }

  export type permissionsCreateManyUsersInputEnvelope = {
    data: permissionsCreateManyUsersInput | permissionsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type reportsCreateWithoutUsersInput = {
    type?: $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
    projects?: projectsCreateNestedOneWithoutReportsInput
    teams?: teamsCreateNestedOneWithoutReportsInput
  }

  export type reportsUncheckedCreateWithoutUsersInput = {
    id?: number
    project_id?: number | null
    team_id?: number | null
    type?: $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
  }

  export type reportsCreateOrConnectWithoutUsersInput = {
    where: reportsWhereUniqueInput
    create: XOR<reportsCreateWithoutUsersInput, reportsUncheckedCreateWithoutUsersInput>
  }

  export type reportsCreateManyUsersInputEnvelope = {
    data: reportsCreateManyUsersInput | reportsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type resourcesCreateWithoutUsersInput = {
    name: string
    type?: $Enums.resources_type | null
    availability?: $Enums.resources_availability | null
    project_resources?: project_resourcesCreateNestedManyWithoutResourcesInput
    teams?: teamsCreateNestedOneWithoutResourcesInput
  }

  export type resourcesUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    type?: $Enums.resources_type | null
    team_id?: number | null
    availability?: $Enums.resources_availability | null
    project_resources?: project_resourcesUncheckedCreateNestedManyWithoutResourcesInput
  }

  export type resourcesCreateOrConnectWithoutUsersInput = {
    where: resourcesWhereUniqueInput
    create: XOR<resourcesCreateWithoutUsersInput, resourcesUncheckedCreateWithoutUsersInput>
  }

  export type resourcesCreateManyUsersInputEnvelope = {
    data: resourcesCreateManyUsersInput | resourcesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type task_assigneesCreateWithoutUsersInput = {
    tasks: tasksCreateNestedOneWithoutTask_assigneesInput
  }

  export type task_assigneesUncheckedCreateWithoutUsersInput = {
    id?: number
    task_id: number
  }

  export type task_assigneesCreateOrConnectWithoutUsersInput = {
    where: task_assigneesWhereUniqueInput
    create: XOR<task_assigneesCreateWithoutUsersInput, task_assigneesUncheckedCreateWithoutUsersInput>
  }

  export type task_assigneesCreateManyUsersInputEnvelope = {
    data: task_assigneesCreateManyUsersInput | task_assigneesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type tasksCreateWithoutUsersInput = {
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sprint_tasks?: sprint_tasksCreateNestedManyWithoutTasksInput
    task_assignees?: task_assigneesCreateNestedManyWithoutTasksInput
    task_label_links?: task_label_linksCreateNestedManyWithoutTasksInput
    projects: projectsCreateNestedOneWithoutTasksInput
    tasks?: tasksCreateNestedOneWithoutOther_tasksInput
    other_tasks?: tasksCreateNestedManyWithoutTasksInput
  }

  export type tasksUncheckedCreateWithoutUsersInput = {
    id?: number
    project_id: number
    parent_task_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sprint_tasks?: sprint_tasksUncheckedCreateNestedManyWithoutTasksInput
    task_assignees?: task_assigneesUncheckedCreateNestedManyWithoutTasksInput
    task_label_links?: task_label_linksUncheckedCreateNestedManyWithoutTasksInput
    other_tasks?: tasksUncheckedCreateNestedManyWithoutTasksInput
  }

  export type tasksCreateOrConnectWithoutUsersInput = {
    where: tasksWhereUniqueInput
    create: XOR<tasksCreateWithoutUsersInput, tasksUncheckedCreateWithoutUsersInput>
  }

  export type tasksCreateManyUsersInputEnvelope = {
    data: tasksCreateManyUsersInput | tasksCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type team_membersCreateWithoutUsersInput = {
    role?: $Enums.team_members_role | null
    teams: teamsCreateNestedOneWithoutTeam_membersInput
  }

  export type team_membersUncheckedCreateWithoutUsersInput = {
    id?: number
    team_id: number
    role?: $Enums.team_members_role | null
  }

  export type team_membersCreateOrConnectWithoutUsersInput = {
    where: team_membersWhereUniqueInput
    create: XOR<team_membersCreateWithoutUsersInput, team_membersUncheckedCreateWithoutUsersInput>
  }

  export type team_membersCreateManyUsersInputEnvelope = {
    data: team_membersCreateManyUsersInput | team_membersCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type ticket_commentsCreateWithoutUsersInput = {
    comment: string
    created_at?: Date | string | null
    tickets: ticketsCreateNestedOneWithoutTicket_commentsInput
  }

  export type ticket_commentsUncheckedCreateWithoutUsersInput = {
    id?: number
    ticket_id: number
    comment: string
    created_at?: Date | string | null
  }

  export type ticket_commentsCreateOrConnectWithoutUsersInput = {
    where: ticket_commentsWhereUniqueInput
    create: XOR<ticket_commentsCreateWithoutUsersInput, ticket_commentsUncheckedCreateWithoutUsersInput>
  }

  export type ticket_commentsCreateManyUsersInputEnvelope = {
    data: ticket_commentsCreateManyUsersInput | ticket_commentsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type ticket_historyCreateWithoutUsersInput = {
    action: string
    performed_at?: Date | string | null
    details?: string | null
    tickets: ticketsCreateNestedOneWithoutTicket_historyInput
  }

  export type ticket_historyUncheckedCreateWithoutUsersInput = {
    id?: number
    ticket_id: number
    action: string
    performed_at?: Date | string | null
    details?: string | null
  }

  export type ticket_historyCreateOrConnectWithoutUsersInput = {
    where: ticket_historyWhereUniqueInput
    create: XOR<ticket_historyCreateWithoutUsersInput, ticket_historyUncheckedCreateWithoutUsersInput>
  }

  export type ticket_historyCreateManyUsersInputEnvelope = {
    data: ticket_historyCreateManyUsersInput | ticket_historyCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type ticketsCreateWithoutUsers_tickets_created_byTousersInput = {
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    ticket_comments?: ticket_commentsCreateNestedManyWithoutTicketsInput
    ticket_history?: ticket_historyCreateNestedManyWithoutTicketsInput
    ticket_workflow?: ticket_workflowCreateNestedManyWithoutTicketsInput
    projects?: projectsCreateNestedOneWithoutTicketsInput
    users_tickets_assigned_toTousers?: usersCreateNestedOneWithoutTickets_tickets_assigned_toTousersInput
  }

  export type ticketsUncheckedCreateWithoutUsers_tickets_created_byTousersInput = {
    id?: number
    project_id?: number | null
    assigned_to?: number | null
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutTicketsInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutTicketsInput
    ticket_workflow?: ticket_workflowUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type ticketsCreateOrConnectWithoutUsers_tickets_created_byTousersInput = {
    where: ticketsWhereUniqueInput
    create: XOR<ticketsCreateWithoutUsers_tickets_created_byTousersInput, ticketsUncheckedCreateWithoutUsers_tickets_created_byTousersInput>
  }

  export type ticketsCreateManyUsers_tickets_created_byTousersInputEnvelope = {
    data: ticketsCreateManyUsers_tickets_created_byTousersInput | ticketsCreateManyUsers_tickets_created_byTousersInput[]
    skipDuplicates?: boolean
  }

  export type ticketsCreateWithoutUsers_tickets_assigned_toTousersInput = {
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    ticket_comments?: ticket_commentsCreateNestedManyWithoutTicketsInput
    ticket_history?: ticket_historyCreateNestedManyWithoutTicketsInput
    ticket_workflow?: ticket_workflowCreateNestedManyWithoutTicketsInput
    projects?: projectsCreateNestedOneWithoutTicketsInput
    users_tickets_created_byTousers?: usersCreateNestedOneWithoutTickets_tickets_created_byTousersInput
  }

  export type ticketsUncheckedCreateWithoutUsers_tickets_assigned_toTousersInput = {
    id?: number
    project_id?: number | null
    created_by?: number | null
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    ticket_comments?: ticket_commentsUncheckedCreateNestedManyWithoutTicketsInput
    ticket_history?: ticket_historyUncheckedCreateNestedManyWithoutTicketsInput
    ticket_workflow?: ticket_workflowUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type ticketsCreateOrConnectWithoutUsers_tickets_assigned_toTousersInput = {
    where: ticketsWhereUniqueInput
    create: XOR<ticketsCreateWithoutUsers_tickets_assigned_toTousersInput, ticketsUncheckedCreateWithoutUsers_tickets_assigned_toTousersInput>
  }

  export type ticketsCreateManyUsers_tickets_assigned_toTousersInputEnvelope = {
    data: ticketsCreateManyUsers_tickets_assigned_toTousersInput | ticketsCreateManyUsers_tickets_assigned_toTousersInput[]
    skipDuplicates?: boolean
  }

  export type assetsUpsertWithWhereUniqueWithoutUsersInput = {
    where: assetsWhereUniqueInput
    update: XOR<assetsUpdateWithoutUsersInput, assetsUncheckedUpdateWithoutUsersInput>
    create: XOR<assetsCreateWithoutUsersInput, assetsUncheckedCreateWithoutUsersInput>
  }

  export type assetsUpdateWithWhereUniqueWithoutUsersInput = {
    where: assetsWhereUniqueInput
    data: XOR<assetsUpdateWithoutUsersInput, assetsUncheckedUpdateWithoutUsersInput>
  }

  export type assetsUpdateManyWithWhereWithoutUsersInput = {
    where: assetsScalarWhereInput
    data: XOR<assetsUpdateManyMutationInput, assetsUncheckedUpdateManyWithoutUsersInput>
  }

  export type assetsScalarWhereInput = {
    AND?: assetsScalarWhereInput | assetsScalarWhereInput[]
    OR?: assetsScalarWhereInput[]
    NOT?: assetsScalarWhereInput | assetsScalarWhereInput[]
    id?: IntFilter<"assets"> | number
    name?: StringFilter<"assets"> | string
    type?: StringNullableFilter<"assets"> | string | null
    serial_number?: StringNullableFilter<"assets"> | string | null
    assigned_to?: IntNullableFilter<"assets"> | number | null
    status?: Enumassets_statusNullableFilter<"assets"> | $Enums.assets_status | null
  }

  export type channel_membersUpsertWithWhereUniqueWithoutUsersInput = {
    where: channel_membersWhereUniqueInput
    update: XOR<channel_membersUpdateWithoutUsersInput, channel_membersUncheckedUpdateWithoutUsersInput>
    create: XOR<channel_membersCreateWithoutUsersInput, channel_membersUncheckedCreateWithoutUsersInput>
  }

  export type channel_membersUpdateWithWhereUniqueWithoutUsersInput = {
    where: channel_membersWhereUniqueInput
    data: XOR<channel_membersUpdateWithoutUsersInput, channel_membersUncheckedUpdateWithoutUsersInput>
  }

  export type channel_membersUpdateManyWithWhereWithoutUsersInput = {
    where: channel_membersScalarWhereInput
    data: XOR<channel_membersUpdateManyMutationInput, channel_membersUncheckedUpdateManyWithoutUsersInput>
  }

  export type documentsUpsertWithWhereUniqueWithoutUsersInput = {
    where: documentsWhereUniqueInput
    update: XOR<documentsUpdateWithoutUsersInput, documentsUncheckedUpdateWithoutUsersInput>
    create: XOR<documentsCreateWithoutUsersInput, documentsUncheckedCreateWithoutUsersInput>
  }

  export type documentsUpdateWithWhereUniqueWithoutUsersInput = {
    where: documentsWhereUniqueInput
    data: XOR<documentsUpdateWithoutUsersInput, documentsUncheckedUpdateWithoutUsersInput>
  }

  export type documentsUpdateManyWithWhereWithoutUsersInput = {
    where: documentsScalarWhereInput
    data: XOR<documentsUpdateManyMutationInput, documentsUncheckedUpdateManyWithoutUsersInput>
  }

  export type hr_recordsUpsertWithWhereUniqueWithoutUsersInput = {
    where: hr_recordsWhereUniqueInput
    update: XOR<hr_recordsUpdateWithoutUsersInput, hr_recordsUncheckedUpdateWithoutUsersInput>
    create: XOR<hr_recordsCreateWithoutUsersInput, hr_recordsUncheckedCreateWithoutUsersInput>
  }

  export type hr_recordsUpdateWithWhereUniqueWithoutUsersInput = {
    where: hr_recordsWhereUniqueInput
    data: XOR<hr_recordsUpdateWithoutUsersInput, hr_recordsUncheckedUpdateWithoutUsersInput>
  }

  export type hr_recordsUpdateManyWithWhereWithoutUsersInput = {
    where: hr_recordsScalarWhereInput
    data: XOR<hr_recordsUpdateManyMutationInput, hr_recordsUncheckedUpdateManyWithoutUsersInput>
  }

  export type hr_recordsScalarWhereInput = {
    AND?: hr_recordsScalarWhereInput | hr_recordsScalarWhereInput[]
    OR?: hr_recordsScalarWhereInput[]
    NOT?: hr_recordsScalarWhereInput | hr_recordsScalarWhereInput[]
    id?: IntFilter<"hr_records"> | number
    user_id?: IntFilter<"hr_records"> | number
    type?: Enumhr_records_typeNullableFilter<"hr_records"> | $Enums.hr_records_type | null
    details?: StringNullableFilter<"hr_records"> | string | null
    date?: DateTimeNullableFilter<"hr_records"> | Date | string | null
  }

  export type messagesUpsertWithWhereUniqueWithoutUsersInput = {
    where: messagesWhereUniqueInput
    update: XOR<messagesUpdateWithoutUsersInput, messagesUncheckedUpdateWithoutUsersInput>
    create: XOR<messagesCreateWithoutUsersInput, messagesUncheckedCreateWithoutUsersInput>
  }

  export type messagesUpdateWithWhereUniqueWithoutUsersInput = {
    where: messagesWhereUniqueInput
    data: XOR<messagesUpdateWithoutUsersInput, messagesUncheckedUpdateWithoutUsersInput>
  }

  export type messagesUpdateManyWithWhereWithoutUsersInput = {
    where: messagesScalarWhereInput
    data: XOR<messagesUpdateManyMutationInput, messagesUncheckedUpdateManyWithoutUsersInput>
  }

  export type permissionsUpsertWithWhereUniqueWithoutUsersInput = {
    where: permissionsWhereUniqueInput
    update: XOR<permissionsUpdateWithoutUsersInput, permissionsUncheckedUpdateWithoutUsersInput>
    create: XOR<permissionsCreateWithoutUsersInput, permissionsUncheckedCreateWithoutUsersInput>
  }

  export type permissionsUpdateWithWhereUniqueWithoutUsersInput = {
    where: permissionsWhereUniqueInput
    data: XOR<permissionsUpdateWithoutUsersInput, permissionsUncheckedUpdateWithoutUsersInput>
  }

  export type permissionsUpdateManyWithWhereWithoutUsersInput = {
    where: permissionsScalarWhereInput
    data: XOR<permissionsUpdateManyMutationInput, permissionsUncheckedUpdateManyWithoutUsersInput>
  }

  export type reportsUpsertWithWhereUniqueWithoutUsersInput = {
    where: reportsWhereUniqueInput
    update: XOR<reportsUpdateWithoutUsersInput, reportsUncheckedUpdateWithoutUsersInput>
    create: XOR<reportsCreateWithoutUsersInput, reportsUncheckedCreateWithoutUsersInput>
  }

  export type reportsUpdateWithWhereUniqueWithoutUsersInput = {
    where: reportsWhereUniqueInput
    data: XOR<reportsUpdateWithoutUsersInput, reportsUncheckedUpdateWithoutUsersInput>
  }

  export type reportsUpdateManyWithWhereWithoutUsersInput = {
    where: reportsScalarWhereInput
    data: XOR<reportsUpdateManyMutationInput, reportsUncheckedUpdateManyWithoutUsersInput>
  }

  export type resourcesUpsertWithWhereUniqueWithoutUsersInput = {
    where: resourcesWhereUniqueInput
    update: XOR<resourcesUpdateWithoutUsersInput, resourcesUncheckedUpdateWithoutUsersInput>
    create: XOR<resourcesCreateWithoutUsersInput, resourcesUncheckedCreateWithoutUsersInput>
  }

  export type resourcesUpdateWithWhereUniqueWithoutUsersInput = {
    where: resourcesWhereUniqueInput
    data: XOR<resourcesUpdateWithoutUsersInput, resourcesUncheckedUpdateWithoutUsersInput>
  }

  export type resourcesUpdateManyWithWhereWithoutUsersInput = {
    where: resourcesScalarWhereInput
    data: XOR<resourcesUpdateManyMutationInput, resourcesUncheckedUpdateManyWithoutUsersInput>
  }

  export type task_assigneesUpsertWithWhereUniqueWithoutUsersInput = {
    where: task_assigneesWhereUniqueInput
    update: XOR<task_assigneesUpdateWithoutUsersInput, task_assigneesUncheckedUpdateWithoutUsersInput>
    create: XOR<task_assigneesCreateWithoutUsersInput, task_assigneesUncheckedCreateWithoutUsersInput>
  }

  export type task_assigneesUpdateWithWhereUniqueWithoutUsersInput = {
    where: task_assigneesWhereUniqueInput
    data: XOR<task_assigneesUpdateWithoutUsersInput, task_assigneesUncheckedUpdateWithoutUsersInput>
  }

  export type task_assigneesUpdateManyWithWhereWithoutUsersInput = {
    where: task_assigneesScalarWhereInput
    data: XOR<task_assigneesUpdateManyMutationInput, task_assigneesUncheckedUpdateManyWithoutUsersInput>
  }

  export type tasksUpsertWithWhereUniqueWithoutUsersInput = {
    where: tasksWhereUniqueInput
    update: XOR<tasksUpdateWithoutUsersInput, tasksUncheckedUpdateWithoutUsersInput>
    create: XOR<tasksCreateWithoutUsersInput, tasksUncheckedCreateWithoutUsersInput>
  }

  export type tasksUpdateWithWhereUniqueWithoutUsersInput = {
    where: tasksWhereUniqueInput
    data: XOR<tasksUpdateWithoutUsersInput, tasksUncheckedUpdateWithoutUsersInput>
  }

  export type tasksUpdateManyWithWhereWithoutUsersInput = {
    where: tasksScalarWhereInput
    data: XOR<tasksUpdateManyMutationInput, tasksUncheckedUpdateManyWithoutUsersInput>
  }

  export type team_membersUpsertWithWhereUniqueWithoutUsersInput = {
    where: team_membersWhereUniqueInput
    update: XOR<team_membersUpdateWithoutUsersInput, team_membersUncheckedUpdateWithoutUsersInput>
    create: XOR<team_membersCreateWithoutUsersInput, team_membersUncheckedCreateWithoutUsersInput>
  }

  export type team_membersUpdateWithWhereUniqueWithoutUsersInput = {
    where: team_membersWhereUniqueInput
    data: XOR<team_membersUpdateWithoutUsersInput, team_membersUncheckedUpdateWithoutUsersInput>
  }

  export type team_membersUpdateManyWithWhereWithoutUsersInput = {
    where: team_membersScalarWhereInput
    data: XOR<team_membersUpdateManyMutationInput, team_membersUncheckedUpdateManyWithoutUsersInput>
  }

  export type ticket_commentsUpsertWithWhereUniqueWithoutUsersInput = {
    where: ticket_commentsWhereUniqueInput
    update: XOR<ticket_commentsUpdateWithoutUsersInput, ticket_commentsUncheckedUpdateWithoutUsersInput>
    create: XOR<ticket_commentsCreateWithoutUsersInput, ticket_commentsUncheckedCreateWithoutUsersInput>
  }

  export type ticket_commentsUpdateWithWhereUniqueWithoutUsersInput = {
    where: ticket_commentsWhereUniqueInput
    data: XOR<ticket_commentsUpdateWithoutUsersInput, ticket_commentsUncheckedUpdateWithoutUsersInput>
  }

  export type ticket_commentsUpdateManyWithWhereWithoutUsersInput = {
    where: ticket_commentsScalarWhereInput
    data: XOR<ticket_commentsUpdateManyMutationInput, ticket_commentsUncheckedUpdateManyWithoutUsersInput>
  }

  export type ticket_historyUpsertWithWhereUniqueWithoutUsersInput = {
    where: ticket_historyWhereUniqueInput
    update: XOR<ticket_historyUpdateWithoutUsersInput, ticket_historyUncheckedUpdateWithoutUsersInput>
    create: XOR<ticket_historyCreateWithoutUsersInput, ticket_historyUncheckedCreateWithoutUsersInput>
  }

  export type ticket_historyUpdateWithWhereUniqueWithoutUsersInput = {
    where: ticket_historyWhereUniqueInput
    data: XOR<ticket_historyUpdateWithoutUsersInput, ticket_historyUncheckedUpdateWithoutUsersInput>
  }

  export type ticket_historyUpdateManyWithWhereWithoutUsersInput = {
    where: ticket_historyScalarWhereInput
    data: XOR<ticket_historyUpdateManyMutationInput, ticket_historyUncheckedUpdateManyWithoutUsersInput>
  }

  export type ticketsUpsertWithWhereUniqueWithoutUsers_tickets_created_byTousersInput = {
    where: ticketsWhereUniqueInput
    update: XOR<ticketsUpdateWithoutUsers_tickets_created_byTousersInput, ticketsUncheckedUpdateWithoutUsers_tickets_created_byTousersInput>
    create: XOR<ticketsCreateWithoutUsers_tickets_created_byTousersInput, ticketsUncheckedCreateWithoutUsers_tickets_created_byTousersInput>
  }

  export type ticketsUpdateWithWhereUniqueWithoutUsers_tickets_created_byTousersInput = {
    where: ticketsWhereUniqueInput
    data: XOR<ticketsUpdateWithoutUsers_tickets_created_byTousersInput, ticketsUncheckedUpdateWithoutUsers_tickets_created_byTousersInput>
  }

  export type ticketsUpdateManyWithWhereWithoutUsers_tickets_created_byTousersInput = {
    where: ticketsScalarWhereInput
    data: XOR<ticketsUpdateManyMutationInput, ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersInput>
  }

  export type ticketsUpsertWithWhereUniqueWithoutUsers_tickets_assigned_toTousersInput = {
    where: ticketsWhereUniqueInput
    update: XOR<ticketsUpdateWithoutUsers_tickets_assigned_toTousersInput, ticketsUncheckedUpdateWithoutUsers_tickets_assigned_toTousersInput>
    create: XOR<ticketsCreateWithoutUsers_tickets_assigned_toTousersInput, ticketsUncheckedCreateWithoutUsers_tickets_assigned_toTousersInput>
  }

  export type ticketsUpdateWithWhereUniqueWithoutUsers_tickets_assigned_toTousersInput = {
    where: ticketsWhereUniqueInput
    data: XOR<ticketsUpdateWithoutUsers_tickets_assigned_toTousersInput, ticketsUncheckedUpdateWithoutUsers_tickets_assigned_toTousersInput>
  }

  export type ticketsUpdateManyWithWhereWithoutUsers_tickets_assigned_toTousersInput = {
    where: ticketsScalarWhereInput
    data: XOR<ticketsUpdateManyMutationInput, ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersInput>
  }

  export type ticket_workflowCreateWithoutWorkflow_stepsInput = {
    tickets: ticketsCreateNestedOneWithoutTicket_workflowInput
    workflows: workflowsCreateNestedOneWithoutTicket_workflowInput
  }

  export type ticket_workflowUncheckedCreateWithoutWorkflow_stepsInput = {
    id?: number
    ticket_id: number
    workflow_id: number
  }

  export type ticket_workflowCreateOrConnectWithoutWorkflow_stepsInput = {
    where: ticket_workflowWhereUniqueInput
    create: XOR<ticket_workflowCreateWithoutWorkflow_stepsInput, ticket_workflowUncheckedCreateWithoutWorkflow_stepsInput>
  }

  export type ticket_workflowCreateManyWorkflow_stepsInputEnvelope = {
    data: ticket_workflowCreateManyWorkflow_stepsInput | ticket_workflowCreateManyWorkflow_stepsInput[]
    skipDuplicates?: boolean
  }

  export type workflowsCreateWithoutWorkflow_stepsInput = {
    name: string
    description?: string | null
    ticket_workflow?: ticket_workflowCreateNestedManyWithoutWorkflowsInput
  }

  export type workflowsUncheckedCreateWithoutWorkflow_stepsInput = {
    id?: number
    name: string
    description?: string | null
    ticket_workflow?: ticket_workflowUncheckedCreateNestedManyWithoutWorkflowsInput
  }

  export type workflowsCreateOrConnectWithoutWorkflow_stepsInput = {
    where: workflowsWhereUniqueInput
    create: XOR<workflowsCreateWithoutWorkflow_stepsInput, workflowsUncheckedCreateWithoutWorkflow_stepsInput>
  }

  export type ticket_workflowUpsertWithWhereUniqueWithoutWorkflow_stepsInput = {
    where: ticket_workflowWhereUniqueInput
    update: XOR<ticket_workflowUpdateWithoutWorkflow_stepsInput, ticket_workflowUncheckedUpdateWithoutWorkflow_stepsInput>
    create: XOR<ticket_workflowCreateWithoutWorkflow_stepsInput, ticket_workflowUncheckedCreateWithoutWorkflow_stepsInput>
  }

  export type ticket_workflowUpdateWithWhereUniqueWithoutWorkflow_stepsInput = {
    where: ticket_workflowWhereUniqueInput
    data: XOR<ticket_workflowUpdateWithoutWorkflow_stepsInput, ticket_workflowUncheckedUpdateWithoutWorkflow_stepsInput>
  }

  export type ticket_workflowUpdateManyWithWhereWithoutWorkflow_stepsInput = {
    where: ticket_workflowScalarWhereInput
    data: XOR<ticket_workflowUpdateManyMutationInput, ticket_workflowUncheckedUpdateManyWithoutWorkflow_stepsInput>
  }

  export type workflowsUpsertWithoutWorkflow_stepsInput = {
    update: XOR<workflowsUpdateWithoutWorkflow_stepsInput, workflowsUncheckedUpdateWithoutWorkflow_stepsInput>
    create: XOR<workflowsCreateWithoutWorkflow_stepsInput, workflowsUncheckedCreateWithoutWorkflow_stepsInput>
    where?: workflowsWhereInput
  }

  export type workflowsUpdateToOneWithWhereWithoutWorkflow_stepsInput = {
    where?: workflowsWhereInput
    data: XOR<workflowsUpdateWithoutWorkflow_stepsInput, workflowsUncheckedUpdateWithoutWorkflow_stepsInput>
  }

  export type workflowsUpdateWithoutWorkflow_stepsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_workflow?: ticket_workflowUpdateManyWithoutWorkflowsNestedInput
  }

  export type workflowsUncheckedUpdateWithoutWorkflow_stepsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_workflow?: ticket_workflowUncheckedUpdateManyWithoutWorkflowsNestedInput
  }

  export type ticket_workflowCreateWithoutWorkflowsInput = {
    tickets: ticketsCreateNestedOneWithoutTicket_workflowInput
    workflow_steps?: workflow_stepsCreateNestedOneWithoutTicket_workflowInput
  }

  export type ticket_workflowUncheckedCreateWithoutWorkflowsInput = {
    id?: number
    ticket_id: number
    current_step?: number | null
  }

  export type ticket_workflowCreateOrConnectWithoutWorkflowsInput = {
    where: ticket_workflowWhereUniqueInput
    create: XOR<ticket_workflowCreateWithoutWorkflowsInput, ticket_workflowUncheckedCreateWithoutWorkflowsInput>
  }

  export type ticket_workflowCreateManyWorkflowsInputEnvelope = {
    data: ticket_workflowCreateManyWorkflowsInput | ticket_workflowCreateManyWorkflowsInput[]
    skipDuplicates?: boolean
  }

  export type workflow_stepsCreateWithoutWorkflowsInput = {
    step_order: number
    name: string
    action?: string | null
    ticket_workflow?: ticket_workflowCreateNestedManyWithoutWorkflow_stepsInput
  }

  export type workflow_stepsUncheckedCreateWithoutWorkflowsInput = {
    id?: number
    step_order: number
    name: string
    action?: string | null
    ticket_workflow?: ticket_workflowUncheckedCreateNestedManyWithoutWorkflow_stepsInput
  }

  export type workflow_stepsCreateOrConnectWithoutWorkflowsInput = {
    where: workflow_stepsWhereUniqueInput
    create: XOR<workflow_stepsCreateWithoutWorkflowsInput, workflow_stepsUncheckedCreateWithoutWorkflowsInput>
  }

  export type workflow_stepsCreateManyWorkflowsInputEnvelope = {
    data: workflow_stepsCreateManyWorkflowsInput | workflow_stepsCreateManyWorkflowsInput[]
    skipDuplicates?: boolean
  }

  export type ticket_workflowUpsertWithWhereUniqueWithoutWorkflowsInput = {
    where: ticket_workflowWhereUniqueInput
    update: XOR<ticket_workflowUpdateWithoutWorkflowsInput, ticket_workflowUncheckedUpdateWithoutWorkflowsInput>
    create: XOR<ticket_workflowCreateWithoutWorkflowsInput, ticket_workflowUncheckedCreateWithoutWorkflowsInput>
  }

  export type ticket_workflowUpdateWithWhereUniqueWithoutWorkflowsInput = {
    where: ticket_workflowWhereUniqueInput
    data: XOR<ticket_workflowUpdateWithoutWorkflowsInput, ticket_workflowUncheckedUpdateWithoutWorkflowsInput>
  }

  export type ticket_workflowUpdateManyWithWhereWithoutWorkflowsInput = {
    where: ticket_workflowScalarWhereInput
    data: XOR<ticket_workflowUpdateManyMutationInput, ticket_workflowUncheckedUpdateManyWithoutWorkflowsInput>
  }

  export type workflow_stepsUpsertWithWhereUniqueWithoutWorkflowsInput = {
    where: workflow_stepsWhereUniqueInput
    update: XOR<workflow_stepsUpdateWithoutWorkflowsInput, workflow_stepsUncheckedUpdateWithoutWorkflowsInput>
    create: XOR<workflow_stepsCreateWithoutWorkflowsInput, workflow_stepsUncheckedCreateWithoutWorkflowsInput>
  }

  export type workflow_stepsUpdateWithWhereUniqueWithoutWorkflowsInput = {
    where: workflow_stepsWhereUniqueInput
    data: XOR<workflow_stepsUpdateWithoutWorkflowsInput, workflow_stepsUncheckedUpdateWithoutWorkflowsInput>
  }

  export type workflow_stepsUpdateManyWithWhereWithoutWorkflowsInput = {
    where: workflow_stepsScalarWhereInput
    data: XOR<workflow_stepsUpdateManyMutationInput, workflow_stepsUncheckedUpdateManyWithoutWorkflowsInput>
  }

  export type workflow_stepsScalarWhereInput = {
    AND?: workflow_stepsScalarWhereInput | workflow_stepsScalarWhereInput[]
    OR?: workflow_stepsScalarWhereInput[]
    NOT?: workflow_stepsScalarWhereInput | workflow_stepsScalarWhereInput[]
    id?: IntFilter<"workflow_steps"> | number
    workflow_id?: IntFilter<"workflow_steps"> | number
    step_order?: IntFilter<"workflow_steps"> | number
    name?: StringFilter<"workflow_steps"> | string
    action?: StringNullableFilter<"workflow_steps"> | string | null
  }

  export type channel_membersCreateManyChannelsInput = {
    id?: number
    user_id: number
  }

  export type messagesCreateManyChannelsInput = {
    id?: number
    user_id: number
    content: string
    created_at?: Date | string | null
  }

  export type channel_membersUpdateWithoutChannelsInput = {
    users?: usersUpdateOneRequiredWithoutChannel_membersNestedInput
  }

  export type channel_membersUncheckedUpdateWithoutChannelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type channel_membersUncheckedUpdateManyWithoutChannelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type messagesUpdateWithoutChannelsInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type messagesUncheckedUpdateWithoutChannelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type messagesUncheckedUpdateManyWithoutChannelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type leadsCreateManyClientsInput = {
    id?: number
    project_id?: number | null
    status?: $Enums.leads_status | null
    notes?: string | null
    created_at?: Date | string | null
  }

  export type leadsUpdateWithoutClientsInput = {
    status?: NullableEnumleads_statusFieldUpdateOperationsInput | $Enums.leads_status | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: projectsUpdateOneWithoutLeadsNestedInput
  }

  export type leadsUncheckedUpdateWithoutClientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableEnumleads_statusFieldUpdateOperationsInput | $Enums.leads_status | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type leadsUncheckedUpdateManyWithoutClientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableEnumleads_statusFieldUpdateOperationsInput | $Enums.leads_status | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type budgetsCreateManyProjectsInput = {
    id?: number
    amount: Decimal | DecimalJsLike | number | string
    description?: string | null
    created_at?: Date | string | null
  }

  export type contractsCreateManyProjectsInput = {
    id?: number
    supplier_id?: number | null
    description?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.contracts_status | null
  }

  export type costsCreateManyProjectsInput = {
    id?: number
    description?: string | null
    amount: Decimal | DecimalJsLike | number | string
    date?: Date | string | null
  }

  export type documentsCreateManyProjectsInput = {
    id?: number
    name: string
    content?: string | null
    type?: $Enums.documents_type | null
    created_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type eventsCreateManyProjectsInput = {
    id?: number
    name: string
    description?: string | null
    start_datetime?: Date | string | null
    end_datetime?: Date | string | null
    type?: $Enums.events_type | null
  }

  export type leadsCreateManyProjectsInput = {
    id?: number
    client_id?: number | null
    status?: $Enums.leads_status | null
    notes?: string | null
    created_at?: Date | string | null
  }

  export type permissionsCreateManyProjectsInput = {
    id?: number
    user_id: number
    permission: string
  }

  export type project_resourcesCreateManyProjectsInput = {
    id?: number
    resource_id: number
    assigned_from?: Date | string | null
    assigned_to?: Date | string | null
  }

  export type reportsCreateManyProjectsInput = {
    id?: number
    team_id?: number | null
    user_id?: number | null
    type?: $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
  }

  export type sprintsCreateManyProjectsInput = {
    id?: number
    name: string
    start_date?: Date | string | null
    end_date?: Date | string | null
    goal?: string | null
    status?: $Enums.sprints_status | null
  }

  export type tasksCreateManyProjectsInput = {
    id?: number
    parent_task_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ticketsCreateManyProjectsInput = {
    id?: number
    created_by?: number | null
    assigned_to?: number | null
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type budgetsUpdateWithoutProjectsInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type budgetsUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type budgetsUncheckedUpdateManyWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type contractsUpdateWithoutProjectsInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumcontracts_statusFieldUpdateOperationsInput | $Enums.contracts_status | null
    suppliers?: suppliersUpdateOneWithoutContractsNestedInput
  }

  export type contractsUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    supplier_id?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumcontracts_statusFieldUpdateOperationsInput | $Enums.contracts_status | null
  }

  export type contractsUncheckedUpdateManyWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    supplier_id?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumcontracts_statusFieldUpdateOperationsInput | $Enums.contracts_status | null
  }

  export type costsUpdateWithoutProjectsInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type costsUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type costsUncheckedUpdateManyWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type documentsUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumdocuments_typeFieldUpdateOperationsInput | $Enums.documents_type | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneWithoutDocumentsNestedInput
  }

  export type documentsUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumdocuments_typeFieldUpdateOperationsInput | $Enums.documents_type | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type documentsUncheckedUpdateManyWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumdocuments_typeFieldUpdateOperationsInput | $Enums.documents_type | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type eventsUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_datetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_datetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableEnumevents_typeFieldUpdateOperationsInput | $Enums.events_type | null
  }

  export type eventsUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_datetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_datetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableEnumevents_typeFieldUpdateOperationsInput | $Enums.events_type | null
  }

  export type eventsUncheckedUpdateManyWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_datetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_datetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableEnumevents_typeFieldUpdateOperationsInput | $Enums.events_type | null
  }

  export type leadsUpdateWithoutProjectsInput = {
    status?: NullableEnumleads_statusFieldUpdateOperationsInput | $Enums.leads_status | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clients?: clientsUpdateOneWithoutLeadsNestedInput
  }

  export type leadsUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    client_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableEnumleads_statusFieldUpdateOperationsInput | $Enums.leads_status | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type leadsUncheckedUpdateManyWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    client_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableEnumleads_statusFieldUpdateOperationsInput | $Enums.leads_status | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type permissionsUpdateWithoutProjectsInput = {
    permission?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type permissionsUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    permission?: StringFieldUpdateOperationsInput | string
  }

  export type permissionsUncheckedUpdateManyWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    permission?: StringFieldUpdateOperationsInput | string
  }

  export type project_resourcesUpdateWithoutProjectsInput = {
    assigned_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigned_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resources?: resourcesUpdateOneRequiredWithoutProject_resourcesNestedInput
  }

  export type project_resourcesUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    resource_id?: IntFieldUpdateOperationsInput | number
    assigned_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigned_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type project_resourcesUncheckedUpdateManyWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    resource_id?: IntFieldUpdateOperationsInput | number
    assigned_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigned_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsUpdateWithoutProjectsInput = {
    type?: NullableEnumreports_typeFieldUpdateOperationsInput | $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teams?: teamsUpdateOneWithoutReportsNestedInput
    users?: usersUpdateOneWithoutReportsNestedInput
  }

  export type reportsUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumreports_typeFieldUpdateOperationsInput | $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsUncheckedUpdateManyWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumreports_typeFieldUpdateOperationsInput | $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type sprintsUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumsprints_statusFieldUpdateOperationsInput | $Enums.sprints_status | null
    sprint_tasks?: sprint_tasksUpdateManyWithoutSprintsNestedInput
  }

  export type sprintsUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumsprints_statusFieldUpdateOperationsInput | $Enums.sprints_status | null
    sprint_tasks?: sprint_tasksUncheckedUpdateManyWithoutSprintsNestedInput
  }

  export type sprintsUncheckedUpdateManyWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumsprints_statusFieldUpdateOperationsInput | $Enums.sprints_status | null
  }

  export type tasksUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sprint_tasks?: sprint_tasksUpdateManyWithoutTasksNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutTasksNestedInput
    task_label_links?: task_label_linksUpdateManyWithoutTasksNestedInput
    tasks?: tasksUpdateOneWithoutOther_tasksNestedInput
    other_tasks?: tasksUpdateManyWithoutTasksNestedInput
    users?: usersUpdateOneWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    parent_task_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sprint_tasks?: sprint_tasksUncheckedUpdateManyWithoutTasksNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutTasksNestedInput
    task_label_links?: task_label_linksUncheckedUpdateManyWithoutTasksNestedInput
    other_tasks?: tasksUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateManyWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    parent_task_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticketsUpdateWithoutProjectsInput = {
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_comments?: ticket_commentsUpdateManyWithoutTicketsNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutTicketsNestedInput
    ticket_workflow?: ticket_workflowUpdateManyWithoutTicketsNestedInput
    users_tickets_created_byTousers?: usersUpdateOneWithoutTickets_tickets_created_byTousersNestedInput
    users_tickets_assigned_toTousers?: usersUpdateOneWithoutTickets_tickets_assigned_toTousersNestedInput
  }

  export type ticketsUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    assigned_to?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutTicketsNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutTicketsNestedInput
    ticket_workflow?: ticket_workflowUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateManyWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    assigned_to?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type project_resourcesCreateManyResourcesInput = {
    id?: number
    project_id: number
    assigned_from?: Date | string | null
    assigned_to?: Date | string | null
  }

  export type project_resourcesUpdateWithoutResourcesInput = {
    assigned_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigned_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: projectsUpdateOneRequiredWithoutProject_resourcesNestedInput
  }

  export type project_resourcesUncheckedUpdateWithoutResourcesInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    assigned_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigned_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type project_resourcesUncheckedUpdateManyWithoutResourcesInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    assigned_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigned_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type sprint_tasksCreateManySprintsInput = {
    id?: number
    task_id: number
  }

  export type sprint_tasksUpdateWithoutSprintsInput = {
    tasks?: tasksUpdateOneRequiredWithoutSprint_tasksNestedInput
  }

  export type sprint_tasksUncheckedUpdateWithoutSprintsInput = {
    id?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
  }

  export type sprint_tasksUncheckedUpdateManyWithoutSprintsInput = {
    id?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
  }

  export type contractsCreateManySuppliersInput = {
    id?: number
    project_id?: number | null
    description?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.contracts_status | null
  }

  export type contractsUpdateWithoutSuppliersInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumcontracts_statusFieldUpdateOperationsInput | $Enums.contracts_status | null
    projects?: projectsUpdateOneWithoutContractsNestedInput
  }

  export type contractsUncheckedUpdateWithoutSuppliersInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumcontracts_statusFieldUpdateOperationsInput | $Enums.contracts_status | null
  }

  export type contractsUncheckedUpdateManyWithoutSuppliersInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumcontracts_statusFieldUpdateOperationsInput | $Enums.contracts_status | null
  }

  export type task_label_linksCreateManyTask_labelsInput = {
    id?: number
    task_id: number
  }

  export type task_label_linksUpdateWithoutTask_labelsInput = {
    tasks?: tasksUpdateOneRequiredWithoutTask_label_linksNestedInput
  }

  export type task_label_linksUncheckedUpdateWithoutTask_labelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
  }

  export type task_label_linksUncheckedUpdateManyWithoutTask_labelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
  }

  export type sprint_tasksCreateManyTasksInput = {
    id?: number
    sprint_id: number
  }

  export type task_assigneesCreateManyTasksInput = {
    id?: number
    user_id: number
  }

  export type task_label_linksCreateManyTasksInput = {
    id?: number
    label_id: number
  }

  export type tasksCreateManyTasksInput = {
    id?: number
    project_id: number
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type sprint_tasksUpdateWithoutTasksInput = {
    sprints?: sprintsUpdateOneRequiredWithoutSprint_tasksNestedInput
  }

  export type sprint_tasksUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    sprint_id?: IntFieldUpdateOperationsInput | number
  }

  export type sprint_tasksUncheckedUpdateManyWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    sprint_id?: IntFieldUpdateOperationsInput | number
  }

  export type task_assigneesUpdateWithoutTasksInput = {
    users?: usersUpdateOneRequiredWithoutTask_assigneesNestedInput
  }

  export type task_assigneesUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type task_assigneesUncheckedUpdateManyWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type task_label_linksUpdateWithoutTasksInput = {
    task_labels?: task_labelsUpdateOneRequiredWithoutTask_label_linksNestedInput
  }

  export type task_label_linksUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    label_id?: IntFieldUpdateOperationsInput | number
  }

  export type task_label_linksUncheckedUpdateManyWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    label_id?: IntFieldUpdateOperationsInput | number
  }

  export type tasksUpdateWithoutTasksInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sprint_tasks?: sprint_tasksUpdateManyWithoutTasksNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutTasksNestedInput
    task_label_links?: task_label_linksUpdateManyWithoutTasksNestedInput
    projects?: projectsUpdateOneRequiredWithoutTasksNestedInput
    other_tasks?: tasksUpdateManyWithoutTasksNestedInput
    users?: usersUpdateOneWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sprint_tasks?: sprint_tasksUncheckedUpdateManyWithoutTasksNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutTasksNestedInput
    task_label_links?: task_label_linksUncheckedUpdateManyWithoutTasksNestedInput
    other_tasks?: tasksUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateManyWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type channelsCreateManyTeamsInput = {
    id?: number
    name: string
    type?: $Enums.channels_type | null
  }

  export type projectsCreateManyTeamsInput = {
    id?: number
    name: string
    description?: string | null
    status?: $Enums.projects_status | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    created_at?: Date | string | null
  }

  export type reportsCreateManyTeamsInput = {
    id?: number
    project_id?: number | null
    user_id?: number | null
    type?: $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
  }

  export type resourcesCreateManyTeamsInput = {
    id?: number
    name: string
    type?: $Enums.resources_type | null
    user_id?: number | null
    availability?: $Enums.resources_availability | null
  }

  export type team_membersCreateManyTeamsInput = {
    id?: number
    user_id: number
    role?: $Enums.team_members_role | null
  }

  export type channelsUpdateWithoutTeamsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumchannels_typeFieldUpdateOperationsInput | $Enums.channels_type | null
    channel_members?: channel_membersUpdateManyWithoutChannelsNestedInput
    messages?: messagesUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumchannels_typeFieldUpdateOperationsInput | $Enums.channels_type | null
    channel_members?: channel_membersUncheckedUpdateManyWithoutChannelsNestedInput
    messages?: messagesUncheckedUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateManyWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumchannels_typeFieldUpdateOperationsInput | $Enums.channels_type | null
  }

  export type projectsUpdateWithoutTeamsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUpdateManyWithoutProjectsNestedInput
    costs?: costsUpdateManyWithoutProjectsNestedInput
    documents?: documentsUpdateManyWithoutProjectsNestedInput
    events?: eventsUpdateManyWithoutProjectsNestedInput
    leads?: leadsUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUpdateManyWithoutProjectsNestedInput
    reports?: reportsUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: budgetsUncheckedUpdateManyWithoutProjectsNestedInput
    contracts?: contractsUncheckedUpdateManyWithoutProjectsNestedInput
    costs?: costsUncheckedUpdateManyWithoutProjectsNestedInput
    documents?: documentsUncheckedUpdateManyWithoutProjectsNestedInput
    events?: eventsUncheckedUpdateManyWithoutProjectsNestedInput
    leads?: leadsUncheckedUpdateManyWithoutProjectsNestedInput
    permissions?: permissionsUncheckedUpdateManyWithoutProjectsNestedInput
    project_resources?: project_resourcesUncheckedUpdateManyWithoutProjectsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutProjectsNestedInput
    sprints?: sprintsUncheckedUpdateManyWithoutProjectsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutProjectsNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateManyWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumprojects_statusFieldUpdateOperationsInput | $Enums.projects_status | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsUpdateWithoutTeamsInput = {
    type?: NullableEnumreports_typeFieldUpdateOperationsInput | $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: projectsUpdateOneWithoutReportsNestedInput
    users?: usersUpdateOneWithoutReportsNestedInput
  }

  export type reportsUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumreports_typeFieldUpdateOperationsInput | $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsUncheckedUpdateManyWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumreports_typeFieldUpdateOperationsInput | $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type resourcesUpdateWithoutTeamsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumresources_typeFieldUpdateOperationsInput | $Enums.resources_type | null
    availability?: NullableEnumresources_availabilityFieldUpdateOperationsInput | $Enums.resources_availability | null
    project_resources?: project_resourcesUpdateManyWithoutResourcesNestedInput
    users?: usersUpdateOneWithoutResourcesNestedInput
  }

  export type resourcesUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumresources_typeFieldUpdateOperationsInput | $Enums.resources_type | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: NullableEnumresources_availabilityFieldUpdateOperationsInput | $Enums.resources_availability | null
    project_resources?: project_resourcesUncheckedUpdateManyWithoutResourcesNestedInput
  }

  export type resourcesUncheckedUpdateManyWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumresources_typeFieldUpdateOperationsInput | $Enums.resources_type | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: NullableEnumresources_availabilityFieldUpdateOperationsInput | $Enums.resources_availability | null
  }

  export type team_membersUpdateWithoutTeamsInput = {
    role?: NullableEnumteam_members_roleFieldUpdateOperationsInput | $Enums.team_members_role | null
    users?: usersUpdateOneRequiredWithoutTeam_membersNestedInput
  }

  export type team_membersUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    role?: NullableEnumteam_members_roleFieldUpdateOperationsInput | $Enums.team_members_role | null
  }

  export type team_membersUncheckedUpdateManyWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    role?: NullableEnumteam_members_roleFieldUpdateOperationsInput | $Enums.team_members_role | null
  }

  export type ticket_commentsCreateManyTicketsInput = {
    id?: number
    user_id: number
    comment: string
    created_at?: Date | string | null
  }

  export type ticket_historyCreateManyTicketsInput = {
    id?: number
    action: string
    performed_by?: number | null
    performed_at?: Date | string | null
    details?: string | null
  }

  export type ticket_workflowCreateManyTicketsInput = {
    id?: number
    workflow_id: number
    current_step?: number | null
  }

  export type ticket_commentsUpdateWithoutTicketsInput = {
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutTicket_commentsNestedInput
  }

  export type ticket_commentsUncheckedUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticket_commentsUncheckedUpdateManyWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticket_historyUpdateWithoutTicketsInput = {
    action?: StringFieldUpdateOperationsInput | string
    performed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateOneWithoutTicket_historyNestedInput
  }

  export type ticket_historyUncheckedUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    performed_by?: NullableIntFieldUpdateOperationsInput | number | null
    performed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ticket_historyUncheckedUpdateManyWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    performed_by?: NullableIntFieldUpdateOperationsInput | number | null
    performed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ticket_workflowUpdateWithoutTicketsInput = {
    workflows?: workflowsUpdateOneRequiredWithoutTicket_workflowNestedInput
    workflow_steps?: workflow_stepsUpdateOneWithoutTicket_workflowNestedInput
  }

  export type ticket_workflowUncheckedUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    workflow_id?: IntFieldUpdateOperationsInput | number
    current_step?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ticket_workflowUncheckedUpdateManyWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    workflow_id?: IntFieldUpdateOperationsInput | number
    current_step?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type assetsCreateManyUsersInput = {
    id?: number
    name: string
    type?: string | null
    serial_number?: string | null
    status?: $Enums.assets_status | null
  }

  export type channel_membersCreateManyUsersInput = {
    id?: number
    channel_id: number
  }

  export type documentsCreateManyUsersInput = {
    id?: number
    project_id?: number | null
    name: string
    content?: string | null
    type?: $Enums.documents_type | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type hr_recordsCreateManyUsersInput = {
    id?: number
    type?: $Enums.hr_records_type | null
    details?: string | null
    date?: Date | string | null
  }

  export type messagesCreateManyUsersInput = {
    id?: number
    channel_id: number
    content: string
    created_at?: Date | string | null
  }

  export type permissionsCreateManyUsersInput = {
    id?: number
    project_id?: number | null
    permission: string
  }

  export type reportsCreateManyUsersInput = {
    id?: number
    project_id?: number | null
    team_id?: number | null
    type?: $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
  }

  export type resourcesCreateManyUsersInput = {
    id?: number
    name: string
    type?: $Enums.resources_type | null
    team_id?: number | null
    availability?: $Enums.resources_availability | null
  }

  export type task_assigneesCreateManyUsersInput = {
    id?: number
    task_id: number
  }

  export type tasksCreateManyUsersInput = {
    id?: number
    project_id: number
    parent_task_id?: number | null
    name: string
    description?: string | null
    status?: $Enums.tasks_status | null
    priority?: $Enums.tasks_priority | null
    due_date?: Date | string | null
    wip_limit?: number | null
    swimlane?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type team_membersCreateManyUsersInput = {
    id?: number
    team_id: number
    role?: $Enums.team_members_role | null
  }

  export type ticket_commentsCreateManyUsersInput = {
    id?: number
    ticket_id: number
    comment: string
    created_at?: Date | string | null
  }

  export type ticket_historyCreateManyUsersInput = {
    id?: number
    ticket_id: number
    action: string
    performed_at?: Date | string | null
    details?: string | null
  }

  export type ticketsCreateManyUsers_tickets_created_byTousersInput = {
    id?: number
    project_id?: number | null
    assigned_to?: number | null
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ticketsCreateManyUsers_tickets_assigned_toTousersInput = {
    id?: number
    project_id?: number | null
    created_by?: number | null
    type?: $Enums.tickets_type | null
    title: string
    description?: string | null
    status?: $Enums.tickets_status | null
    priority?: $Enums.tickets_priority | null
    sla_hours?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type assetsUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    serial_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumassets_statusFieldUpdateOperationsInput | $Enums.assets_status | null
  }

  export type assetsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    serial_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumassets_statusFieldUpdateOperationsInput | $Enums.assets_status | null
  }

  export type assetsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    serial_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumassets_statusFieldUpdateOperationsInput | $Enums.assets_status | null
  }

  export type channel_membersUpdateWithoutUsersInput = {
    channels?: channelsUpdateOneRequiredWithoutChannel_membersNestedInput
  }

  export type channel_membersUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    channel_id?: IntFieldUpdateOperationsInput | number
  }

  export type channel_membersUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    channel_id?: IntFieldUpdateOperationsInput | number
  }

  export type documentsUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumdocuments_typeFieldUpdateOperationsInput | $Enums.documents_type | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: projectsUpdateOneWithoutDocumentsNestedInput
  }

  export type documentsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumdocuments_typeFieldUpdateOperationsInput | $Enums.documents_type | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type documentsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumdocuments_typeFieldUpdateOperationsInput | $Enums.documents_type | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type hr_recordsUpdateWithoutUsersInput = {
    type?: NullableEnumhr_records_typeFieldUpdateOperationsInput | $Enums.hr_records_type | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type hr_recordsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: NullableEnumhr_records_typeFieldUpdateOperationsInput | $Enums.hr_records_type | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type hr_recordsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: NullableEnumhr_records_typeFieldUpdateOperationsInput | $Enums.hr_records_type | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type messagesUpdateWithoutUsersInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channels?: channelsUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type messagesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    channel_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type messagesUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    channel_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type permissionsUpdateWithoutUsersInput = {
    permission?: StringFieldUpdateOperationsInput | string
    projects?: projectsUpdateOneWithoutPermissionsNestedInput
  }

  export type permissionsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    permission?: StringFieldUpdateOperationsInput | string
  }

  export type permissionsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    permission?: StringFieldUpdateOperationsInput | string
  }

  export type reportsUpdateWithoutUsersInput = {
    type?: NullableEnumreports_typeFieldUpdateOperationsInput | $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: projectsUpdateOneWithoutReportsNestedInput
    teams?: teamsUpdateOneWithoutReportsNestedInput
  }

  export type reportsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumreports_typeFieldUpdateOperationsInput | $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumreports_typeFieldUpdateOperationsInput | $Enums.reports_type | null
    data?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type resourcesUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumresources_typeFieldUpdateOperationsInput | $Enums.resources_type | null
    availability?: NullableEnumresources_availabilityFieldUpdateOperationsInput | $Enums.resources_availability | null
    project_resources?: project_resourcesUpdateManyWithoutResourcesNestedInput
    teams?: teamsUpdateOneWithoutResourcesNestedInput
  }

  export type resourcesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumresources_typeFieldUpdateOperationsInput | $Enums.resources_type | null
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: NullableEnumresources_availabilityFieldUpdateOperationsInput | $Enums.resources_availability | null
    project_resources?: project_resourcesUncheckedUpdateManyWithoutResourcesNestedInput
  }

  export type resourcesUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumresources_typeFieldUpdateOperationsInput | $Enums.resources_type | null
    team_id?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: NullableEnumresources_availabilityFieldUpdateOperationsInput | $Enums.resources_availability | null
  }

  export type task_assigneesUpdateWithoutUsersInput = {
    tasks?: tasksUpdateOneRequiredWithoutTask_assigneesNestedInput
  }

  export type task_assigneesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
  }

  export type task_assigneesUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
  }

  export type tasksUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sprint_tasks?: sprint_tasksUpdateManyWithoutTasksNestedInput
    task_assignees?: task_assigneesUpdateManyWithoutTasksNestedInput
    task_label_links?: task_label_linksUpdateManyWithoutTasksNestedInput
    projects?: projectsUpdateOneRequiredWithoutTasksNestedInput
    tasks?: tasksUpdateOneWithoutOther_tasksNestedInput
    other_tasks?: tasksUpdateManyWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    parent_task_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sprint_tasks?: sprint_tasksUncheckedUpdateManyWithoutTasksNestedInput
    task_assignees?: task_assigneesUncheckedUpdateManyWithoutTasksNestedInput
    task_label_links?: task_label_linksUncheckedUpdateManyWithoutTasksNestedInput
    other_tasks?: tasksUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
    parent_task_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtasks_statusFieldUpdateOperationsInput | $Enums.tasks_status | null
    priority?: NullableEnumtasks_priorityFieldUpdateOperationsInput | $Enums.tasks_priority | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wip_limit?: NullableIntFieldUpdateOperationsInput | number | null
    swimlane?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type team_membersUpdateWithoutUsersInput = {
    role?: NullableEnumteam_members_roleFieldUpdateOperationsInput | $Enums.team_members_role | null
    teams?: teamsUpdateOneRequiredWithoutTeam_membersNestedInput
  }

  export type team_membersUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    role?: NullableEnumteam_members_roleFieldUpdateOperationsInput | $Enums.team_members_role | null
  }

  export type team_membersUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    role?: NullableEnumteam_members_roleFieldUpdateOperationsInput | $Enums.team_members_role | null
  }

  export type ticket_commentsUpdateWithoutUsersInput = {
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: ticketsUpdateOneRequiredWithoutTicket_commentsNestedInput
  }

  export type ticket_commentsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticket_commentsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticket_historyUpdateWithoutUsersInput = {
    action?: StringFieldUpdateOperationsInput | string
    performed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    tickets?: ticketsUpdateOneRequiredWithoutTicket_historyNestedInput
  }

  export type ticket_historyUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    performed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ticket_historyUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    performed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ticketsUpdateWithoutUsers_tickets_created_byTousersInput = {
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_comments?: ticket_commentsUpdateManyWithoutTicketsNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutTicketsNestedInput
    ticket_workflow?: ticket_workflowUpdateManyWithoutTicketsNestedInput
    projects?: projectsUpdateOneWithoutTicketsNestedInput
    users_tickets_assigned_toTousers?: usersUpdateOneWithoutTickets_tickets_assigned_toTousersNestedInput
  }

  export type ticketsUncheckedUpdateWithoutUsers_tickets_created_byTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    assigned_to?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutTicketsNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutTicketsNestedInput
    ticket_workflow?: ticket_workflowUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateManyWithoutUsers_tickets_created_byTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    assigned_to?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticketsUpdateWithoutUsers_tickets_assigned_toTousersInput = {
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_comments?: ticket_commentsUpdateManyWithoutTicketsNestedInput
    ticket_history?: ticket_historyUpdateManyWithoutTicketsNestedInput
    ticket_workflow?: ticket_workflowUpdateManyWithoutTicketsNestedInput
    projects?: projectsUpdateOneWithoutTicketsNestedInput
    users_tickets_created_byTousers?: usersUpdateOneWithoutTickets_tickets_created_byTousersNestedInput
  }

  export type ticketsUncheckedUpdateWithoutUsers_tickets_assigned_toTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_comments?: ticket_commentsUncheckedUpdateManyWithoutTicketsNestedInput
    ticket_history?: ticket_historyUncheckedUpdateManyWithoutTicketsNestedInput
    ticket_workflow?: ticket_workflowUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateManyWithoutUsers_tickets_assigned_toTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumtickets_typeFieldUpdateOperationsInput | $Enums.tickets_type | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumtickets_statusFieldUpdateOperationsInput | $Enums.tickets_status | null
    priority?: NullableEnumtickets_priorityFieldUpdateOperationsInput | $Enums.tickets_priority | null
    sla_hours?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticket_workflowCreateManyWorkflow_stepsInput = {
    id?: number
    ticket_id: number
    workflow_id: number
  }

  export type ticket_workflowUpdateWithoutWorkflow_stepsInput = {
    tickets?: ticketsUpdateOneRequiredWithoutTicket_workflowNestedInput
    workflows?: workflowsUpdateOneRequiredWithoutTicket_workflowNestedInput
  }

  export type ticket_workflowUncheckedUpdateWithoutWorkflow_stepsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    workflow_id?: IntFieldUpdateOperationsInput | number
  }

  export type ticket_workflowUncheckedUpdateManyWithoutWorkflow_stepsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    workflow_id?: IntFieldUpdateOperationsInput | number
  }

  export type ticket_workflowCreateManyWorkflowsInput = {
    id?: number
    ticket_id: number
    current_step?: number | null
  }

  export type workflow_stepsCreateManyWorkflowsInput = {
    id?: number
    step_order: number
    name: string
    action?: string | null
  }

  export type ticket_workflowUpdateWithoutWorkflowsInput = {
    tickets?: ticketsUpdateOneRequiredWithoutTicket_workflowNestedInput
    workflow_steps?: workflow_stepsUpdateOneWithoutTicket_workflowNestedInput
  }

  export type ticket_workflowUncheckedUpdateWithoutWorkflowsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    current_step?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ticket_workflowUncheckedUpdateManyWithoutWorkflowsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    current_step?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type workflow_stepsUpdateWithoutWorkflowsInput = {
    step_order?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_workflow?: ticket_workflowUpdateManyWithoutWorkflow_stepsNestedInput
  }

  export type workflow_stepsUncheckedUpdateWithoutWorkflowsInput = {
    id?: IntFieldUpdateOperationsInput | number
    step_order?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_workflow?: ticket_workflowUncheckedUpdateManyWithoutWorkflow_stepsNestedInput
  }

  export type workflow_stepsUncheckedUpdateManyWithoutWorkflowsInput = {
    id?: IntFieldUpdateOperationsInput | number
    step_order?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}