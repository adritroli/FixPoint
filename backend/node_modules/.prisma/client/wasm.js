
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AssetsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  serial_number: 'serial_number',
  assigned_to: 'assigned_to',
  status: 'status'
};

exports.Prisma.BudgetsScalarFieldEnum = {
  id: 'id',
  project_id: 'project_id',
  amount: 'amount',
  description: 'description',
  created_at: 'created_at'
};

exports.Prisma.Channel_membersScalarFieldEnum = {
  id: 'id',
  channel_id: 'channel_id',
  user_id: 'user_id'
};

exports.Prisma.ChannelsScalarFieldEnum = {
  id: 'id',
  team_id: 'team_id',
  name: 'name',
  type: 'type'
};

exports.Prisma.ClientsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  company: 'company',
  created_at: 'created_at'
};

exports.Prisma.ContractsScalarFieldEnum = {
  id: 'id',
  supplier_id: 'supplier_id',
  project_id: 'project_id',
  description: 'description',
  start_date: 'start_date',
  end_date: 'end_date',
  amount: 'amount',
  status: 'status'
};

exports.Prisma.CostsScalarFieldEnum = {
  id: 'id',
  project_id: 'project_id',
  description: 'description',
  amount: 'amount',
  date: 'date'
};

exports.Prisma.DocumentsScalarFieldEnum = {
  id: 'id',
  project_id: 'project_id',
  name: 'name',
  content: 'content',
  type: 'type',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.EventsScalarFieldEnum = {
  id: 'id',
  project_id: 'project_id',
  name: 'name',
  description: 'description',
  start_datetime: 'start_datetime',
  end_datetime: 'end_datetime',
  type: 'type'
};

exports.Prisma.Hr_recordsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  type: 'type',
  details: 'details',
  date: 'date'
};

exports.Prisma.LeadsScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  project_id: 'project_id',
  status: 'status',
  notes: 'notes',
  created_at: 'created_at'
};

exports.Prisma.MessagesScalarFieldEnum = {
  id: 'id',
  channel_id: 'channel_id',
  user_id: 'user_id',
  content: 'content',
  created_at: 'created_at'
};

exports.Prisma.PermissionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  project_id: 'project_id',
  permission: 'permission'
};

exports.Prisma.Project_resourcesScalarFieldEnum = {
  id: 'id',
  project_id: 'project_id',
  resource_id: 'resource_id',
  assigned_from: 'assigned_from',
  assigned_to: 'assigned_to'
};

exports.Prisma.ProjectsScalarFieldEnum = {
  id: 'id',
  team_id: 'team_id',
  name: 'name',
  description: 'description',
  status: 'status',
  start_date: 'start_date',
  end_date: 'end_date',
  created_at: 'created_at'
};

exports.Prisma.ReportsScalarFieldEnum = {
  id: 'id',
  project_id: 'project_id',
  team_id: 'team_id',
  user_id: 'user_id',
  type: 'type',
  data: 'data',
  created_at: 'created_at'
};

exports.Prisma.ResourcesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  user_id: 'user_id',
  team_id: 'team_id',
  availability: 'availability'
};

exports.Prisma.Sprint_tasksScalarFieldEnum = {
  id: 'id',
  sprint_id: 'sprint_id',
  task_id: 'task_id'
};

exports.Prisma.SprintsScalarFieldEnum = {
  id: 'id',
  project_id: 'project_id',
  name: 'name',
  start_date: 'start_date',
  end_date: 'end_date',
  goal: 'goal',
  status: 'status'
};

exports.Prisma.SuppliersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contact_info: 'contact_info'
};

exports.Prisma.Task_assigneesScalarFieldEnum = {
  id: 'id',
  task_id: 'task_id',
  user_id: 'user_id'
};

exports.Prisma.Task_label_linksScalarFieldEnum = {
  id: 'id',
  task_id: 'task_id',
  label_id: 'label_id'
};

exports.Prisma.Task_labelsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color'
};

exports.Prisma.TasksScalarFieldEnum = {
  id: 'id',
  project_id: 'project_id',
  parent_task_id: 'parent_task_id',
  name: 'name',
  description: 'description',
  status: 'status',
  priority: 'priority',
  due_date: 'due_date',
  wip_limit: 'wip_limit',
  swimlane: 'swimlane',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Team_membersScalarFieldEnum = {
  id: 'id',
  team_id: 'team_id',
  user_id: 'user_id',
  role: 'role'
};

exports.Prisma.TeamsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logo: 'logo',
  plan: 'plan',
  created_at: 'created_at'
};

exports.Prisma.Ticket_commentsScalarFieldEnum = {
  id: 'id',
  ticket_id: 'ticket_id',
  user_id: 'user_id',
  comment: 'comment',
  created_at: 'created_at'
};

exports.Prisma.Ticket_historyScalarFieldEnum = {
  id: 'id',
  ticket_id: 'ticket_id',
  action: 'action',
  performed_by: 'performed_by',
  performed_at: 'performed_at',
  details: 'details'
};

exports.Prisma.Ticket_workflowScalarFieldEnum = {
  id: 'id',
  ticket_id: 'ticket_id',
  workflow_id: 'workflow_id',
  current_step: 'current_step'
};

exports.Prisma.TicketsScalarFieldEnum = {
  id: 'id',
  project_id: 'project_id',
  created_by: 'created_by',
  assigned_to: 'assigned_to',
  type: 'type',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  sla_hours: 'sla_hours',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password_hash: 'password_hash',
  avatar: 'avatar',
  role: 'role',
  created_at: 'created_at',
  last_name: 'last_name'
};

exports.Prisma.Workflow_stepsScalarFieldEnum = {
  id: 'id',
  workflow_id: 'workflow_id',
  step_order: 'step_order',
  name: 'name',
  action: 'action'
};

exports.Prisma.WorkflowsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.assetsOrderByRelevanceFieldEnum = {
  name: 'name',
  type: 'type',
  serial_number: 'serial_number'
};

exports.Prisma.budgetsOrderByRelevanceFieldEnum = {
  description: 'description'
};

exports.Prisma.channelsOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.clientsOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  phone: 'phone',
  company: 'company'
};

exports.Prisma.contractsOrderByRelevanceFieldEnum = {
  description: 'description'
};

exports.Prisma.costsOrderByRelevanceFieldEnum = {
  description: 'description'
};

exports.Prisma.documentsOrderByRelevanceFieldEnum = {
  name: 'name',
  content: 'content'
};

exports.Prisma.eventsOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.hr_recordsOrderByRelevanceFieldEnum = {
  details: 'details'
};

exports.Prisma.leadsOrderByRelevanceFieldEnum = {
  notes: 'notes'
};

exports.Prisma.messagesOrderByRelevanceFieldEnum = {
  content: 'content'
};

exports.Prisma.permissionsOrderByRelevanceFieldEnum = {
  permission: 'permission'
};

exports.Prisma.projectsOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.resourcesOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.sprintsOrderByRelevanceFieldEnum = {
  name: 'name',
  goal: 'goal'
};

exports.Prisma.suppliersOrderByRelevanceFieldEnum = {
  name: 'name',
  contact_info: 'contact_info'
};

exports.Prisma.task_labelsOrderByRelevanceFieldEnum = {
  name: 'name',
  color: 'color'
};

exports.Prisma.tasksOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  swimlane: 'swimlane'
};

exports.Prisma.teamsOrderByRelevanceFieldEnum = {
  name: 'name',
  logo: 'logo',
  plan: 'plan'
};

exports.Prisma.ticket_commentsOrderByRelevanceFieldEnum = {
  comment: 'comment'
};

exports.Prisma.ticket_historyOrderByRelevanceFieldEnum = {
  action: 'action',
  details: 'details'
};

exports.Prisma.ticketsOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description'
};

exports.Prisma.usersOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  password_hash: 'password_hash',
  avatar: 'avatar',
  last_name: 'last_name'
};

exports.Prisma.workflow_stepsOrderByRelevanceFieldEnum = {
  name: 'name',
  action: 'action'
};

exports.Prisma.workflowsOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};
exports.assets_status = exports.$Enums.assets_status = {
  active: 'active',
  maintenance: 'maintenance',
  retired: 'retired'
};

exports.channels_type = exports.$Enums.channels_type = {
  public: 'public',
  private: 'private',
  project: 'project'
};

exports.contracts_status = exports.$Enums.contracts_status = {
  active: 'active',
  expired: 'expired',
  cancelled: 'cancelled'
};

exports.documents_type = exports.$Enums.documents_type = {
  doc: 'doc',
  wiki: 'wiki',
  policy: 'policy',
  manual: 'manual'
};

exports.events_type = exports.$Enums.events_type = {
  milestone: 'milestone',
  meeting: 'meeting',
  holiday: 'holiday',
  other: 'other'
};

exports.hr_records_type = exports.$Enums.hr_records_type = {
  attendance: 'attendance',
  vacation: 'vacation',
  evaluation: 'evaluation'
};

exports.leads_status = exports.$Enums.leads_status = {
  new: 'new',
  contacted: 'contacted',
  qualified: 'qualified',
  lost: 'lost',
  won: 'won'
};

exports.projects_status = exports.$Enums.projects_status = {
  active: 'active',
  archived: 'archived',
  completed: 'completed'
};

exports.reports_type = exports.$Enums.reports_type = {
  performance: 'performance',
  kpi: 'kpi',
  custom: 'custom'
};

exports.resources_type = exports.$Enums.resources_type = {
  person: 'person',
  equipment: 'equipment',
  machine: 'machine',
  other: 'other'
};

exports.resources_availability = exports.$Enums.resources_availability = {
  available: 'available',
  busy: 'busy',
  vacation: 'vacation',
  inactive: 'inactive'
};

exports.sprints_status = exports.$Enums.sprints_status = {
  planned: 'planned',
  active: 'active',
  completed: 'completed',
  retrospective: 'retrospective'
};

exports.tasks_status = exports.$Enums.tasks_status = {
  todo: 'todo',
  in_progress: 'in_progress',
  done: 'done',
  blocked: 'blocked'
};

exports.tasks_priority = exports.$Enums.tasks_priority = {
  low: 'low',
  medium: 'medium',
  high: 'high',
  urgent: 'urgent'
};

exports.team_members_role = exports.$Enums.team_members_role = {
  owner: 'owner',
  admin: 'admin',
  member: 'member'
};

exports.tickets_type = exports.$Enums.tickets_type = {
  bug: 'bug',
  feature: 'feature',
  support: 'support',
  other: 'other'
};

exports.tickets_status = exports.$Enums.tickets_status = {
  open: 'open',
  in_progress: 'in_progress',
  resolved: 'resolved',
  closed: 'closed',
  escalated: 'escalated'
};

exports.tickets_priority = exports.$Enums.tickets_priority = {
  low: 'low',
  medium: 'medium',
  high: 'high',
  urgent: 'urgent'
};

exports.users_role = exports.$Enums.users_role = {
  admin: 'admin',
  manager: 'manager',
  user: 'user',
  guest: 'guest'
};

exports.Prisma.ModelName = {
  assets: 'assets',
  budgets: 'budgets',
  channel_members: 'channel_members',
  channels: 'channels',
  clients: 'clients',
  contracts: 'contracts',
  costs: 'costs',
  documents: 'documents',
  events: 'events',
  hr_records: 'hr_records',
  leads: 'leads',
  messages: 'messages',
  permissions: 'permissions',
  project_resources: 'project_resources',
  projects: 'projects',
  reports: 'reports',
  resources: 'resources',
  sprint_tasks: 'sprint_tasks',
  sprints: 'sprints',
  suppliers: 'suppliers',
  task_assignees: 'task_assignees',
  task_label_links: 'task_label_links',
  task_labels: 'task_labels',
  tasks: 'tasks',
  team_members: 'team_members',
  teams: 'teams',
  ticket_comments: 'ticket_comments',
  ticket_history: 'ticket_history',
  ticket_workflow: 'ticket_workflow',
  tickets: 'tickets',
  users: 'users',
  workflow_steps: 'workflow_steps',
  workflows: 'workflows'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
